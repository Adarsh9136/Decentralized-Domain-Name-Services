/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/_app"],{

/***/ "./node_modules/@onflow/config/dist/config.module.js":
/*!***********************************************************!*\
  !*** ./node_modules/@onflow/config/dist/config.module.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearConfig\": function() { return /* binding */ clearConfig; },\n/* harmony export */   \"config\": function() { return /* binding */ config; }\n/* harmony export */ });\n/* harmony import */ var _onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-actor */ \"./node_modules/@onflow/util-actor/dist/actor.module.js\");\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/util-logger */ \"./node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-invariant */ \"./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n\n\n\n\nconst pipe = function () {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return func(res);\n    }, v);\n  };\n};\n\n/***\n * Merge multiple functions returning objects into one object.\n * @param {...function(*): object} funcs - Functions to merge\n * @return {object} - Merged object\n */\nconst mergePipe = function () {\n  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    funcs[_key2] = arguments[_key2];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return {\n        ...res,\n        ...func(v)\n      };\n    }, {});\n  };\n};\n\n/**\n * @description Object check\n * @param {*} value - Value to check\n * @returns {boolean} - Is object status\n */\nconst isObject = value => value && typeof value === \"object\" && !Array.isArray(value);\n\n/**\n * @description Deep merge multiple objects.\n * @param {object} target - Target object\n * @param {...object[]} sources - Source objects\n * @returns {object} - Merged object\n */\nconst mergeDeep = function (target) {\n  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    sources[_key3 - 1] = arguments[_key3];\n  }\n  if (!sources.length) return target;\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, {\n          [key]: {}\n        });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  return mergeDeep(target, ...sources);\n};\n\n/**\n * @description Deep merge multiple Flow JSON.\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {object} - Merged Flow JSON\n */\nconst mergeFlowJSONs = value => Array.isArray(value) ? mergeDeep({}, ...value) : value;\n\n/**\n * @description Filter out contracts section of flow.json.\n * @param {object|object[]} obj - Flow JSON or array of Flow JSONs\n * @returns {object} - Contracts section of Flow JSON\n */\nconst filterContracts = obj => obj.contracts ? obj.contracts : {};\n\n/**\n * @description Gathers contract addresses by network\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapContractAliasesToNetworkAddress = network => contracts => {\n  return Object.entries(contracts).reduce((c, _ref) => {\n    let [key, value] = _ref;\n    const networkContractAlias = value?.aliases?.[network];\n    if (networkContractAlias) {\n      c[key] = networkContractAlias;\n    }\n    return c;\n  }, {});\n};\nconst mapDeploymentsToNetworkAddress = network => _ref2 => {\n  let {\n    deployments = {},\n    accounts = {}\n  } = _ref2;\n  const networkDeployment = deployments?.[network];\n  if (!networkDeployment) return {};\n  return Object.entries(networkDeployment).reduce((c, _ref3) => {\n    let [key, value] = _ref3;\n    // Resolve account address\n    const accountAddress = accounts[key]?.address;\n    if (!accountAddress) return c;\n\n    // Create an object assigning the address to the contract name.\n    return value.reduce((c, contract) => {\n      return {\n        ...c,\n        [contract]: accountAddress\n      };\n    }, {});\n  }, {});\n};\n\n/**\n * @description Take in flow.json files and return contract to address mapping by network\n * @param {object|object[]} jsons - Flow JSON or array of Flow JSONs\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst getContracts = (jsons, network) => {\n  return pipe(mergeFlowJSONs, mergePipe(mapDeploymentsToNetworkAddress(network), pipe(filterContracts, mapContractAliasesToNetworkAddress(network))))(jsons);\n};\n\n/**\n * @description Checks if string is hexidecimal\n * @param {string} str - String to check\n * @returns {boolean} - Is hexidecimal status\n */\nconst isHexidecimal = str => {\n  // Check that it is a string\n  if (typeof str !== \"string\") return false;\n  return /^[0-9A-Fa-f]+$/.test(str);\n};\n\n/**\n * @description Checks flow.json file for private keys\n * @param {object} flowJSON - Flow JSON\n * @returns {boolean} - Has private keys status\n */\nconst hasPrivateKeys = flowJSON => {\n  return Object.entries(flowJSON?.accounts).reduce((hasPrivateKey, _ref4) => {\n    let [key, value] = _ref4;\n    if (hasPrivateKey) return true;\n    return value?.hasOwnProperty(\"key\") && isHexidecimal(value?.key);\n  }, false);\n};\n\n/**\n * @description Take in flow.json or array of flow.json files and checks for private keys\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {boolean} - Has private keys status\n */\nconst anyHasPrivateKeys = value => {\n  if (isObject(value)) return hasPrivateKeys(value);\n  return value.some(hasPrivateKeys);\n};\n\n/**\n * @description Format network to always be 'emulator', 'testnet', or 'mainnet'\n * @param {string} network - Network to format\n * @returns {string} - Formatted network name (either 'emulator', 'testnet', or 'mainnet')\n */\nconst cleanNetwork = network => network?.toLowerCase() === \"local\" ? \"emulator\" : network?.toLowerCase();\n\nconst NAME = \"config\";\nconst PUT = \"PUT_CONFIG\";\nconst GET = \"GET_CONFIG\";\nconst GET_ALL = \"GET_ALL_CONFIG\";\nconst UPDATE = \"UPDATE_CONFIG\";\nconst DELETE = \"DELETE_CONFIG\";\nconst CLEAR = \"CLEAR_CONFIG\";\nconst WHERE = \"WHERE_CONFIG\";\nconst UPDATED = \"CONFIG/UPDATED\";\nconst identity = v => v;\nconst HANDLERS = {\n  [PUT]: (ctx, _letter, _ref) => {\n    let {\n      key,\n      value\n    } = _ref;\n    if (key == null) throw new Error(\"Missing 'key' for config/put.\");\n    ctx.put(key, value);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [GET]: (ctx, letter, _ref2) => {\n    let {\n      key,\n      fallback\n    } = _ref2;\n    if (key == null) throw new Error(\"Missing 'key' for config/get\");\n    letter.reply(ctx.get(key, fallback));\n  },\n  [GET_ALL]: (ctx, letter) => {\n    letter.reply({\n      ...ctx.all()\n    });\n  },\n  [UPDATE]: (ctx, letter, _ref3) => {\n    let {\n      key,\n      fn\n    } = _ref3;\n    if (key == null) throw new Error(\"Missing 'key' for config/update\");\n    ctx.update(key, fn || identity);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [DELETE]: (ctx, letter, _ref4) => {\n    let {\n      key\n    } = _ref4;\n    if (key == null) throw new Error(\"Missing 'key' for config/delete\");\n    ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [CLEAR]: (ctx, letter) => {\n    let keys = Object.keys(ctx.all());\n    for (let key of keys) ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [WHERE]: (ctx, letter, _ref5) => {\n    let {\n      pattern\n    } = _ref5;\n    if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\");\n    letter.reply(ctx.where(pattern));\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n  }\n};\n(0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.spawn)(HANDLERS, NAME);\n\n/**\n * @description Adds a key-value pair to the config\n * @param {string} key - The key to add\n * @param {*} value - The value to add\n * @returns {Promise<object>} - The current config\n */\nfunction put(key, value) {\n  (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, PUT, {\n    key,\n    value\n  });\n  return config();\n}\n\n/**\n * @description Gets a key-value pair with a fallback from the config\n * @param {string} key - The key to add\n * @param {*} [fallback] - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nfunction get(key, fallback) {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, GET, {\n    key,\n    fallback\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Returns the first non null config value or the fallback\n * @param {string[]} wants - The keys to search for\n * @param {*} fallback - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nasync function first() {\n  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let fallback = arguments.length > 1 ? arguments[1] : undefined;\n  if (!wants.length) return fallback;\n  const [head, ...rest] = wants;\n  const ret = await get(head);\n  if (ret == null) return first(rest, fallback);\n  return ret;\n}\n\n/**\n * @description Returns the current config\n * @returns {Promise<object>} - The current config\n */\nfunction all() {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, GET_ALL, null, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Updates a key-value pair in the config\n * @param {string} key - The key to update\n * @param {Function} fn - The function to update the value with\n * @returns {Promise<object>} - The current config\n */\nfunction update(key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;\n  (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, UPDATE, {\n    key,\n    fn\n  });\n  return config();\n}\n\n/**\n * @description Deletes a key-value pair from the config\n * @param {string} key - The key to delete\n * @returns {Promise<object>} - The current config\n */\nfunction _delete(key) {\n  (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, DELETE, {\n    key\n  });\n  return config();\n}\n\n/**\n * @description Returns a subset of the config based on a pattern\n * @param {string} pattern - The pattern to match keys against\n * @returns {Promise<object>} - The subset of the config\n */\nfunction where(pattern) {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, WHERE, {\n    pattern\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Subscribes to config updates\n * @param {Function} callback - The callback to call when config is updated\n * @returns {Function} - The unsubscribe function\n */\nfunction subscribe(callback) {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.subscriber)(NAME, () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.spawn)(HANDLERS, NAME), callback);\n}\n\n/**\n * @description Clears the config\n * @returns {void}\n */\nfunction clearConfig() {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_0__.send)(NAME, CLEAR);\n}\n\n/**\n * @description Resets the config to a previous state\n * @param {object} oldConfig - The previous config state\n * @returns {Promise<object>} - The current config\n */\nfunction resetConfig(oldConfig) {\n  return clearConfig().then(config(oldConfig));\n}\n\n/**\n * @description Takes in flow.json or array of flow.json files and creates contract placeholders\n * @param {object|object[]} data - The flow.json or array of flow.json files\n * @returns {void}\n */\nasync function load(data) {\n  const network = await get(\"flow.network\");\n  const cleanedNetwork = cleanNetwork(network);\n  const {\n    flowJSON\n  } = data;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Boolean(flowJSON), \"config.load -- 'flowJSON' must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define \"flow.network\" to \"emulator\", \"local\", \"testnet\", or \"mainnet\" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);\n  if (anyHasPrivateKeys(flowJSON)) {\n    const isEmulator = cleanedNetwork === \"emulator\";\n    _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.log({\n      title: \"Private Keys Detected\",\n      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,\n      level: isEmulator ? _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.warn : _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.error\n    });\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isEmulator, `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`);\n  }\n  for (const [key, value] of Object.entries(getContracts(flowJSON, cleanedNetwork))) {\n    const contractConfigKey = `0x${key}`;\n    const existingContractConfigKey = await get(contractConfigKey);\n    if (existingContractConfigKey && existingContractConfigKey !== value) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.warn\n      });\n    } else {\n      put(contractConfigKey, value);\n    }\n    const systemContractConfigKey = `system.contracts.${key}`;\n    const systemExistingContractConfigKeyValue = await get(systemContractConfigKey);\n    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_1__.LEVELS.warn\n      });\n    } else {\n      put(systemContractConfigKey, value);\n    }\n  }\n}\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @description Sets the config\n * @param {object} [values] - The values to set\n */\nfunction config(values) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(d => put(d, values[d]));\n  }\n  return {\n    put,\n    get,\n    all,\n    first,\n    update,\n    delete: _delete,\n    where,\n    subscribe,\n    overload,\n    load\n  };\n}\nconfig.put = put;\nconfig.get = get;\nconfig.all = all;\nconfig.first = first;\nconfig.update = update;\nconfig.delete = _delete;\nconfig.where = where;\nconfig.subscribe = subscribe;\nconfig.overload = overload;\nconfig.load = load;\nconst noop = v => v;\nfunction overload() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  return new Promise(async (resolve, reject) => {\n    const oldConfig = await all();\n    try {\n      config(opts);\n      var result = await callback(await all());\n      await resetConfig(oldConfig);\n      resolve(result);\n    } catch (error) {\n      await resetConfig(oldConfig);\n      reject(error);\n    }\n  });\n}\n\n\n//# sourceMappingURL=config.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@onflow/config/dist/config.module.js\n"));

/***/ }),

/***/ "./node_modules/@onflow/fcl/dist/fcl.module.js":
/*!*****************************************************!*\
  !*** ./node_modules/@onflow/fcl/dist/fcl.module.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AppUtils\": function() { return /* binding */ index$1; },\n/* harmony export */   \"InteractionTemplateUtils\": function() { return /* binding */ index; },\n/* harmony export */   \"TestUtils\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.TestUtils; },\n/* harmony export */   \"VERSION\": function() { return /* binding */ VERSION; },\n/* harmony export */   \"WalletUtils\": function() { return /* binding */ index$2; },\n/* harmony export */   \"account\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.account; },\n/* harmony export */   \"arg\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.arg; },\n/* harmony export */   \"args\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.args; },\n/* harmony export */   \"atBlockHeight\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.atBlockHeight; },\n/* harmony export */   \"atBlockId\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.atBlockId; },\n/* harmony export */   \"authenticate\": function() { return /* binding */ authenticate; },\n/* harmony export */   \"authorization\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.authorization; },\n/* harmony export */   \"authorizations\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.authorizations; },\n/* harmony export */   \"authz\": function() { return /* binding */ authz; },\n/* harmony export */   \"block\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block; },\n/* harmony export */   \"build\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.build; },\n/* harmony export */   \"cadence\": function() { return /* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_10__.template; },\n/* harmony export */   \"cdc\": function() { return /* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_10__.template; },\n/* harmony export */   \"config\": function() { return /* reexport safe */ _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config; },\n/* harmony export */   \"createSignableVoucher\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.createSignableVoucher; },\n/* harmony export */   \"currentUser\": function() { return /* binding */ currentUser; },\n/* harmony export */   \"decode\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode; },\n/* harmony export */   \"discovery\": function() { return /* binding */ discovery; },\n/* harmony export */   \"display\": function() { return /* reexport safe */ _onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.display; },\n/* harmony export */   \"events\": function() { return /* binding */ events; },\n/* harmony export */   \"getAccount\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getAccount; },\n/* harmony export */   \"getBlock\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getBlock; },\n/* harmony export */   \"getBlockHeader\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getBlockHeader; },\n/* harmony export */   \"getChainId\": function() { return /* binding */ getChainId; },\n/* harmony export */   \"getCollection\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getCollection; },\n/* harmony export */   \"getEvents\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEvents; },\n/* harmony export */   \"getEventsAtBlockHeightRange\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockHeightRange; },\n/* harmony export */   \"getEventsAtBlockIds\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockIds; },\n/* harmony export */   \"getNetworkParameters\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getNetworkParameters; },\n/* harmony export */   \"getTransaction\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getTransaction; },\n/* harmony export */   \"getTransactionStatus\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getTransactionStatus; },\n/* harmony export */   \"invariant\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant; },\n/* harmony export */   \"isBad\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.isBad; },\n/* harmony export */   \"isOk\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.isOk; },\n/* harmony export */   \"limit\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.limit; },\n/* harmony export */   \"logIn\": function() { return /* binding */ logIn; },\n/* harmony export */   \"mutate\": function() { return /* binding */ mutate; },\n/* harmony export */   \"param\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.param; },\n/* harmony export */   \"params\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.params; },\n/* harmony export */   \"payer\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.payer; },\n/* harmony export */   \"ping\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.ping; },\n/* harmony export */   \"pipe\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.pipe; },\n/* harmony export */   \"pluginRegistry\": function() { return /* binding */ pluginRegistry; },\n/* harmony export */   \"proposer\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.proposer; },\n/* harmony export */   \"query\": function() { return /* binding */ query; },\n/* harmony export */   \"reauthenticate\": function() { return /* binding */ reauthenticate; },\n/* harmony export */   \"ref\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.ref; },\n/* harmony export */   \"sansPrefix\": function() { return /* reexport safe */ _onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix; },\n/* harmony export */   \"script\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.script; },\n/* harmony export */   \"send\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send; },\n/* harmony export */   \"serialize\": function() { return /* binding */ serialize; },\n/* harmony export */   \"signUp\": function() { return /* binding */ signUp; },\n/* harmony export */   \"t\": function() { return /* binding */ t; },\n/* harmony export */   \"transaction\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.transaction; },\n/* harmony export */   \"tx\": function() { return /* binding */ transaction; },\n/* harmony export */   \"unauthenticate\": function() { return /* binding */ unauthenticate; },\n/* harmony export */   \"validator\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.validator; },\n/* harmony export */   \"verifyUserSignatures\": function() { return /* binding */ verifyUserSignatures; },\n/* harmony export */   \"voucherIntercept\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.voucherIntercept; },\n/* harmony export */   \"voucherToTxId\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.voucherToTxId; },\n/* harmony export */   \"why\": function() { return /* reexport safe */ _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.why; },\n/* harmony export */   \"withPrefix\": function() { return /* reexport safe */ _onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix; }\n/* harmony export */ });\n/* harmony import */ var _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/sdk */ \"./node_modules/@onflow/sdk/dist/sdk.module.js\");\n/* harmony import */ var _onflow_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/types */ \"./node_modules/@onflow/types/dist/types.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-invariant */ \"./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _onflow_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onflow/config */ \"./node_modules/@onflow/config/dist/config.module.js\");\n/* harmony import */ var _onflow_util_address__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @onflow/util-address */ \"./node_modules/@onflow/util-address/dist/util-address.module.js\");\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @onflow/util-logger */ \"./node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @onflow/rlp */ \"./node_modules/@onflow/rlp/dist/rlp.module.js\");\n/* harmony import */ var _onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @onflow/util-actor */ \"./node_modules/@onflow/util-actor/dist/actor.module.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n/* harmony import */ var _onflow_util_template__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @onflow/util-template */ \"./node_modules/@onflow/util-template/dist/template.module.js\");\n/* harmony import */ var _onflow_util_uid__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @onflow/util-uid */ \"./node_modules/@onflow/util-uid/dist/util-uid.module.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst VERSION = \"1.5.1\" ;\n\nconst is = type => d => typeof d === type;\nconst isRequired = d => d != null;\nconst isObject = is(\"object\");\nconst isString = is(\"string\");\nconst isFunc = is(\"function\");\nconst isNumber = is(\"number\");\n\nfunction normalizeArgs(ax) {\n  if (isFunc(ax)) return ax(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.arg, _onflow_types__WEBPACK_IMPORTED_MODULE_1__);\n  return [];\n}\n\nasync function httpDocumentResolver(_ref) {\n  let {\n    url\n  } = _ref;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof url !== \"undefined\", \"retrieve({ url }) -- url must be defined\");\n  let res;\n  try {\n    res = await cross_fetch__WEBPACK_IMPORTED_MODULE_3___default()(url);\n  } catch (e) {\n    throw new Error(\"httpDocumentResolver Error: Failed to retrieve document.\");\n  }\n  let document = res.ok ? await res.json() : null;\n  return document;\n}\nconst DOCUMENT_RESOLVERS = new Map([[\"http\", httpDocumentResolver], [\"https\", httpDocumentResolver]]);\nasync function retrieve(_ref2) {\n  let {\n    url\n  } = _ref2;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof url !== \"undefined\", \"retrieve({ url }) -- url must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof url === \"string\", \"retrieve({ url }) -- url must be a string\");\n  const documentResolversFromConfig = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_4__.config)().where(/^document\\.resolver\\./);\n  Object.keys(documentResolversFromConfig).map(key => {\n    const resolverFromConfig = documentResolversFromConfig[key];\n    const resolverProtocol = key.replace(/^document\\.resolver\\./, \"\");\n    DOCUMENT_RESOLVERS.set(resolverProtocol, resolverFromConfig);\n  });\n  const urlParts = /^(.*):\\/\\/([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/.exec(url);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(urlParts, \"Failed to parse URL\");\n  const protocol = urlParts[1];\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(urlParts, \"Failed to parse URL protocol\");\n  const resolver = DOCUMENT_RESOLVERS.get(protocol);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(resolver, `No resolver found for protcol=${protocol}`);\n  let document = await resolver({\n    url\n  });\n  return document;\n}\n\nfunction normalizeInteractionTemplate(template) {\n  if (template == null) return null;\n  switch (template[\"f_version\"]) {\n    case \"1.0.0\":\n      return template;\n    default:\n      throw new Error(\"normalizeInteractionTemplate Error: Invalid InteractionTemplate\");\n  }\n}\n\n/**\n * @description Fills import addresses in Cadence for network\n * \n * @param {object} params\n * @param {string} params.network - Network to derive Cadence for\n * @param {object} params.template - Interaction Template to derive Cadence from\n * @returns {string} - Cadence\n */\nfunction deriveCadenceByNetwork(_ref) {\n  let {\n    network,\n    template\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(network != undefined, \"deriveCadenceByNetwork({ network }) -- network must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof network === \"string\", \"deriveCadenceByNetwork({ network }) -- network must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"generateDependencyPin({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template === \"object\", \"generateDependencyPin({ template }) -- template must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template.f_type === \"InteractionTemplate\", \"generateDependencyPin({ template }) -- template must be an InteractionTemplate\");\n  template = normalizeInteractionTemplate(template);\n  switch (template.f_version) {\n    case \"1.0.0\":\n      let networkDependencies = Object.keys(template?.data?.dependencies).map(dependencyPlaceholder => {\n        let dependencyNetworkContracts = Object.values(template?.data?.dependencies?.[dependencyPlaceholder]);\n        (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(dependencyNetworkContracts, `deriveCadenceByNetwork -- Could not find contracts for dependency placeholder: ${dependencyPlaceholder}`);\n        (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(dependencyNetworkContracts.length === 0, `deriveCadenceByNetwork -- Could not find contracts for dependency placeholder: ${dependencyPlaceholder}`);\n        let dependencyContract = dependencyNetworkContracts[0];\n        let dependencyContractForNetwork = dependencyContract?.[network];\n        (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(dependencyContractForNetwork, `deriveCadenceByNetwork -- Could not find ${network} network information for dependency: ${dependencyPlaceholder}`);\n        return [dependencyPlaceholder, dependencyContractForNetwork.address];\n      });\n      return networkDependencies.reduce((cadence, _ref2) => {\n        let [placeholder, address] = _ref2;\n        const regex = new RegExp(\"(\\\\b\" + placeholder + \"\\\\b)\", \"g\");\n        return cadence.replace(regex, address);\n      }, template.data.cadence);\n    default:\n      throw new Error(\"deriveCadenceByNetwork Error: Unsupported template version\");\n  }\n}\n\nasync function fetchChainId() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const response = await _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send([_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getNetworkParameters()], opts).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n  return response.chainId;\n}\n\n// Cache of chainId promises for each access node value\n// key: access node, value: chainId promise\nlet chainIdCache = {};\nlet hasWarnedEnv = false;\n\n/**\n * @description\n * Gets the chain ID if its set, otherwise gets the chain ID from the access node\n *\n * @param {object} opts - Optional parameters\n * @returns {Promise<string>} The chain ID of the access node\n * @throws {Error} If the chain ID is not found\n *\n * @example\n * // returns \"testnet\"\n * getChainId()\n */\nasync function getChainId() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let flowNetworkCfg = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"flow.network\");\n  let envCfg = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"env\");\n  if (envCfg && !hasWarnedEnv) {\n    _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.log.deprecate({\n      pkg: \"FCL\",\n      subject: 'Using the \"env\" configuration key for specifying the flow network',\n      message: \"Configuring to specify flow network is no longer required\",\n      transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/TRANSITIONS.md#0001-deprecate-env-config-key\"\n    });\n    hasWarnedEnv = true;\n  }\n  const accessNode = opts.node || (await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"accessNode.api\"));\n  if (!accessNode) {\n    // Fall back to deprecated flow.network and env config keys\n    // This probably should have been done before trying to fetch the chainId from the access node\n    // However, this was the behaviour with the initial implementation of getChainId()\n    if (flowNetworkCfg) {\n      return flowNetworkCfg;\n    } else if (envCfg) {\n      return envCfg;\n    }\n    throw new Error(`Either the \"accessNode.api\" config key or opts.node must be set`);\n  }\n\n  // Try using cached chainId first if it exists and access node is the same\n  if (chainIdCache[accessNode]) {\n    try {\n      return await chainIdCache[accessNode];\n    } catch {}\n  }\n\n  // If no cached chainId, value is stale, or last attempt failed, try getting chainId from access node\n  // Check if another getChainId() call has already started a new promise, if not, start a new one\n  // There may have been concurrent calls to getChainId() while the first call was waiting for the response\n  if (!chainIdCache[accessNode]) {\n    chainIdCache[accessNode] = fetchChainId(opts).catch(error => {\n      // If there was an error, reset the promise so that the next call will try again\n      chainIdCache[accessNode] = null;\n      throw error;\n    });\n  }\n\n  // Use newly created promise\n  try {\n    return await chainIdCache[accessNode];\n  } catch (e) {\n    // Fall back to deprecated flow.network and env config keys\n    // This probably should have been done before trying to fetch the chainId from the access node\n    // However, this was the behaviour with the initial implementation of getChainId()\n    if (flowNetworkCfg) {\n      return flowNetworkCfg;\n    } else if (envCfg) {\n      return envCfg;\n    }\n    throw new Error(`Error getting chainId from access node - are you using the correct access node endpoint.  If running locally, is your emulator up-to-date? ${e.message}`);\n  }\n}\n\n/**\n * @description\n * Watches the config for changes to access node and updates the chain id accordingly\n *\n * @returns {Function} A function that unsubscribes the listener\n *\n */\nfunction watchForChainIdChanges() {\n  return _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.subscribe(() => {\n    // Call getChainId to update the chainId cache if access node has changed\n    getChainId({\n      enableRequestLogging: false\n    }).catch(() => {});\n  });\n}\n\nfunction isAndroid() {\n  return typeof navigator !== \"undefined\" && /android/i.test(navigator.userAgent);\n}\nfunction isSmallIOS() {\n  return typeof navigator !== \"undefined\" && /iPhone|iPod/.test(navigator.userAgent);\n}\nfunction isLargeIOS() {\n  return typeof navigator !== \"undefined\" && /iPad/.test(navigator.userAgent);\n}\nfunction isIOS() {\n  return isSmallIOS() || isLargeIOS();\n}\nfunction isMobile() {\n  return isAndroid() || isIOS();\n}\n\nasync function deriveDependencies() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const template = opts.template;\n  const network = await getChainId(opts);\n  const derivedDependencies = {};\n  switch (template[\"f_version\"]) {\n    case \"1.0.0\":\n      const dependencyPlaceholderKeys = Object.keys(template?.data?.dependencies);\n      for (let dependencyPlaceholderKey of dependencyPlaceholderKeys) {\n        let dependencyPlaceholder = template?.data?.dependencies[dependencyPlaceholderKey];\n        const dependencyPlaceholderContractsKeys = Object.keys(dependencyPlaceholder);\n        (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(dependencyPlaceholderContractsKeys.length > 0, `FCL configureDependencies Error: No contracts found in template for placeholder=${dependencyPlaceholderKey}`);\n        const dependencyPlaceholderContract = dependencyPlaceholder[dependencyPlaceholderContractsKeys[0]];\n        const dependency = dependencyPlaceholderContract[network];\n        (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(dependency, `FCL configureDependencies Error: No dependency information for placeholder=${dependencyPlaceholderKey} contract=${dependencyPlaceholderContractsKeys[0]} network=${network}`);\n        (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(dependency?.address, `FCL configureDependencies Error: No address information for placeholder=${dependencyPlaceholderKey} contract=${dependencyPlaceholderContractsKeys[0]} network=${network}`);\n        derivedDependencies[dependencyPlaceholderKey] = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(dependency?.address);\n      }\n      return derivedDependencies;\n    default:\n      throw new Error(\"FCL configureDependencies Error: Unsupported template version\");\n  }\n}\n\nasync function prepTemplateOpts(opts) {\n  if (isString(opts?.template)) {\n    opts.template = await retrieve({\n      url: opts?.template\n    });\n  }\n  let dependencies = {};\n  if (opts?.template) {\n    opts.template = normalizeInteractionTemplate(opts?.template);\n    dependencies = await deriveDependencies({\n      template: opts.template\n    });\n  }\n  const cadence = opts.cadence || deriveCadenceByNetwork({\n    template: opts.template,\n    network: await getChainId(opts)\n  });\n  opts.cadence = cadence;\n  opts.dependencies = dependencies;\n  return opts;\n}\n\nasync function pre(type, opts) {\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(opts), `${type}(opts) -- opts is required`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isObject(opts), `${type}(opts) -- opts must be an object`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!(opts.cadence && opts.template), `${type}({ template, cadence }) -- cannot pass both cadence and template`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(opts.cadence || opts?.template), `${type}({ cadence }) -- cadence is required`);\n  // // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(opts.cadence) || opts?.template, `${type}({ cadence }) -- cadence must be a string`);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(await _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config().get(\"accessNode.api\"), `${type}(opts) -- Required value for \"accessNode.api\" not defined in config. See: ${\"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/src/exec/query.md#configuration\"}`);\n}\nasync function preMutate(opts) {\n  return pre(\"mutate\", opts);\n}\nasync function preQuery(opts) {\n  return pre(\"query\", opts);\n}\n\n/**\n * @description\n * Allows you to submit scripts to query the blockchain.\n *\n *  @param {object} opts - Query Options and configuration\n *  @param {string} opts.cadence - Cadence Script used to query Flow\n *  @param {import(\"../fcl\").ArgsFn} [opts.args] - Arguments passed to cadence script\n *  @param {object} [opts.template] - Interaction Template for a script\n *  @param {number} [opts.limit]   - Compute Limit for Query\n *  @returns {Promise}\n *\n *  @example\n *    const cadence = `\n *      cadence: `\n *        pub fun main(a: Int, b: Int, c: Address): Int {\n *          log(c)\n *          return a + b\n *        }\n *    `.trim()\n *\n *    const args = (arg, t) => [\n *      arg(5, t.Int),\n *      arg(7, t.Int),\n *      arg(\"0xb2db43ad6bc345fec9\", t.Address),\n *    ]\n *\n *    await query({ cadence, args })\n */\nasync function query() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  await preQuery(opts);\n  opts = await prepTemplateOpts(opts);\n  return _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config().overload(opts.dependencies || {}, async () =>\n  // prettier-ignore\n  _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send([_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.script(opts.cadence), _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.args(normalizeArgs(opts.args || [])), opts.limit && typeof opts.limit === \"number\" && _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.limit(opts.limit)]).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode));\n}\n\nconst FCL_REDIRECT_URL_PARAM_NAME = 'fcl_redirect_url';\nconst FCL_RESPONSE_PARAM_NAME = 'fclResponseJson';\nconst CORE_STRATEGIES = {\n  \"HTTP/RPC\": \"HTTP/RPC\",\n  \"HTTP/POST\": \"HTTP/POST\",\n  \"IFRAME/RPC\": \"IFRAME/RPC\",\n  \"POP/RPC\": \"POP/RPC\",\n  \"TAB/RPC\": \"TAB/RPC\",\n  \"EXT/RPC\": \"EXT/RPC\",\n  \"DEEPLINK/RPC\": \"DEEPLINK/RPC\"\n};\n\n/**\n * @description\n * Listens for messages from FCL\n * \n * @param {string} messageType - Message type\n * @param {Function} cb - Callback function\n * @returns {Function} - Function to remove event listener\n */\nconst onMessageFromFCL = function (messageType) {\n  let cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  const buildData = data => {\n    if (data.deprecated) console.warn(\"DEPRECATION NOTICE\", data.deprecated.message);\n    delete data?.body?.interaction;\n    return data;\n  };\n  const internal = e => {\n    const {\n      data\n    } = e;\n    if (typeof data !== \"object\") return;\n    if (typeof data == null) return;\n    if (data.type !== messageType) return;\n    cb(buildData(data));\n  };\n  window.addEventListener(\"message\", internal);\n  return () => window.removeEventListener(\"message\", internal);\n};\n\n/**\n * @description\n * Sends message to FCL window\n * \n * @param {string} type - Message type\n * @param {object} msg - Message object\n * @returns {void}\n * \n * @example\n * sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n *    f_type: \"PollingResponse\",\n *    f_vsn: \"1.0.0\",\n *    status: \"APPROVED\",\n *    reason: null,\n *    data: data,\n *  })\n */\nconst sendMsgToFCL = function (type) {\n  let msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const data = {\n    ...msg,\n    type\n  };\n  const urlParams = new URLSearchParams(window.location.search);\n  const redirectUrl = urlParams.get(FCL_REDIRECT_URL_PARAM_NAME);\n  if (redirectUrl) {\n    const url = new URL(redirectUrl);\n    url.searchParams.append(FCL_RESPONSE_PARAM_NAME, JSON.stringify(data));\n    window.location.href = url.href;\n  } else if (window.location !== window.parent.location) {\n    window.parent.postMessage({\n      ...msg,\n      type\n    }, \"*\");\n  } else if (window.opener) {\n    window.opener.postMessage({\n      ...msg,\n      type\n    }, \"*\");\n  } else {\n    throw new Error(\"Unable to communicate with parent FCL instance\");\n  }\n};\n\n/**\n * @description\n * Listens for \"FCL:VIEW:READY:RESPONSE\" and sends \"FCL:VIEW:READY\"\n * \n * @param {Function} cb - Callback function\n * @param {object} msg - Message object\n * @returns {void}\n */\nconst ready = function (cb) {\n  onMessageFromFCL(\"FCL:VIEW:READY:RESPONSE\", cb);\n  sendMsgToFCL(\"FCL:VIEW:READY\");\n};\n\n/**\n * @description\n * Sends \"FCL:VIEW:CLOSE\"\n * \n * @returns {void}\n */\nconst close = () => {\n  sendMsgToFCL(\"FCL:VIEW:CLOSE\");\n};\n\n/**\n * @description\n * Sends \"FCL:VIEW:RESPONSE\" with status \"APPROVED\"\n * \n * @param {object} data - Data object\n * @returns {void}\n */\nconst approve = data => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"APPROVED\",\n    reason: null,\n    data: data\n  });\n};\n\n/**\n * @description\n * Sends \"FCL:VIEW:RESPONSE\" with status \"DECLINED\"\n * \n * @param {string} reason - Reason for declining\n * @returns {void}\n */\nconst decline = reason => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"DECLINED\",\n    reason: reason,\n    data: null\n  });\n};\n\n/**\n * @description\n * Sends \"FCL:VIEW:RESPONSE\" with status \"REDIRECT\"\n * \n * @param {object} data - Data object\n * @returns {void}\n */\nconst redirect = data => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"REDIRECT\",\n    reason: null,\n    data: data\n  });\n};\n\nconst SERVICE_PRAGMA = {\n  f_type: \"Service\",\n  f_vsn: \"1.0.0\"\n};\nconst IDENTITY_PRAGMA = {\n  f_type: \"Identity\",\n  f_vsn: \"1.0.0\"\n};\nconst USER_PRAGMA = {\n  f_type: \"USER\",\n  f_vsn: \"1.0.0\"\n};\nconst POLLING_RESPONSE_PRAGMA = {\n  f_type: \"PollingResponse\",\n  f_vsn: \"1.0.0\"\n};\nconst COMPOSITE_SIGNATURE_PRAGMA = {\n  f_type: \"CompositeSignature\",\n  f_vsn: \"1.0.0\"\n};\n\n/**\n * @description\n * Constructs a new CompositeSignature instance.\n *\n * @param {string} addr - Flow Address\n * @param {number} keyId - Key ID\n * @param {string} signature - Signature as a hex string\n */\nfunction CompositeSignature(addr, keyId, signature) {\n  this.f_type = COMPOSITE_SIGNATURE_PRAGMA.f_type;\n  this.f_vsn = COMPOSITE_SIGNATURE_PRAGMA.f_vsn;\n  this.addr = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(addr);\n  this.keyId = Number(keyId);\n  this.signature = signature;\n}\n\nconst rightPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(value.padEnd(pad * 2, \"0\"), \"hex\");\nconst leftPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(value.padStart(pad * 2, \"0\"), \"hex\");\nconst addressBuffer = addr => leftPaddedHexBuffer(addr, 8);\nconst nonceBuffer = nonce => _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(nonce, \"hex\");\nconst encodeAccountProof = function (_ref) {\n  let {\n    address,\n    nonce,\n    appIdentifier\n  } = _ref;\n  let includeDomainTag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(address, \"Encode Message For Provable Authn Error: address must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(nonce, \"Encode Message For Provable Authn Error: nonce must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(appIdentifier, \"Encode Message For Provable Authn Error: appIdentifier must be defined\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(nonce.length >= 64, \"Encode Message For Provable Authn Error: nonce must be minimum of 32 bytes\");\n  const ACCOUNT_PROOF_DOMAIN_TAG = rightPaddedHexBuffer(_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(\"FCL-ACCOUNT-PROOF-V0.0\").toString(\"hex\"), 32);\n  if (includeDomainTag) {\n    return _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.concat([ACCOUNT_PROOF_DOMAIN_TAG, (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([appIdentifier, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(address)), nonceBuffer(nonce)])]).toString(\"hex\");\n  }\n  return (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([appIdentifier, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(address)), nonceBuffer(nonce)]).toString(\"hex\");\n};\n\nfunction injectExtService(service) {\n  if (service.type === \"authn\" && service.endpoint != null) {\n    if (!Array.isArray(window.fcl_extensions)) {\n      window.fcl_extensions = [];\n    }\n    window.fcl_extensions.push(service);\n  } else {\n    console.warn(\"Authn service is required\");\n  }\n}\n\nvar index$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  sendMsgToFCL: sendMsgToFCL,\n  ready: ready,\n  close: close,\n  approve: approve,\n  decline: decline,\n  redirect: redirect,\n  onMessageFromFCL: onMessageFromFCL,\n  encodeMessageFromSignable: _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.encodeMessageFromSignable,\n  CompositeSignature: CompositeSignature,\n  encodeAccountProof: encodeAccountProof,\n  injectExtService: injectExtService\n});\n\nconst ACCOUNT_PROOF = \"ACCOUNT_PROOF\";\nconst USER_SIGNATURE = \"USER_SIGNATURE\";\nconst validateArgs = args => {\n  if (args.appIdentifier) {\n    const {\n      appIdentifier,\n      address,\n      nonce,\n      signatures\n    } = args;\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(appIdentifier), \"verifyAccountProof({ appIdentifier }) -- appIdentifier must be a string\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(address) && (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(address).length === 16, \"verifyAccountProof({ address }) -- address must be a valid address\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(nonce), \"nonce must be a hex string\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Array.isArray(signatures) && signatures.every((sig, i, arr) => sig.f_type === \"CompositeSignature\"), \"Must include an Array of CompositeSignatures to verify\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(signatures.map(cs => cs.addr).every((addr, i, arr) => addr === arr[0]), \"User signatures to be verified must be from a single account address\");\n    return true;\n  } else {\n    const {\n      message,\n      address,\n      compSigs\n    } = args;\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(message), \"Signed message must be a hex string\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isString(address) && (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(address).length === 16, \"verifyUserSignatures({ address }) -- address must be a valid address\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Array.isArray(compSigs) && compSigs.every((sig, i, arr) => sig.f_type === \"CompositeSignature\"), \"Must include an Array of CompositeSignatures to verify\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(compSigs.map(cs => cs.addr).every((addr, i, arr) => addr === arr[0]), \"User signatures to be verified must be from a single account address\");\n    return true;\n  }\n};\n\n// TODO: pass in option for contract but we're connected to testnet\n// log address + network -> in sync?\nconst getVerifySignaturesScript = async (sig, opts) => {\n  const verifyFunction = sig === \"ACCOUNT_PROOF\" ? \"verifyAccountProofSignatures\" : \"verifyUserSignatures\";\n  let network = await getChainId(opts);\n  let fclCryptoContract;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(opts.fclCryptoContract || network === \"testnet\" || network === \"mainnet\", \"${verifyFunction}({ fclCryptoContract }) -- fclCrypto contract address must be set for non-mainnet/testnet networks\");\n  if (opts.fclCryptoContract) {\n    fclCryptoContract = opts.fclCryptoContract;\n  } else {\n    fclCryptoContract = network === \"testnet\" ? \"0x74daa6f9c7ef24b1\" : \"0xb4b82a1c9d21d284\";\n  }\n  return `\n      import FCLCrypto from ${fclCryptoContract}\n\n      pub fun main(\n          address: Address, \n          message: String, \n          keyIndices: [Int], \n          signatures: [String]\n      ): Bool {\n        return FCLCrypto.${verifyFunction}(address: address, message: message, keyIndices: keyIndices, signatures: signatures)\n      }\n    `;\n};\n\n/**\n * @description\n * Verify a valid account proof signature or signatures for an account on Flow.\n *\n * @param {string} appIdentifier - A message string in hexadecimal format\n * @param {object} accountProofData - An object consisting of address, nonce, and signatures\n * @param {string} accountProofData.address - A Flow account address\n * @param {string} accountProofData.nonce - A random string in hexadecimal format (minimum 32 bytes in total, i.e 64 hex characters)\n * @param {object[]} accountProofData.signatures - An array of composite signatures to verify\n * @param {object} [opts={}] - Options object\n * @param {string} opts.fclCryptoContract - An optional override Flow account address where the FCLCrypto contract is deployed\n * @returns {Promise<boolean>} - Returns true if the signature is valid, false otherwise\n *\n * @example\n *\n *  const accountProofData = {\n *   address: \"0x123\",\n *   nonce: \"F0123\"\n *   signatures: [{f_type: \"CompositeSignature\", f_vsn: \"1.0.0\", addr: \"0x123\", keyId: 0, signature: \"abc123\"}],\n *  }\n *\n *  const isValid = await fcl.AppUtils.verifyAccountProof(\n *    \"AwesomeAppId\",\n *    accountProofData,\n *    {fclCryptoContract}\n *  )\n */\nasync function verifyAccountProof(appIdentifier, _ref) {\n  let {\n    address,\n    nonce,\n    signatures\n  } = _ref;\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  validateArgs({\n    appIdentifier,\n    address,\n    nonce,\n    signatures\n  });\n  const message = encodeAccountProof({\n    address,\n    nonce,\n    appIdentifier\n  }, false);\n  let signaturesArr = [];\n  let keyIndices = [];\n  for (const el of signatures) {\n    signaturesArr.push(el.signature);\n    keyIndices.push(el.keyId.toString());\n  }\n  return query({\n    cadence: await getVerifySignaturesScript(ACCOUNT_PROOF, opts),\n    args: (arg, t) => [arg((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(address), t.Address), arg(message, t.String), arg(keyIndices, t.Array(t.Int)), arg(signaturesArr, t.Array(t.String))]\n  });\n}\n\n/**\n * @description\n * Verify a valid signature/s for an account on Flow.\n *\n * @param {string} message - A message string in hexadecimal format\n * @param {Array} compSigs - An array of Composite Signatures\n * @param {string} compSigs[].addr - The account address\n * @param {number} compSigs[].keyId - The account keyId\n * @param {string} compSigs[].signature - The signature to verify\n * @param {object} [opts={}] - Options object\n * @param {string} opts.fclCryptoContract - An optional override of Flow account address where the FCLCrypto contract is deployed\n * @returns {boolean} - Returns true if the signature is valid, false otherwise\n *\n * @example\n *\n *  const isValid = await fcl.AppUtils.verifyUserSignatures(\n *    Buffer.from('FOO').toString(\"hex\"),\n *    [{f_type: \"CompositeSignature\", f_vsn: \"1.0.0\", addr: \"0x123\", keyId: 0, signature: \"abc123\"}],\n *    {fclCryptoContract}\n *  )\n */\nasync function verifyUserSignatures$1(message, compSigs) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const address = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(compSigs[0].addr);\n  validateArgs({\n    message,\n    address,\n    compSigs\n  });\n  let signaturesArr = [];\n  let keyIndices = [];\n  for (const el of compSigs) {\n    signaturesArr.push(el.signature);\n    keyIndices.push(el.keyId.toString());\n  }\n  return query({\n    cadence: await getVerifySignaturesScript(USER_SIGNATURE, opts),\n    args: (arg, t) => [arg(address, t.Address), arg(message, t.String), arg(keyIndices, t.Array(t.Int)), arg(signaturesArr, t.Array(t.String))]\n  });\n}\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  verifyAccountProof: verifyAccountProof,\n  verifyUserSignatures: verifyUserSignatures$1\n});\n\n/**\n * Verify a valid signature/s for an account on Flow.\n *\n * @deprecated since version '1.0.0-alpha.0', use AppUtils.verifyUserSignatures instead\n *\n */\nconst verifyUserSignatures = _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.log.deprecate({\n  pkg: \"FCL\",\n  subject: \"fcl.verifyUserSignatures()\",\n  message: \"Please use fcl.AppUtils.verifyUserSignatures()\",\n  callback: function verifyUserSignatures(message, compSigs) {\n    return verifyUserSignatures$1(message, compSigs);\n  }\n});\n\nconst serialize = async function () {\n  let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const resolveFunction = await _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config.first([\"sdk.resolve\"], opts.resolve || _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.resolve);\n  if (Array.isArray(args)) args = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.pipe)((0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.interaction)(), args);\n  return JSON.stringify((0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.createSignableVoucher)(await resolveFunction(args)), null, 2);\n};\n\nasync function configLens(regex) {\n  return Object.fromEntries(Object.entries(await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_4__.config)().where(regex)).map(_ref => {\n    let [key, value] = _ref;\n    return [key.replace(regex, \"\"), value];\n  }));\n}\n\n/**\n * @typedef {import(\"@onflow/typedefs\").Transaction} Transaction\n */\n\n/**\n * @typedef {import(\"@onflow/typedefs\").TransactionStatus} TransactionStatus\n */\n\nconst RATE$1 = 2500;\nconst POLL = \"POLL\";\nconst fetchTxStatus = async transactionId => {\n  return (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send)([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getTransactionStatus)(transactionId)]).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n};\nconst isExpired = tx => tx.status === 5;\nconst isSealed = tx => tx.status >= 4;\nconst isExecuted = tx => tx.status >= 3;\nconst isFinalized = tx => tx.status >= 2;\nconst isPending = tx => tx.status >= 1;\nconst isUnknown = tx => tx.status >= 0;\nconst isDiff = (cur, next) => {\n  return JSON.stringify(cur) !== JSON.stringify(next);\n};\nconst HANDLERS$3 = {\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.INIT]: async ctx => {\n    ctx.sendSelf(POLL);\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, _onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.UPDATED, ctx.all());\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.SNAPSHOT]: async (ctx, letter) => {\n    letter.reply(ctx.all());\n  },\n  [POLL]: async ctx => {\n    let tx;\n    try {\n      tx = await fetchTxStatus(ctx.self());\n    } catch (e) {\n      return ctx.fatalError(e);\n    }\n    if (!isSealed(tx)) setTimeout(() => ctx.sendSelf(POLL), RATE$1);\n    if (isDiff(ctx.all(), tx)) ctx.broadcast(_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.UPDATED, tx);\n    ctx.merge(tx);\n  }\n};\nconst scoped = transactionId => {\n  if (typeof transactionId === \"object\") transactionId = transactionId.transactionId;\n  if (transactionId == null) throw new Error(\"transactionId required\");\n  return transactionId;\n};\nconst spawnTransaction = transactionId => {\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.spawn)(HANDLERS$3, scoped(transactionId));\n};\n\n/**\n * @callback SubscriptionCallback\n * @param {TransactionStatus} txStatus\n * @returns {void}\n */\n\n/**\n * Provides methods for interacting with a transaction\n * \n * @param {string} transactionId - The transaction ID\n * @returns {{\n *    snapshot: function(): Promise<TransactionStatus>,\n *    subscribe: function(SubscriptionCallback): function(): void,\n *    onceFinalized: function(): Promise<TransactionStatus>,\n *    onceExecuted: function(): Promise<TransactionStatus>,\n *    onceSealed: function(): Promise<TransactionStatus>\n * }}\n */\nfunction transaction(transactionId) {\n  function snapshot() {\n    return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.snapshoter)(transactionId, spawnTransaction);\n  }\n  function subscribe(callback) {\n    return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.subscriber)(scoped(transactionId), spawnTransaction, callback);\n  }\n  function once(predicate) {\n    return function innerOnce() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const suppress = opts.suppress || false;\n      return new Promise((resolve, reject) => {\n        const unsub = subscribe((txStatus, error) => {\n          if ((error || txStatus.statusCode) && !suppress) {\n            reject(error || txStatus.errorMessage);\n            unsub();\n          } else if (predicate(txStatus)) {\n            resolve(txStatus);\n            unsub();\n          }\n        });\n      });\n    };\n  }\n  return {\n    snapshot,\n    subscribe,\n    onceFinalized: once(isFinalized),\n    onceExecuted: once(isExecuted),\n    onceSealed: once(isSealed)\n  };\n}\ntransaction.isUnknown = isUnknown;\ntransaction.isPending = isPending;\ntransaction.isFinalized = isFinalized;\ntransaction.isExecuted = isExecuted;\ntransaction.isSealed = isSealed;\ntransaction.isExpired = isExpired;\n\nconst RATE = 10000;\nconst UPDATED$1 = \"UPDATED\";\nconst TICK = \"TICK\";\nconst HIGH_WATER_MARK = \"hwm\";\nconst scheduleTick = async ctx => {\n  return setTimeout(() => ctx.sendSelf(TICK), await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config)().get(\"fcl.eventPollRate\", RATE));\n};\nconst HANDLERS$2 = {\n  [TICK]: async ctx => {\n    if (!ctx.hasSubs()) return;\n    let hwm = ctx.get(HIGH_WATER_MARK);\n    if (hwm == null) {\n      ctx.put(HIGH_WATER_MARK, await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block)());\n      ctx.put(TICK, await scheduleTick(ctx));\n    } else {\n      let next = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block)();\n      ctx.put(HIGH_WATER_MARK, next);\n      if (hwm.height < next.height) {\n        const data = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send)([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getEventsAtBlockHeightRange)(ctx.self(), hwm.height + 1, next.height)]).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n        for (let d of data) ctx.broadcast(UPDATED$1, d.data);\n      }\n      ctx.put(TICK, await scheduleTick(ctx));\n    }\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.SUBSCRIBE]: async (ctx, letter) => {\n    if (!ctx.hasSubs()) {\n      ctx.put(TICK, await scheduleTick(ctx));\n    }\n    ctx.subscribe(letter.from);\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n    if (!ctx.hasSubs()) {\n      clearTimeout(ctx.get(TICK));\n      ctx.delete(TICK);\n      ctx.delete(HIGH_WATER_MARK);\n    }\n  }\n};\nconst spawnEvents = key => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.spawn)(HANDLERS$2, key);\n\n/**\n * @typedef {import(\"@onflow/typedefs\").Event} Event\n */\n\n/**\n * @typedef {object} SubscribeObject\n * @property {Function} subscribe - The subscribe function.\n */\n\n/**\n * @callback SubscriptionCallback\n * @returns {Event}\n */\n\n/**\n * @description - Subscribe to events\n * @param {string} key - A valid event name\n * @returns {SubscribeObject}\n * \n * @example\n * import * as fcl from \"@onflow/fcl\"\n * fcl.events(eventName).subscribe((event) => console.log(event))\n */\nfunction events(key) {\n  return {\n    /**\n     * @description - Subscribe to events\n     * @param {Function} callback - The callback function\n     * @returns {SubscriptionCallback}\n     */\n    subscribe: callback => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.subscriber)(key, spawnEvents, callback)\n  };\n}\n\nconst stub = () => {\n  throw new Error(`Platform specific Core Strategies are not initialized`);\n};\nconst stubCoreStrategies = {\n  [CORE_STRATEGIES[\"EXT/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"HTTP/POST\"]]: stub,\n  [CORE_STRATEGIES[\"IFRAME/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"POP/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"TAB/RPC\"]]: stub,\n  [CORE_STRATEGIES[\"EXT/RPC\"]]: stub\n};\nconst supportedPlugins = [\"ServicePlugin\"];\nconst supportedServicePlugins = [\"discovery-service\"];\nconst validateDiscoveryPlugin = servicePlugin => {\n  const {\n    services,\n    serviceStrategy\n  } = servicePlugin;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Array.isArray(services) && services.length, \"Array of Discovery Services is required\");\n  for (const ds of services) {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(ds.f_type) && ds.f_type === \"Service\", \"Service is required\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(ds.type) && ds.type === \"authn\", `Service must be type authn. Received ${ds.type}`);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(ds.method in CORE_STRATEGIES || serviceStrategy.method === ds.method, `Service method ${ds.method} is not supported`);\n  }\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(serviceStrategy), \"Service strategy is required\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(serviceStrategy.method) && isString(serviceStrategy.method), \"Service strategy method is required\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(serviceStrategy.exec) && isFunc(serviceStrategy.exec), \"Service strategy exec function is required\");\n  return {\n    discoveryServices: services,\n    serviceStrategy\n  };\n};\nconst ServiceRegistry = _ref => {\n  let {\n    coreStrategies\n  } = _ref;\n  let services = new Set();\n  let strategies = new Map(Object.entries(coreStrategies));\n  const add = servicePlugin => {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(supportedServicePlugins.includes(servicePlugin.type), `Service Plugin type ${servicePlugin.type} is not supported`);\n    if (servicePlugin.type === \"discovery-service\") {\n      const {\n        discoveryServices,\n        serviceStrategy\n      } = validateDiscoveryPlugin(servicePlugin);\n      setServices(discoveryServices);\n      if (!strategies.has(serviceStrategy.method)) {\n        strategies.set(serviceStrategy.method, serviceStrategy.exec);\n      } else {\n        (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.log)({\n          title: `Add Service Plugin`,\n          message: `Service strategy for ${serviceStrategy.method} already exists`,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.LEVELS.warn\n        });\n      }\n    }\n  };\n  const setServices = discoveryServices => services = new Set([...discoveryServices]);\n  const getServices = () => [...services];\n  const getStrategy = method => strategies.get(method);\n  const getStrategies = () => [...strategies.keys()];\n  return Object.freeze({\n    add,\n    getServices,\n    getStrategy,\n    getStrategies\n  });\n};\nconst validatePlugins = plugins => {\n  let pluginsArray;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(plugins, \"No plugins supplied\");\n  if (!Array.isArray(plugins)) {\n    pluginsArray = [plugins];\n  } else {\n    pluginsArray = [...plugins];\n  }\n  for (const p of pluginsArray) {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(p.name), \"Plugin name is required\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(isRequired(p.f_type), \"Plugin f_type is required\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(supportedPlugins.includes(p.f_type), `Plugin type ${p.f_type} is not supported`);\n  }\n  return pluginsArray;\n};\nconst PluginRegistry = () => {\n  const pluginsMap = new Map();\n  const getPlugins = () => pluginsMap;\n  const add = plugins => {\n    const pluginsArray = validatePlugins(plugins);\n    for (const p of pluginsArray) {\n      pluginsMap.set(p.name, p);\n      if (p.f_type === \"ServicePlugin\") {\n        serviceRegistry.add(p);\n      }\n    }\n  };\n  return Object.freeze({\n    add,\n    getPlugins\n  });\n};\nlet serviceRegistry;\nconst getIsServiceRegistryInitialized = () => typeof serviceRegistry !== 'undefined';\nconst initServiceRegistry = _ref2 => {\n  let {\n    coreStrategies\n  } = _ref2;\n  if (getIsServiceRegistryInitialized()) {\n    return serviceRegistry;\n  }\n  const _serviceRegistry = ServiceRegistry({\n    coreStrategies\n  });\n  serviceRegistry = _serviceRegistry;\n  return _serviceRegistry;\n};\nconst getServiceRegistry = () => {\n  if (!getIsServiceRegistryInitialized()) {\n    console.warn(\"Registry is not initalized, it will be initialized with stub core strategies\");\n    return initServiceRegistry({\n      coreStrategies: stubCoreStrategies\n    });\n  }\n  return serviceRegistry;\n};\nconst pluginRegistry = PluginRegistry();\n\nconst makeDiscoveryServices = async () => {\n  const extensionServices = window?.fcl_extensions || [];\n  return [...extensionServices, ...getServiceRegistry().getServices()];\n};\nasync function getDiscoveryService(service) {\n  const discoveryAuthnInclude = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"discovery.authn.include\", []);\n  const discoveryWalletMethod = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.first([\"discovery.wallet.method\", \"discovery.wallet.method.default\"]);\n  const method = service?.method ? service.method : discoveryWalletMethod;\n  const endpoint = service?.endpoint ?? (await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.first([\"discovery.wallet\", \"challenge.handshake\"]));\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(endpoint, `\n    If no service is passed to \"authenticate,\" then \"discovery.wallet\" must be defined in fcl config.\n    See: \"https://docs.onflow.org/fcl/reference/api/#setting-configuration-values\"\n    `);\n  return {\n    ...service,\n    type: \"authn\",\n    endpoint,\n    method,\n    discoveryAuthnInclude\n  };\n}\n\n// This is a workaround for an ongoing issue with URL in React Native\nconst _URL = globalThis.URL;\nclass URL$1 extends _URL {\n  constructor(url, base) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    super(url, base, ...args);\n\n    // Extra check if in React Native\n    {\n      return;\n    }\n  }\n}\n\nasync function getServices(_ref) {\n  let {\n    types\n  } = _ref;\n  const endpoint = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"discovery.authn.endpoint\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(Boolean(endpoint), `\"discovery.authn.endpoint\" in config must be defined.`);\n  const include = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"discovery.authn.include\", []);\n  const url = new URL$1(endpoint);\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      type: types,\n      fclVersion: VERSION,\n      include,\n      clientServices: await makeDiscoveryServices(),\n      supportedStrategies: getServiceRegistry().getStrategies(),\n      userAgent: window?.navigator?.userAgent,\n      network: await getChainId()\n    })\n  }).then(d => d.json());\n}\n\nconst SERVICE_ACTOR_KEYS = {\n  AUTHN: \"authn\",\n  RESULTS: \"results\",\n  SNAPSHOT: \"SNAPSHOT\",\n  UPDATED: \"UPDATED\",\n  UPDATE_RESULTS: \"UPDATE_RESULTS\"\n};\nconst warn = (fact, msg) => {\n  if (fact) {\n    console.warn(`\n      %cFCL Warning\n      ============================\n      ${msg}\n      For more info, please see the docs: https://docs.onflow.org/fcl/\n      ============================\n      `, \"font-weight:bold;font-family:monospace;\");\n  }\n};\nconst fetchServicesFromDiscovery = async () => {\n  try {\n    const services = await getServices({\n      types: [SERVICE_ACTOR_KEYS.AUTHN]\n    });\n    (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.send)(SERVICE_ACTOR_KEYS.AUTHN, SERVICE_ACTOR_KEYS.UPDATE_RESULTS, {\n      results: services\n    });\n  } catch (error) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.log)({\n      title: `${error.name} Error fetching Discovery API services.`,\n      message: error.message,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.LEVELS.error\n    });\n  }\n};\nconst HANDLERS$1 = {\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.INIT]: async ctx => {\n    warn(typeof window === \"undefined\", '\"fcl.discovery\" is only available in the browser.');\n    // If you call this before the window is loaded extensions will not be set yet\n    if (document.readyState === 'complete') {\n      fetchServicesFromDiscovery();\n    } else {\n      window.onload = async () => {\n        fetchServicesFromDiscovery();\n      };\n    }\n  },\n  [SERVICE_ACTOR_KEYS.UPDATE_RESULTS]: (ctx, _letter, data) => {\n    ctx.merge(data);\n    ctx.broadcast(SERVICE_ACTOR_KEYS.UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, SERVICE_ACTOR_KEYS.UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.UNSUBSCRIBE]: (ctx, letter) => ctx.unsubscribe(letter.from),\n  [SERVICE_ACTOR_KEYS.SNAPSHOT]: async (ctx, letter) => letter.reply({\n    ...ctx.all()\n  })\n};\nconst spawnProviders = () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.spawn)(HANDLERS$1, SERVICE_ACTOR_KEYS.AUTHN);\n\n/**\n * @typedef {import(\"@onflow/typedefs\").Service} Service\n */\n\n/**\n * @callback SubscriptionCallback\n * @returns {Service[]}\n */\n\n/**\n * @description\n * Discovery methods for interacting with Authn.\n * \n * @typedef {object} Authn\n * @property {Function} subscribe - Subscribe to Discovery authn services\n * @property {Function} snapshot - Get the current Discovery authn services spanshot\n * @property {Function} update - Trigger an update of authn services\n */\nconst authn = {\n  /**\n   * @description - Subscribe to Discovery authn services\n   * @param {Function} cb\n   * @returns {SubscriptionCallback}\n   */\n  subscribe: cb => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.subscriber)(SERVICE_ACTOR_KEYS.AUTHN, spawnProviders, cb),\n  /**\n   * @description - Get the current Discovery authn services spanshot\n   * @returns {Service[]}\n   */\n  snapshot: () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.snapshoter)(SERVICE_ACTOR_KEYS.AUTHN, spawnProviders),\n  /**\n   * @description - Trigger an update of authn services\n   * @returns {void}\n   */\n  update: () => fetchServicesFromDiscovery()\n};\n\nconst discovery = {\n  authn\n};\n\nvar sha3 = {};\n\nvar sponge = {};\n\nvar permute = {};\n\nvar chi = {};\n\nvar copy = function copy(I, i) {\n  return function (O, o) {\n    var oi = o * 2;\n    var ii = i * 2;\n    O[oi] = I[ii];\n    O[oi + 1] = I[ii + 1];\n  };\n};\nvar copy_1 = copy;\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n  var _copy = _interopRequireDefault(copy_1);\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      \"default\": obj\n    };\n  }\n  var chi = function chi(_ref) {\n    var A = _ref.A,\n      C = _ref.C;\n    for (var y = 0; y < 25; y += 5) {\n      for (var x = 0; x < 5; x++) {\n        (0, _copy[\"default\"])(A, y + x)(C, x);\n      }\n      for (var _x = 0; _x < 5; _x++) {\n        var xy = (y + _x) * 2;\n        var x1 = (_x + 1) % 5 * 2;\n        var x2 = (_x + 2) % 5 * 2;\n        A[xy] ^= ~C[x1] & C[x2];\n        A[xy + 1] ^= ~C[x1 + 1] & C[x2 + 1];\n      }\n    }\n  };\n  var _default = chi;\n  exports[\"default\"] = _default;\n})(chi);\n\nvar iota = {};\n\nvar roundConstants = {};\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n  var ROUND_CONSTANTS = new Uint32Array([0, 1, 0, 32898, 2147483648, 32906, 2147483648, 2147516416, 0, 32907, 0, 2147483649, 2147483648, 2147516545, 2147483648, 32777, 0, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 2147483648, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 0, 32778, 2147483648, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 0, 2147483649, 2147483648, 2147516424]);\n  var _default = ROUND_CONSTANTS;\n  exports[\"default\"] = _default;\n})(roundConstants);\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n  var _roundConstants = _interopRequireDefault(roundConstants);\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      \"default\": obj\n    };\n  }\n  var iota = function iota(_ref) {\n    var A = _ref.A,\n      roundIndex = _ref.roundIndex;\n    var i = roundIndex * 2;\n    A[0] ^= _roundConstants[\"default\"][i];\n    A[1] ^= _roundConstants[\"default\"][i + 1];\n  };\n  var _default = iota;\n  exports[\"default\"] = _default;\n})(iota);\n\nvar rhoPi = {};\n\nvar piShuffles = {};\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n  var PI_SHUFFLES = [10, 7, 11, 17, 18, 3, 5, 16, 8, 21, 24, 4, 15, 23, 19, 13, 12, 2, 20, 14, 22, 9, 6, 1];\n  var _default = PI_SHUFFLES;\n  exports[\"default\"] = _default;\n})(piShuffles);\n\nvar rhoOffsets = {};\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n  var RHO_OFFSETS = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 2, 14, 27, 41, 56, 8, 25, 43, 62, 18, 39, 61, 20, 44];\n  var _default = RHO_OFFSETS;\n  exports[\"default\"] = _default;\n})(rhoOffsets);\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n  var _piShuffles = _interopRequireDefault(piShuffles);\n  var _rhoOffsets = _interopRequireDefault(rhoOffsets);\n  var _copy = _interopRequireDefault(copy_1);\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      \"default\": obj\n    };\n  }\n  var rhoPi = function rhoPi(_ref) {\n    var A = _ref.A,\n      C = _ref.C,\n      W = _ref.W;\n    (0, _copy[\"default\"])(A, 1)(W, 0);\n    var H = 0;\n    var L = 0;\n    var Wi = 0;\n    var ri = 32;\n    for (var i = 0; i < 24; i++) {\n      var j = _piShuffles[\"default\"][i];\n      var r = _rhoOffsets[\"default\"][i];\n      (0, _copy[\"default\"])(A, j)(C, 0);\n      H = W[0];\n      L = W[1];\n      ri = 32 - r;\n      Wi = r < 32 ? 0 : 1;\n      W[Wi] = H << r | L >>> ri;\n      W[(Wi + 1) % 2] = L << r | H >>> ri;\n      (0, _copy[\"default\"])(W, 0)(A, j);\n      (0, _copy[\"default\"])(C, 0)(W, 0);\n    }\n  };\n  var _default = rhoPi;\n  exports[\"default\"] = _default;\n})(rhoPi);\n\nvar theta = {};\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n  var _copy = _interopRequireDefault(copy_1);\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      \"default\": obj\n    };\n  }\n  var theta = function theta(_ref) {\n    var A = _ref.A,\n      C = _ref.C,\n      D = _ref.D,\n      W = _ref.W;\n    var H = 0;\n    var L = 0;\n    for (var x = 0; x < 5; x++) {\n      var x20 = x * 2;\n      var x21 = (x + 5) * 2;\n      var x22 = (x + 10) * 2;\n      var x23 = (x + 15) * 2;\n      var x24 = (x + 20) * 2;\n      C[x20] = A[x20] ^ A[x21] ^ A[x22] ^ A[x23] ^ A[x24];\n      C[x20 + 1] = A[x20 + 1] ^ A[x21 + 1] ^ A[x22 + 1] ^ A[x23 + 1] ^ A[x24 + 1];\n    }\n    for (var _x = 0; _x < 5; _x++) {\n      (0, _copy[\"default\"])(C, (_x + 1) % 5)(W, 0);\n      H = W[0];\n      L = W[1];\n      W[0] = H << 1 | L >>> 31;\n      W[1] = L << 1 | H >>> 31;\n      D[_x * 2] = C[(_x + 4) % 5 * 2] ^ W[0];\n      D[_x * 2 + 1] = C[(_x + 4) % 5 * 2 + 1] ^ W[1];\n      for (var y = 0; y < 25; y += 5) {\n        A[(y + _x) * 2] ^= D[_x * 2];\n        A[(y + _x) * 2 + 1] ^= D[_x * 2 + 1];\n      }\n    }\n  };\n  var _default = theta;\n  exports[\"default\"] = _default;\n})(theta);\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n  var _chi = _interopRequireDefault(chi);\n  var _iota = _interopRequireDefault(iota);\n  var _rhoPi = _interopRequireDefault(rhoPi);\n  var _theta = _interopRequireDefault(theta);\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      \"default\": obj\n    };\n  }\n  var permute = function permute() {\n    var C = new Uint32Array(10);\n    var D = new Uint32Array(10);\n    var W = new Uint32Array(2);\n    return function (A) {\n      for (var roundIndex = 0; roundIndex < 24; roundIndex++) {\n        (0, _theta[\"default\"])({\n          A: A,\n          C: C,\n          D: D,\n          W: W\n        });\n        (0, _rhoPi[\"default\"])({\n          A: A,\n          C: C,\n          W: W\n        });\n        (0, _chi[\"default\"])({\n          A: A,\n          C: C\n        });\n        (0, _iota[\"default\"])({\n          A: A,\n          roundIndex: roundIndex\n        });\n      }\n      C.fill(0);\n      D.fill(0);\n      W.fill(0);\n    };\n  };\n  var _default = permute;\n  exports[\"default\"] = _default;\n})(permute);\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = void 0;\n  var _buffer = buffer__WEBPACK_IMPORTED_MODULE_9__;\n  var _permute = _interopRequireDefault(permute);\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      \"default\": obj\n    };\n  }\n  var xorWords = function xorWords(I, O) {\n    for (var i = 0; i < I.length; i += 8) {\n      var o = i / 4;\n      O[o] ^= I[i + 7] << 24 | I[i + 6] << 16 | I[i + 5] << 8 | I[i + 4];\n      O[o + 1] ^= I[i + 3] << 24 | I[i + 2] << 16 | I[i + 1] << 8 | I[i];\n    }\n    return O;\n  };\n  var readWords = function readWords(I, O) {\n    for (var o = 0; o < O.length; o += 8) {\n      var i = o / 4;\n      O[o] = I[i + 1];\n      O[o + 1] = I[i + 1] >>> 8;\n      O[o + 2] = I[i + 1] >>> 16;\n      O[o + 3] = I[i + 1] >>> 24;\n      O[o + 4] = I[i];\n      O[o + 5] = I[i] >>> 8;\n      O[o + 6] = I[i] >>> 16;\n      O[o + 7] = I[i] >>> 24;\n    }\n    return O;\n  };\n  var Sponge = function Sponge(_ref) {\n    var _this = this;\n    var capacity = _ref.capacity,\n      padding = _ref.padding;\n    var keccak = (0, _permute[\"default\"])();\n    var stateSize = 200;\n    var blockSize = capacity / 8;\n    var queueSize = stateSize - capacity / 4;\n    var queueOffset = 0;\n    var state = new Uint32Array(stateSize / 4);\n    var queue = _buffer.Buffer.allocUnsafe(queueSize);\n    this.absorb = function (buffer) {\n      for (var i = 0; i < buffer.length; i++) {\n        queue[queueOffset] = buffer[i];\n        queueOffset += 1;\n        if (queueOffset >= queueSize) {\n          xorWords(queue, state);\n          keccak(state);\n          queueOffset = 0;\n        }\n      }\n      return _this;\n    };\n    this.squeeze = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var output = {\n        buffer: options.buffer || _buffer.Buffer.allocUnsafe(blockSize),\n        padding: options.padding || padding,\n        queue: _buffer.Buffer.allocUnsafe(queue.length),\n        state: new Uint32Array(state.length)\n      };\n      queue.copy(output.queue);\n      for (var i = 0; i < state.length; i++) {\n        output.state[i] = state[i];\n      }\n      output.queue.fill(0, queueOffset);\n      output.queue[queueOffset] |= output.padding;\n      output.queue[queueSize - 1] |= 128;\n      xorWords(output.queue, output.state);\n      for (var offset = 0; offset < output.buffer.length; offset += queueSize) {\n        keccak(output.state);\n        readWords(output.state, output.buffer.slice(offset, offset + queueSize));\n      }\n      return output.buffer;\n    };\n    this.reset = function () {\n      queue.fill(0);\n      state.fill(0);\n      queueOffset = 0;\n      return _this;\n    };\n    return this;\n  };\n  var _default = Sponge;\n  exports[\"default\"] = _default;\n})(sponge);\n\n(function (exports) {\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports[\"default\"] = exports.SHAKE = exports.SHA3Hash = exports.SHA3 = exports.Keccak = void 0;\n  var _buffer = buffer__WEBPACK_IMPORTED_MODULE_9__;\n  var _sponge = _interopRequireDefault(sponge);\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      \"default\": obj\n    };\n  }\n  var createHash = function createHash(_ref) {\n    var allowedSizes = _ref.allowedSizes,\n      defaultSize = _ref.defaultSize,\n      padding = _ref.padding;\n    return function Hash() {\n      var _this = this;\n      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;\n      if (!this || this.constructor !== Hash) {\n        return new Hash(size);\n      }\n      if (allowedSizes && !allowedSizes.includes(size)) {\n        throw new Error(\"Unsupported hash length\");\n      }\n      var sponge = new _sponge[\"default\"]({\n        capacity: size\n      });\n      this.update = function (input) {\n        var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"utf8\";\n        if (_buffer.Buffer.isBuffer(input)) {\n          sponge.absorb(input);\n          return _this;\n        }\n        if (typeof input === \"string\") {\n          return _this.update(_buffer.Buffer.from(input, encoding));\n        }\n        throw new TypeError(\"Not a string or buffer\");\n      };\n      this.digest = function () {\n        var formatOrOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"binary\";\n        var options = typeof formatOrOptions === \"string\" ? {\n          format: formatOrOptions\n        } : formatOrOptions;\n        var buffer = sponge.squeeze({\n          buffer: options.buffer,\n          padding: options.padding || padding\n        });\n        if (options.format && options.format !== \"binary\") {\n          return buffer.toString(options.format);\n        }\n        return buffer;\n      };\n      this.reset = function () {\n        sponge.reset();\n        return _this;\n      };\n      return this;\n    };\n  };\n  var Keccak = createHash({\n    allowedSizes: [224, 256, 384, 512],\n    defaultSize: 512,\n    padding: 1\n  });\n  exports.Keccak = Keccak;\n  var SHA3 = createHash({\n    allowedSizes: [224, 256, 384, 512],\n    defaultSize: 512,\n    padding: 6\n  });\n  exports.SHA3 = SHA3;\n  var SHAKE = createHash({\n    allowedSizes: [128, 256],\n    defaultSize: 256,\n    padding: 31\n  });\n  exports.SHAKE = SHAKE;\n  var SHA3Hash = Keccak;\n  exports.SHA3Hash = SHA3Hash;\n  SHA3.SHA3Hash = SHA3Hash;\n  var _default = SHA3;\n  exports[\"default\"] = _default;\n})(sha3);\n\nasync function genHash(utf8String) {\n  const sha = new sha3.SHA3(256);\n  sha.update(_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.Buffer.from(utf8String, \"utf8\"));\n  return sha.digest(\"hex\");\n}\n\n/**\n * @description Generates Interaction Template ID for a given Interaction Template\n *  \n * @param {object} params\n * @param {object} params.template - Interaction Template\n * @returns {Promise<string>} - Interaction Template ID\n */\nasync function generateTemplateId(_ref) {\n  let {\n    template\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"generateTemplateId({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template === \"object\", \"generateTemplateId({ template }) -- template must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template.f_type === \"InteractionTemplate\", \"generateTemplateId({ template }) -- template object must be an InteractionTemplate\");\n  template = normalizeInteractionTemplate(template);\n  switch (template.f_version) {\n    case \"1.0.0\":\n      const templateData = template.data;\n      const messages = await Promise.all(Object.keys(templateData.messages).map(async messageKey => [await genHash(messageKey), await Promise.all(Object.keys(templateData.messages?.[messageKey]?.i18n).map(async i18nkeylanguage => [await genHash(i18nkeylanguage), await genHash(templateData.messages?.[messageKey]?.i18n?.[i18nkeylanguage])]))]));\n      const dependencies = await Promise.all(Object.keys(templateData?.dependencies).map(async dependencyAddressPlaceholder => [await genHash(dependencyAddressPlaceholder), await Promise.all(Object.keys(templateData?.dependencies?.[dependencyAddressPlaceholder]).map(async dependencyContract => [await genHash(dependencyContract), await Promise.all(Object.keys(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]).map(async dependencyContractNetwork => [await genHash(dependencyContractNetwork), [await genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].address), await genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].contract), await genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].fq_address), await genHash(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].pin), await genHash(String(templateData?.dependencies?.[dependencyAddressPlaceholder]?.[dependencyContract]?.[dependencyContractNetwork].pin_block_height))]]))]))]));\n      const _arguments = await Promise.all(Object.keys(templateData?.[\"arguments\"]).map(async argumentLabel => [await genHash(argumentLabel), [await genHash(String(templateData?.[\"arguments\"]?.[argumentLabel].index)), await genHash(templateData?.[\"arguments\"]?.[argumentLabel].type), await genHash(templateData?.[\"arguments\"]?.[argumentLabel].balance || \"\"), await Promise.all(Object.keys(templateData?.[\"arguments\"]?.[argumentLabel].messages).map(async argumentMessageKey => [await genHash(argumentMessageKey), await Promise.all(Object.keys(templateData?.[\"arguments\"]?.[argumentLabel].messages?.[argumentMessageKey].i18n).map(async i18nkeylanguage => [await genHash(i18nkeylanguage), await genHash(templateData?.[\"arguments\"]?.[argumentLabel].messages?.[argumentMessageKey].i18n?.[i18nkeylanguage])]))]))]]));\n      const encodedHex = (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([await genHash(\"InteractionTemplate\"), await genHash(\"1.0.0\"), await genHash(templateData?.type), await genHash(templateData?.interface), messages, await genHash(templateData?.cadence), dependencies, _arguments]).toString(\"hex\");\n      return genHash(encodedHex);\n    default:\n      throw new Error(\"generateTemplateId Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Returns whether a set of auditors have audited a given Interaction Template\n *\n * @param {object} params\n * @param {object} params.template - Interaction Template\n * @param {Array<string>} params.auditors - Array of auditors\n * @param {object} opts\n * @param {string} opts.flowInteractionAuditContract - Flow Interaction Template Audit contract address\n * @returns {Promise<object>} - Object of auditor addresses and audit status\n */\nasync function getInteractionTemplateAudits(_ref) {\n  let {\n    template,\n    auditors\n  } = _ref;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"getInteractionTemplateAudits({ template }) -- template must be defined\");\n  template = normalizeInteractionTemplate(template);\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template.f_type === \"InteractionTemplate\", \"getInteractionTemplateAudits({ template }) -- template must be an InteractionTemplate\");\n\n  // Recompute ID to be sure it matches\n  let recomputedTemplateID = await generateTemplateId({\n    template\n  });\n  if (recomputedTemplateID !== template.id) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.log)({\n      title: \"getInteractionTemplateAudits Debug Error\",\n      message: `Could not recompute and match template ID\n                computed: ${recomputedTemplateID}\n                template: ${template.id}\n            `,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.LEVELS.debug\n    });\n    throw new Error(\"getInteractionTemplateAudits Error: Could not recompute and match template ID\");\n  }\n  switch (template.f_version) {\n    case \"1.0.0\":\n      const _auditors = auditors || (await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config)().get(\"flow.auditors\"));\n      (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(_auditors, \"getInteractionTemplateAudits Error: Required configuration for 'fcl.auditors' is not set\");\n      (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(Array.isArray(_auditors), \"getInteractionTemplateAudits Error: Required configuration for 'fcl.auditors' is not an array\");\n      let FlowInteractionAuditContract = opts.flowInteractionAuditContract;\n      if (!FlowInteractionAuditContract) {\n        const fclNetwork = await getChainId(opts);\n        (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(fclNetwork === \"mainnet\" || fclNetwork === \"testnet\", \"getInteractionTemplateAudits Error: Unable to determine address for FlowInteractionTemplateAudit contract. Set configuration for 'fcl.network' to 'mainnet' or 'testnet'\");\n        if (fclNetwork === \"mainnet\") {\n          FlowInteractionAuditContract = \"0xfd100e39d50a13e6\";\n        } else {\n          FlowInteractionAuditContract = \"0xf78bfc12d0a786dc\";\n        }\n      }\n      const audits = await query({\n        cadence: `\n        import FlowInteractionTemplateAudit from ${FlowInteractionAuditContract}\n        pub fun main(templateId: String, auditors: [Address]): {Address:Bool} {\n          return FlowInteractionTemplateAudit.getHasTemplateBeenAuditedByAuditors(templateId: templateId, auditors: auditors)\n        }\n        `,\n        args: (arg, t) => [arg(recomputedTemplateID, t.String), arg(_auditors, t.Array(t.Address))]\n      });\n      return audits;\n    default:\n      throw new Error(\"getInteractionTemplateAudits Error: Unsupported template version\");\n  }\n}\n\nfunction generateImport(_ref) {\n  let {\n    contractName,\n    address\n  } = _ref;\n  return {\n    contractName,\n    address,\n    contract: \"\"\n  };\n}\n\nfunction findImports(cadence) {\n  let imports = [];\n  let importsReg = /import ((\\w|,| )+)* from 0x\\w+/g;\n  let fileImports = cadence.match(importsReg) || [];\n  for (const fileImport of fileImports) {\n    const importLineReg = /import ((\\w+|, |)*) from (0x\\w+)/g;\n    const importLine = importLineReg.exec(fileImport);\n    const contractsReg = /((?:\\w+)+),?/g;\n    const contracts = importLine[1].match(contractsReg) || [];\n    for (const contract of contracts) {\n      imports.push(generateImport({\n        address: importLine[3],\n        contractName: contract.replace(/,/g, \"\")\n      }));\n    }\n  }\n  return imports;\n}\n\n/**\n * @description Produces a dependency pin for a contract at a given block height\n * @param {object} params\n * @param {string} params.address - The address of the account containing the contract\n * @param {string} params.contractName - The name of the contract\n * @param {number} params.blockHeight - The block height to produce the dependency pin for\n * @param {object} opts - Options to pass to the interaction\n * @returns {Promise<string>} - The dependency pin\n */\nasync function generateDependencyPin(_ref) {\n  let {\n    address,\n    contractName,\n    blockHeight\n  } = _ref;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(address != undefined, \"generateDependencyPin({ address }) -- address must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(contractName != undefined, \"generateDependencyPin({ contractName }) -- contractName must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(blockHeight != undefined, \"generateDependencyPin({ blockHeight }) -- blockHeight must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof address === \"string\", \"generateDependencyPin({ address }) -- address must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof contractName === \"string\", \"generateDependencyPin({ contractName }) -- contractName must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof blockHeight === \"number\", \"generateDependencyPin({ blockHeight }) -- blockHeight must be a number\");\n  let horizon = [generateImport({\n    contractName,\n    address\n  })];\n  for (const horizonImport of horizon) {\n    let account = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send)([(0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.getAccount)(await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config)().get(horizonImport.address, horizonImport.address)), (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.atBlockHeight)(blockHeight)], opts).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode);\n    horizonImport.contract = account.contracts?.[horizonImport.contractName];\n    if (!horizonImport.contract) {\n      console.error(\"Did not find expected contract\", horizonImport, account);\n      throw new Error(\"Did not find expected contract\");\n    }\n    let contractImports = findImports(horizonImport.contract);\n    horizon.push(...contractImports);\n  }\n  let contractHashes = horizon.map(iport => genHash(iport.contract));\n  let contractHashesJoined = contractHashes.join(\"\");\n  return genHash(contractHashesJoined);\n}\n\n/**\n * @description Produces a dependency pin for a contract at latest sealed block\n * @param {object} params\n * @param {string} params.address - The address of the account containing the contract\n * @param {string} params.contractName - The name of the contract\n * @param {object} opts - Options to pass to the interaction\n * @returns {Promise<string>} - The dependency pin\n */\nasync function generateDependencyPinAtLatestSealedBlock(_ref2) {\n  let {\n    address,\n    contractName\n  } = _ref2;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let latestSealedBlock = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block)({\n    sealed: true\n  }, opts);\n  let latestSealedBlockHeight = latestSealedBlock?.height;\n  return generateDependencyPin({\n    address,\n    contractName,\n    blockHeight: latestSealedBlockHeight\n  }, opts);\n}\n\nfunction normalizeInteractionTemplateInterface(templateInterface) {\n  if (templateInterface == null) return null;\n  switch (templateInterface[\"f_version\"]) {\n    case \"1.0.0\":\n      return templateInterface;\n    default:\n      throw new Error(\"normalizeInteractionTemplateInterface Error: Invalid InteractionTemplateInterface\");\n  }\n}\n\n/**\n * @description Generates Interaction Template Interface ID for a given Interaction Template Interface\n * \n * @param {object} params\n * @param {object} params.templateInterface - Interaction Template Interface\n * @returns {Promise<string>} - Interaction Template Interface ID\n */\nasync function generateTemplateInterfaceId(_ref) {\n  let {\n    templateInterface\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(templateInterface != undefined, \"generateTemplateInterfaceId({ templateInterface }) -- templateInterface must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof templateInterface === \"object\", \"generateTemplateInterfaceId({ templateInterface }) -- templateInterface must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof templateInterface.f_type === \"InteractionTemplateInterface\", \"generateTemplateInterfaceId({ templateInterface }) -- templateInterface object must be an InteractionTemplate\");\n  templateInterface = normalizeInteractionTemplateInterface(templateInterface);\n  switch (templateInterface.f_version) {\n    case \"1.0.0\":\n      const interfaceData = templateInterface.data;\n      const encodedHex = (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode)([await genHash(\"InteractionTemplateInterface\"), await genHash(\"1.0.0\"), await genHash(interfaceData.flip), await Promise.all(Object.keys(interfaceData.arguments).map(async argumentLabel => [await genHash(argumentLabel), await genHash(String(interfaceData.arguments[argumentLabel].index)), await genHash(interfaceData.arguments[argumentLabel].type)]))]).toString(\"hex\");\n      return genHash(encodedHex);\n    default:\n      throw new Error(\"generateTemplateInterfaceId Error: Unsupported templateInterface version\");\n  }\n}\n\n/**\n * @description Checks if an Interaction Template's pins match those generated at a block height\n * \n * @param {object} params\n * @param {object} params.template - Interaction Template to check pins for\n * @param {number} params.blockHeight - Block height to check pins at\n * @param {string} params.network - Network to check pins on\n * @param {object} opts\n * @returns {Promise<boolean>} - Whether or not the pins match\n */\nasync function verifyDependencyPinsSame(_ref) {\n  let {\n    template,\n    blockHeight,\n    network\n  } = _ref;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"generateDependencyPin({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template === \"object\", \"generateDependencyPin({ template }) -- template must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template.f_type === \"InteractionTemplate\", \"generateDependencyPin({ template }) -- template must be an InteractionTemplate\");\n  template = normalizeInteractionTemplate(template);\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(network != undefined, \"generateDependencyPin({ network }) network must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(blockHeight != undefined, \"generateDependencyPin({ blockHeight }) blockHeight must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof blockHeight === \"number\", \"generateDependencyPin({ blockHeight }) blockHeight must be a number\");\n  switch (template.f_version) {\n    case \"1.0.0\":\n      let templateDependenciesPlaceholderKeys = Object.keys(template.data.dependencies);\n      for (let templateDependencyPlaceholderKey of templateDependenciesPlaceholderKeys) {\n        let templateDependencyPlaceholder = template.data.dependencies[templateDependencyPlaceholderKey];\n        let templateDependencyPlaceholderContractNames = Object.keys(templateDependencyPlaceholder);\n        for (let templateDependencyPlaceholderContractName of templateDependencyPlaceholderContractNames) {\n          let templateDependencyPlaceholderContractNetworks = template.data.dependencies[templateDependencyPlaceholderKey][templateDependencyPlaceholderContractName];\n          let templateDependency = templateDependencyPlaceholderContractNetworks[network];\n          if (typeof templateDependency === \"undefined\") continue;\n          let pin = await generateDependencyPin({\n            address: templateDependency.address,\n            contractName: templateDependency.contract,\n            blockHeight\n          }, opts);\n          if (pin !== templateDependency.pin) {\n            (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.log)({\n              title: \"verifyDependencyPinsSame Debug Error\",\n              message: `Could not recompute and match dependency pin.\n                                address: ${templateDependency.address} | contract: ${templateDependency.contract}\n                                computed: ${pin}\n                                template: ${templateDependency.pin}\n                            `,\n              level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.LEVELS.debug\n            });\n            return false;\n          }\n        }\n      }\n      return true;\n    default:\n      throw new Error(\"verifyDependencyPinsSame Error: Unsupported template version\");\n  }\n}\n\n/**\n * @description Checks if an Interaction Template's pins match those generated at the latest block height\n * \n * @param {object} params\n * @param {object} params.template - Interaction Template to check pins for\n * @param {string} params.network - Network to check pins on\n * @param {object} opts\n * @returns {Promise<boolean>} - Whether or not the pins match\n */\nasync function verifyDependencyPinsSameAtLatestSealedBlock(_ref2) {\n  let {\n    template,\n    network\n  } = _ref2;\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let latestSealedBlock = await (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.block)({\n    sealed: true\n  });\n  let latestSealedBlockHeight = latestSealedBlock?.height;\n  return verifyDependencyPinsSame({\n    template,\n    network,\n    blockHeight: latestSealedBlockHeight\n  }, opts);\n}\n\n/**\n * @description Get Interaction Template argument message\n * \n * @param {object} params\n * @param {string} params.localization [localization=\"en-US\"] - Localization code\n * @param {string} params.messageKey - Message key\n * @param {object} params.template - Interaction Template\n * @returns {string} - Message\n */\nfunction getTemplateMessage(_ref) {\n  let {\n    localization = \"en-US\",\n    messageKey,\n    template\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(messageKey, \"getTemplateMessage({ messageKey }) -- messageKey must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof messageKey === \"string\", \"getTemplateMessage({ messageKey }) -- messageKey must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(localization, \"getTemplateMessage({ localization }) -- localization must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof localization === \"string\", \"getTemplateMessage({ localization }) -- localization must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"getTemplateMessage({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template === \"object\", \"getTemplateMessage({ template }) -- template must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template.f_type === \"InteractionTemplate\", \"getTemplateMessage({ template }) -- template object must be an InteractionTemplate\");\n  const messages = template?.data?.messages;\n  return messages?.[messageKey]?.i18n?.[localization];\n}\n\n/**\n * @description Gets Interaction Template argument message by message key, argument label, and localization\n * \n * @param {object} opts\n * @param {string} opts.localization [localization=\"en-US\"] - Localization to get message for\n * @param {string} opts.argumentLabel - Argument label to get message for\n * @param {string} opts.messageKey - Message key to get message for\n * @param {object} opts.template - Interaction Template to get message from\n * @returns {string} - Message\n */\nfunction getTemplateArgumentMessage(_ref) {\n  let {\n    localization = \"en-US\",\n    argumentLabel,\n    messageKey,\n    template\n  } = _ref;\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(messageKey, \"getTemplateArgumentMessage({ messageKey }) -- messageKey must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof messageKey === \"string\", \"getTemplateArgumentMessage({ messageKey }) -- messageKey must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(argumentLabel, \"getTemplateArgumentMessage({ argumentLabel }) -- argumentLabel must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof messageKey === \"string\", \"getTemplateArgumentMessage({ argumentLabel }) -- argumentLabel must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(localization, \"getTemplateArgumentMessage({ localization }) -- localization must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof localization === \"string\", \"getTemplateArgumentMessage({ localization }) -- localization must be a string\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(template != undefined, \"getTemplateArgumentMessage({ template }) -- template must be defined\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template === \"object\", \"getTemplateArgumentMessage({ template }) -- template must be an object\");\n  (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof template.f_type === \"InteractionTemplate\", \"getTemplateArgumentMessage({ template }) -- template object must be an InteractionTemplate\");\n  const args = template?.data?.arguments;\n  return args?.[argumentLabel]?.messages?.[messageKey]?.i18n?.[localization];\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getInteractionTemplateAudits: getInteractionTemplateAudits,\n  generateDependencyPin: generateDependencyPin,\n  generateDependencyPinAtLatestSealedBlock: generateDependencyPinAtLatestSealedBlock,\n  generateTemplateId: generateTemplateId,\n  generateTemplateInterfaceId: generateTemplateInterfaceId,\n  verifyDependencyPinsSame: verifyDependencyPinsSame,\n  verifyDependencyPinsSameAtLatestSealedBlock: verifyDependencyPinsSameAtLatestSealedBlock,\n  deriveCadenceByNetwork: deriveCadenceByNetwork,\n  getTemplateMessage: getTemplateMessage,\n  getTemplateArgumentMessage: getTemplateArgumentMessage\n});\n\n/**\n * @type {Types}\n */\nconst t = _onflow_types__WEBPACK_IMPORTED_MODULE_1__;\n\n// Set chain id default on access node change\nwatchForChainIdChanges();\n\nasync function fetchServices(servicesURL, code) {\n  if (servicesURL == null || code == null) return [];\n  const url = new URL$1(servicesURL);\n  url.searchParams.append(\"code\", code);\n  const resp = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(d => d.json());\n  if (Array.isArray(resp)) return resp;\n\n  // Backwards compatibility for First-Gen Wallet Providers\n  const services = [];\n\n  // Convert authorizations into authz services\n  if (Array.isArray(resp.authorizations)) {\n    for (let service of resp.authorizations) {\n      services.push({\n        type: \"authz\",\n        keyId: resp.keyId,\n        ...service\n      });\n    }\n  }\n\n  // Convert Provider info into an authn service\n  if (resp.provider != null) {\n    services.push({\n      type: \"authn\",\n      id: \"wallet-provider#authn\",\n      ...resp.provider\n    });\n  }\n  return services;\n}\n\nfunction mergeServices() {\n  let sx1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let sx2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  // TODO: Make this smarter\n  return [...sx1, ...sx2];\n}\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authn\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"identity\": {\n//     \"address\": \"0x____\"\n//   },\n//   \"provider\": {\n//     \"address\": \"0x____\",\n//     \"name\": \"Best Wallet\",\n//     \"description\": \"The Best Wallet\"\n//     \"icon\": \"https://\",\n//   }\n// }\nfunction normalizeAuthn(service) {\n  if (service == null) return null;\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.authn,\n        id: service.pid,\n        provider: {\n          address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(service.addr),\n          name: service.name,\n          icon: service.icon\n        }\n      };\n  }\n}\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nfunction normalizeAuthz(service) {\n  if (service == null) return null;\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(service.addr),\n          keyId: service.keyId\n        },\n        params: service.params,\n        data: service.data\n      };\n  }\n}\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"pre-authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of pre-authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nfunction normalizePreAuthz(service) {\n  if (service == null) return null;\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(service.addr),\n          keyId: service.keyId\n        },\n        params: service.params,\n        data: service.data\n      };\n  }\n}\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"frame\",\n//    \"endpoint\": \"https://rawr\",\n//    \"data\": {},   // Sent to frame when ready\n//    \"params\": {}, // include in query params on frame\n// }\nfunction normalizeFrame(service) {\n  if (service == null) return null;\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return {\n        old: service,\n        ...SERVICE_PRAGMA,\n        type: \"frame\",\n        endpoint: service.endpoint,\n        params: service.params || {},\n        data: service.data || {}\n      };\n  }\n}\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"back-channel-rpc\",\n//    \"endpoint\": \"https://rawr\",\n//    \"method\": \"HTTP/GET\", // HTTP/GET | HTTP/POST\n//    \"data\": {},           // included in body of rpc\n//    \"params\": {},         // included as query params on endpoint url\n// }\nfunction normalizeBackChannelRpc(service) {\n  if (service == null) return null;\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: \"back-channel-rpc\",\n        endpoint: service.endpoint,\n        method: service.method,\n        params: service.params || {},\n        data: service.data || {}\n      };\n  }\n}\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"open-id\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"method: \"data\",\n//   \"data\": {\n//      \"profile\": {\n//        \"name\": \"Bob\",\n//        \"family_name\": \"Builder\",\n//        \"given_name\": \"Robert\",\n//        \"middle_name\": \"the\",\n//        \"nickname\": \"Bob the Builder\",\n//        \"perferred_username\": \"bob\",\n//        \"profile\": \"https://www.bobthebuilder.com/\",\n//        \"picture\": \"https://avatars.onflow.org/avatar/bob\",\n//        \"gender\": \"...\",\n//        \"birthday\": \"2001-01-18\",\n//        \"zoneinfo\": \"America/Vancouver\",\n//        \"locale\": \"en-us\",\n//        \"updated_at\": \"1614970797388\"\n//      },\n//      \"email\": {\n//        \"email\": \"bob@bob.bob\",\n//        \"email_verified\": true\n//      },\n//      \"address\": {\n//        \"address\": \"One Apple Park Way, Cupertino, CA 95014, USA\"\n//      },\n//      \"phone\": {\n//        \"phone_number\": \"+1 (xxx) yyy-zzzz\",\n//        \"phone_number_verified\": true\n//      },\n//      \"social\": {\n//        \"twitter\": \"@_qvvg\",\n//        \"twitter_verified\": true\n//      },\n//   }\n// }\nfunction normalizeOpenId(service) {\n  if (service == null) return null;\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      return null;\n  }\n}\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"user-signature\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"IFRAME/RPC\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"data\": {}, // included in body of user-signature request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nfunction normalizeUserSignature(service) {\n  if (service == null) return null;\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      throw new Error(\"Invalid user-signature service\");\n  }\n}\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    type: \"local-view\",\n//    method: \"VIEW/IFRAME\",\n//    endpoint: \"https://woot.org/authz/local\",\n//    data: {},\n//    params: {},\n// }\nfunction normalizeLocalView(resp) {\n  if (resp == null) return null;\n  if (resp.method == null) {\n    resp = {\n      ...resp,\n      type: \"local-view\",\n      method: \"VIEW/IFRAME\"\n    };\n  }\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp;\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: resp.type || \"local-view\",\n        method: resp.method,\n        endpoint: resp.endpoint,\n        data: resp.data || {},\n        params: resp.params || {}\n      };\n  }\n}\n\n// {\n//   \"f_type\": \"Service\",                    // Its a service!\n//   \"f_vsn\": \"1.0.0\",                       // Follows the v1.0.0 spec for the service\n//   \"type\": \"account-proof\",                // the type of service it is\n//   \"method\": \"DATA\",                       // Its data!\n//   \"uid\": \"awesome-wallet#account-proof\",  // A unique identifier for the service\n//   \"data\": {\n//     \"f_type\": \"account-proof\",\n//     \"f_vsn\": \"1.0.0\",\n//     \"nonce\": \"0A1BC2FF\",                  // Nonce signed by the current account-proof (minimum 32 bytes in total, i.e 64 hex characters)\n//     \"address\": \"0xUSER\",                  // The user's address (8 bytes, i.e 16 hex characters)\n//     \"signature\": CompositeSignature,      // address (sans-prefix), keyId, signature (hex)\n// }\n\nfunction normalizeAccountProof(service) {\n  if (service == null) return null;\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      throw new Error(`FCL Normalizer Error: Invalid account-proof service`);\n  }\n}\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authn-refresh\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\",  // \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"data\": {}, // included in body of request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nfunction normalizeAuthnRefresh(service) {\n  if (service == null) return null;\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service;\n    default:\n      throw new Error(\"Invalid authn-refresh service\");\n  }\n}\n\nconst serviceNormalizers = {\n  \"back-channel-rpc\": normalizeBackChannelRpc,\n  \"pre-authz\": normalizePreAuthz,\n  authz: normalizeAuthz,\n  authn: normalizeAuthn,\n  frame: normalizeFrame,\n  \"open-id\": normalizeOpenId,\n  \"user-signature\": normalizeUserSignature,\n  \"local-view\": normalizeLocalView,\n  \"account-proof\": normalizeAccountProof,\n  \"authn-refresh\": normalizeAuthnRefresh\n};\nfunction normalizeService(service, data) {\n  try {\n    var normalized = serviceNormalizers[service.type](service, data);\n    return normalized;\n  } catch (error) {\n    console.error(`Unrecognized FCL Service Type [${service.type}]`, service, error);\n    return service;\n  }\n}\n\nfunction deriveCompositeId(authn) {\n  return _onflow_rlp__WEBPACK_IMPORTED_MODULE_7__.encode([authn.provider.address || authn.provider.name || \"UNSPECIFIED\", authn.id]).toString(\"hex\");\n}\nfunction normalizeData(data) {\n  data.addr = data.addr ? (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(data.addr) : null;\n  data.paddr = data.paddr ? (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(data.paddr) : null;\n  return data;\n}\nfunction findService(type, services) {\n  return services.find(d => d.type === type);\n}\nasync function buildUser(data) {\n  data = normalizeData(data);\n  var services = mergeServices(data.services || [], await fetchServices(data.hks, data.code)).map(service => normalizeService(service, data));\n  const authn = findService(\"authn\", services);\n  return {\n    ...USER_PRAGMA,\n    addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(data.addr),\n    cid: deriveCompositeId(authn),\n    loggedIn: true,\n    services: services,\n    expiresAt: data.expires\n  };\n}\n\nfunction serviceOfType() {\n  let services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let type = arguments.length > 1 ? arguments[1] : undefined;\n  return services.find(service => service.type === type);\n}\n\nconst execStrategy = async _ref => {\n  let {\n    service,\n    body,\n    config,\n    opts\n  } = _ref;\n  const strategy = getServiceRegistry().getStrategy(service.method);\n  return strategy({\n    service,\n    body,\n    config,\n    opts\n  });\n};\nasync function execService(_ref2) {\n  let {\n    service,\n    msg = {},\n    config = {},\n    opts = {},\n    platform\n  } = _ref2;\n  msg.data = service.data;\n  const execConfig = {\n    services: await configLens(/^service\\./),\n    app: await configLens(/^app\\.detail\\./),\n    client: {\n      ...config.client,\n      platform,\n      fclVersion: VERSION,\n      fclLibrary: \"https://github.com/onflow/fcl-js\",\n      hostname: window?.location?.hostname ?? null,\n      network: await getChainId(opts)\n    }\n  };\n  try {\n    const res = await execStrategy({\n      service,\n      body: msg,\n      config: execConfig,\n      opts\n    });\n    if (res.status === \"REDIRECT\") {\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(service.type === res.data.type, \"Cannot shift recursive service type in execService\");\n      return await execService({\n        service: res.data,\n        msg,\n        config: execConfig,\n        opts\n      });\n    } else {\n      return res;\n    }\n  } catch (error) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.log)({\n      title: `Error on execService ${service?.type}`,\n      message: error,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.LEVELS.error\n    });\n    throw error;\n  }\n}\n\n// {\n//    \"f_type\": \"CompositeSignature\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"addr\": \"_____\",         // sans-prefix\n//    \"signature\": \"adfe1234\", // hex\n//    \"keyId\": 3,\n// }\nfunction normalizeCompositeSignature(resp) {\n  if (resp == null) return null;\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp;\n    default:\n      return {\n        ...COMPOSITE_SIGNATURE_PRAGMA,\n        addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(resp.addr || resp.address),\n        signature: resp.signature || resp.sig,\n        keyId: resp.keyId\n      };\n  }\n}\n\n/**\n * @typedef {import(\"@onflow/typedefs\").CurrentUser} CurrentUser\n * @typedef {import(\"@onflow/typedefs\").CompositeSignature} CompositeSignature\n */\n\nconst isFn = d => typeof d === \"function\";\nconst NAME = \"CURRENT_USER\";\nconst UPDATED = \"CURRENT_USER/UPDATED\";\nconst SNAPSHOT = \"SNAPSHOT\";\nconst SET_CURRENT_USER = \"SET_CURRENT_USER\";\nconst DEL_CURRENT_USER = \"DEL_CURRENT_USER\";\nconst DATA = `{\n  \"f_type\": \"User\",\n  \"f_vsn\": \"1.0.0\",\n  \"addr\":null,\n  \"cid\":null,\n  \"loggedIn\":null,\n  \"expiresAt\":null,\n  \"services\":[]\n}`;\nconst getStoredUser = async storage => {\n  const fallback = JSON.parse(DATA);\n  const stored = await storage.get(NAME);\n  if (stored != null && fallback[\"f_vsn\"] !== stored[\"f_vsn\"]) {\n    storage.removeItem(NAME);\n    return fallback;\n  }\n  return stored || fallback;\n};\nconst HANDLERS = {\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.INIT]: async ctx => {\n    if (typeof window === \"undefined\") {\n      console.warn(`\n        %cFCL Warning\n        ============================\n        \"currentUser\" is only available in the browser.\n        For more info, please see the docs: https://docs.onflow.org/fcl/\n        ============================\n        `, \"font-weight:bold;font-family:monospace;\");\n    }\n    ctx.merge(JSON.parse(DATA));\n    const storage = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.first([\"fcl.storage\", \"fcl.storage.default\"]);\n    if (storage.can) {\n      const user = await getStoredUser(storage);\n      if (notExpired(user)) ctx.merge(user);\n    }\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply({\n      ...ctx.all()\n    });\n  },\n  [SET_CURRENT_USER]: async (ctx, letter, data) => {\n    ctx.merge(data);\n    const storage = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.first([\"fcl.storage\", \"fcl.storage.default\"]);\n    if (storage.can) storage.put(NAME, ctx.all());\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [DEL_CURRENT_USER]: async (ctx, letter) => {\n    ctx.merge(JSON.parse(DATA));\n    const storage = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.first([\"fcl.storage\", \"fcl.storage.default\"]);\n    if (storage.can) storage.put(NAME, ctx.all());\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  }\n};\nconst spawnCurrentUser = () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.spawn)(HANDLERS, NAME);\nfunction notExpired(user) {\n  return user.expiresAt == null || user.expiresAt === 0 || user.expiresAt > Date.now();\n}\nasync function getAccountProofData() {\n  let accountProofDataResolver = await _onflow_config__WEBPACK_IMPORTED_MODULE_4__.config.get(\"fcl.accountProof.resolver\");\n  if (accountProofDataResolver == null) return;\n  if (!isFn(accountProofDataResolver)) {\n    (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.log)({\n      title: \"Account Proof Data Resolver must be a function\",\n      message: `Check fcl.accountProof.resolver configuration.\n                Expected: fcl.accountProof.resolver: async () => { ... }\n                Received: fcl.accountProof.resolver: ${typeof accountProofDataResolver}\n                `,\n      level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.LEVELS.warn\n    });\n    return;\n  }\n  const accountProofData = await accountProofDataResolver();\n  if (accountProofData == null) return;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(typeof accountProofData.appIdentifier === \"string\", \"appIdentifier must be a string\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(accountProofData.nonce), \"Nonce must be a hex string\");\n  return accountProofData;\n}\nconst makeConfig = async _ref => {\n  let {\n    discoveryAuthnInclude\n  } = _ref;\n  return {\n    client: {\n      discoveryAuthnInclude,\n      clientServices: await makeDiscoveryServices(),\n      supportedStrategies: getServiceRegistry().getStrategies()\n    }\n  };\n};\n\n/**\n * @description - Authenticate a user\n * @param {object} [opts] - Options\n * @param {object} [opts.platform] - platform that runs the function\n * @param {object} [opts.service] - Optional service to use for authentication\n * @param {boolean} [opts.redir=false] - Optional flag to allow window to stay open after authentication\n * @returns {Promise<CurrentUser>} - User object\n */\nconst getAuthenticate = _ref2 => {\n  let {\n    platform\n  } = _ref2;\n  return async function () {\n    let {\n      service,\n      redir = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (service && !service?.provider?.is_installed && service?.provider?.requires_install) {\n      window.location.href = service?.provider?.install_link;\n      return;\n    }\n    return new Promise(async (resolve, reject) => {\n      spawnCurrentUser();\n      const opts = {\n        redir\n      };\n      const user = await snapshot();\n      const discoveryService = await getDiscoveryService(service);\n      const refreshService = serviceOfType(user.services, \"authn-refresh\");\n      let accountProofData;\n      if (user.loggedIn) {\n        if (refreshService) {\n          try {\n            const response = await execService({\n              service: refreshService,\n              msg: accountProofData,\n              opts,\n              platform\n            });\n            (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.send)(NAME, SET_CURRENT_USER, await buildUser(response));\n          } catch (error) {\n            (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.log)({\n              title: `${error.name} Could not refresh wallet authentication.`,\n              message: error.message,\n              level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.LEVELS.error\n            });\n          } finally {\n            return resolve(await snapshot());\n          }\n        } else {\n          return resolve(user);\n        }\n      }\n      try {\n        accountProofData = await getAccountProofData();\n      } catch (error) {\n        (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.log)({\n          title: `${error.name} On Authentication: Could not resolve account proof data.`,\n          message: error.message,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.LEVELS.error\n        });\n        return reject(error);\n      }\n      try {\n        const response = await execService({\n          service: discoveryService,\n          msg: accountProofData,\n          config: await makeConfig(discoveryService),\n          opts,\n          platform\n        });\n        (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.send)(NAME, SET_CURRENT_USER, await buildUser(response));\n      } catch (error) {\n        (0,_onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.log)({\n          title: `${error} On Authentication`,\n          message: error,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_6__.LEVELS.error\n        });\n      } finally {\n        resolve(await snapshot());\n      }\n    });\n  };\n};\n\n/**\n * @description - Unauthenticate a user\n * @returns {void}\n */\nfunction unauthenticate$1() {\n  spawnCurrentUser();\n  (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.send)(NAME, DEL_CURRENT_USER);\n}\nconst normalizePreAuthzResponse = authz => ({\n  f_type: \"PreAuthzResponse\",\n  f_vsn: \"1.0.0\",\n  proposer: (authz || {}).proposer,\n  payer: (authz || {}).payer || [],\n  authorization: (authz || {}).authorization || []\n});\nconst getResolvePreAuthz = _ref3 => {\n  let {\n    platform\n  } = _ref3;\n  return authz => {\n    const resp = normalizePreAuthzResponse(authz);\n    const axs = [];\n    if (resp.proposer != null) axs.push([\"PROPOSER\", resp.proposer]);\n    for (let az of resp.payer || []) axs.push([\"PAYER\", az]);\n    for (let az of resp.authorization || []) axs.push([\"AUTHORIZER\", az]);\n    var result = axs.map(_ref4 => {\n      let [role, az] = _ref4;\n      return {\n        tempId: [az.identity.address, az.identity.keyId].join(\"|\"),\n        addr: az.identity.address,\n        keyId: az.identity.keyId,\n        signingFunction(signable) {\n          return execService({\n            service: az,\n            msg: signable,\n            platform\n          });\n        },\n        role: {\n          proposer: role === \"PROPOSER\",\n          payer: role === \"PAYER\",\n          authorizer: role === \"AUTHORIZER\"\n        }\n      };\n    });\n    return result;\n  };\n};\n\n/**\n * @description\n * Produces the needed authorization details for the current user to submit transactions to Flow\n * It defines a signing function that connects to a user's wallet provider to produce signatures to submit transactions.\n * \n * @param {object} ops - running options\n * @param {string} ops.platform - platform that runs the function\n * @param {object} account - Account object\n * @returns {Promise<object>} - Account object with signing function\n */\nconst getAuthorization = _ref5 => {\n  let {\n    platform\n  } = _ref5;\n  return async account => {\n    spawnCurrentUser();\n    return {\n      ...account,\n      tempId: \"CURRENT_USER\",\n      async resolve(account, preSignable) {\n        const user = await getAuthenticate({\n          platform\n        })({\n          redir: true\n        });\n        const authz = serviceOfType(user.services, \"authz\");\n        const preAuthz = serviceOfType(user.services, \"pre-authz\");\n        if (preAuthz) return getResolvePreAuthz({\n          platform\n        })(await execService({\n          service: preAuthz,\n          msg: preSignable,\n          platform\n        }));\n        if (authz) {\n          let windowRef;\n          if (isMobile() && authz.method === \"WC/RPC\") {\n            windowRef = window.open(\"\", \"_blank\");\n          }\n          return {\n            ...account,\n            tempId: \"CURRENT_USER\",\n            resolve: null,\n            addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(authz.identity.address),\n            keyId: authz.identity.keyId,\n            sequenceNum: null,\n            signature: null,\n            async signingFunction(signable) {\n              return normalizeCompositeSignature(await execService({\n                service: authz,\n                msg: signable,\n                opts: {\n                  includeOlderJsonRpcCall: true,\n                  windowRef\n                },\n                platform\n              }));\n            }\n          };\n        }\n        throw new Error(\"No Authz or PreAuthz Service configured for CURRENT_USER\");\n      }\n    };\n  };\n};\n\n/**\n * @description\n * The callback passed to subscribe will be called when the user authenticates and un-authenticates, making it easy to update the UI accordingly.\n * \n * @param {Function} callback - Callback function\n * @returns {Function} - Unsubscribe function\n */\nfunction subscribe(callback) {\n  spawnCurrentUser();\n  const EXIT = \"@EXIT\";\n  const self = (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.spawn)(async ctx => {\n    ctx.send(NAME, _onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.SUBSCRIBE);\n    while (1) {\n      const letter = await ctx.receive();\n      if (letter.tag === EXIT) {\n        ctx.send(NAME, _onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.UNSUBSCRIBE);\n        return;\n      }\n      callback(letter.data);\n    }\n  });\n  return () => (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.send)(self, EXIT);\n}\n\n/**\n * @description - Gets the current user\n * @returns {Promise<CurrentUser>} - User object\n */\nfunction snapshot() {\n  spawnCurrentUser();\n  return (0,_onflow_util_actor__WEBPACK_IMPORTED_MODULE_8__.send)(NAME, SNAPSHOT, null, {\n    expectReply: true,\n    timeout: 0\n  });\n}\n\n/**\n * @description - Resolves the current user as an argument\n * \n * @param {object} ops - running options\n * @param {string} ops.platform - platform that runs the function\n * @returns {Promise<Function>}\n */\nconst getResolveArgument = _ref6 => {\n  let {\n    platform\n  } = _ref6;\n  return async () => {\n    const {\n      addr\n    } = await getAuthenticate({\n      platform\n    })();\n    return (0,_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.arg)((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(addr), _onflow_types__WEBPACK_IMPORTED_MODULE_1__.Address);\n  };\n};\nconst makeSignable = msg => {\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(/^[0-9a-f]+$/i.test(msg), \"Message must be a hex string\");\n  return {\n    message: msg\n  };\n};\n\n/**\n * @description - A method to use allowing the user to personally sign data via FCL Compatible Wallets/Services.\n * @param {string} msg - Message to sign\n * @returns {Promise<CompositeSignature[]>} - Array of CompositeSignatures\n */\nconst getSignUserMessage = _ref7 => {\n  let {\n    platform\n  } = _ref7;\n  return async msg => {\n    spawnCurrentUser();\n    const user = await getAuthenticate({\n      platform\n    })({\n      redir: true\n    });\n    const signingService = serviceOfType(user.services, \"user-signature\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(signingService, \"Current user must have authorized a signing service.\");\n    try {\n      const response = await execService({\n        service: signingService,\n        msg: makeSignable(msg),\n        platform\n      });\n      if (Array.isArray(response)) {\n        return response.map(compSigs => normalizeCompositeSignature(compSigs));\n      } else {\n        return [normalizeCompositeSignature(response)];\n      }\n    } catch (error) {\n      return error;\n    }\n  };\n};\nconst getCurrentUser = _ref8 => {\n  let {\n    platform\n  } = _ref8;\n  let currentUser = () => {\n    return {\n      authenticate: getAuthenticate({\n        platform\n      }),\n      unauthenticate: unauthenticate$1,\n      authorization: getAuthorization({\n        platform\n      }),\n      signUserMessage: getSignUserMessage({\n        platform\n      }),\n      subscribe,\n      snapshot,\n      resolveArgument: getResolveArgument({\n        platform\n      })\n    };\n  };\n  currentUser.authenticate = getAuthenticate({\n    platform\n  });\n  currentUser.unauthenticate = unauthenticate$1;\n  currentUser.authorization = getAuthorization({\n    platform\n  });\n  currentUser.signUserMessage = getSignUserMessage({\n    platform\n  });\n  currentUser.subscribe = subscribe;\n  currentUser.snapshot = snapshot;\n  currentUser.resolveArgument = getResolveArgument({\n    platform\n  });\n  return currentUser;\n};\n\nconst getMutate = _ref => {\n  let {\n    platform\n  } = _ref;\n  /**\n   * @description\n   * Allows you to submit transactions to the blockchain to potentially mutate the state.\n   *\n   * @param {object} [opts] - Mutation Options and configuration\n   * @param {string} [opts.cadence] - Cadence Transaction used to mutate Flow\n   * @param {import(\"../shared-exports\").ArgsFn} [opts.args] - Arguments passed to cadence transaction\n   * @param {object | string} [opts.template] - Interaction Template for a transaction\n   * @param {number} [opts.limit] - Compute Limit for transaction\n   * @param {Function} [opts.authz] - Authorization function for transaction\n   * @param {Function} [opts.proposer] - Proposer Authorization function for transaction\n   * @param {Function} [opts.payer] - Payer Authorization function for transaction\n   * @param {Array<Function>} [opts.authorizations] - Authorizations function for transaction\n   * @returns {Promise<string>} Transaction Id\n   *\n   * @example\n   * fcl.mutate({\n   *   cadence: `\n   *     transaction(a: Int, b: Int, c: Address) {\n   *       prepare(acct: AuthAccount) {\n   *         log(acct)\n   *         log(a)\n   *         log(b)\n   *         log(c)\n   *       }\n   *     }\n   *   `,\n   *   args: (arg, t) => [\n   *     arg(6, t.Int),\n   *     arg(7, t.Int),\n   *     arg(\"0xba1132bc08f82fe2\", t.Address),\n   *   ],\n   * })\n   *\n   *\n   * Options:\n   * type Options = {\n   *   template: InteractionTemplate | String // InteractionTemplate or url to one\n   *   cadence: String!,\n   *   args: (arg, t) => Array<Arg>,\n   *   limit: Number,\n   *   authz: AuthzFn, // will overload the trinity of signatory roles\n   *   proposer: AuthzFn, // will overload the proposer signatory role\n   *   payer: AuthzFn, // will overload the payer signatory role\n   *   authorizations: [AuthzFn], // an array of authorization functions used as authorizations signatory roles\n   * }\n   */\n  const mutate = async function () {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var txid;\n    try {\n      await preMutate(opts);\n      opts = await prepTemplateOpts(opts);\n      const currentUser = getCurrentUser({\n        platform\n      });\n      // Allow for a config to overwrite the authorization function.\n      // prettier-ignore\n      const authz = await _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config().get(\"fcl.authz\", currentUser().authorization);\n      txid = _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.config().overload(opts.dependencies || {}, async () =>\n      // prettier-ignore\n      _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.send([_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.transaction(opts.cadence), _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.args(normalizeArgs(opts.args || [])), opts.limit && isNumber(opts.limit) && _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.limit(opts.limit),\n      // opts.proposer > opts.authz > authz\n      _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.proposer(opts.proposer || opts.authz || authz),\n      // opts.payer > opts.authz > authz\n      _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.payer(opts.payer || opts.authz || authz),\n      // opts.authorizations > [opts.authz > authz]\n      _onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.authorizations(opts.authorizations || [opts.authz || authz])]).then(_onflow_sdk__WEBPACK_IMPORTED_MODULE_0__.decode));\n      return txid;\n    } catch (error) {\n      throw error;\n    }\n  };\n  return mutate;\n};\n\nconst FRAME = \"FCL_IFRAME\";\nconst FRAME_STYLES = `\n  position:fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100vw;\n  display:block;\n  background:rgba(0,0,0,0.25);\n  z-index: 2147483647;\n  box-sizing: border-box;\n  color-scheme: light;\n`;\nfunction renderFrame(src) {\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(!document.getElementById(FRAME), \"Attempt at triggering multiple Frames\", {\n    src\n  });\n  const $frame = document.createElement(\"iframe\");\n  $frame.src = src;\n  $frame.id = FRAME;\n  $frame.allow = \"usb *; hid *\";\n  $frame.frameBorder = \"0\";\n  $frame.style.cssText = FRAME_STYLES;\n  document.body.append($frame);\n  const unmount = () => {\n    if (document.getElementById(FRAME)) {\n      document.getElementById(FRAME).remove();\n    }\n  };\n  return [$frame.contentWindow, unmount];\n}\n\nconst POP = \"FCL_POP\";\nlet popup = null;\nlet previousUrl$1 = null;\nfunction popupWindow(url, windowName, win, w, h) {\n  const y = win.top.outerHeight / 2 + win.top.screenY - h / 2;\n  const x = win.top.outerWidth / 2 + win.top.screenX - w / 2;\n  const popup = win.open(url, windowName, `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${y}, left=${x}`);\n  if (!popup) throw new Error(\"Popup failed to open (was it blocked by a popup blocker?)\");\n  return popup;\n}\nfunction renderPop(src) {\n  if (popup == null || popup?.closed) {\n    popup = popupWindow(src, POP, window, 640, 770);\n  } else if (previousUrl$1 !== src) {\n    popup.location.replace(src);\n    popup.focus();\n  } else {\n    popup.focus();\n  }\n  previousUrl$1 = src;\n  const unmount = () => {\n    if (popup && !popup.closed) {\n      popup.close();\n    }\n    popup = null;\n  };\n  return [popup, unmount];\n}\n\nlet tab$1 = null;\nlet previousUrl = null;\nfunction renderTab(src) {\n  if (tab$1 == null || tab$1?.closed) {\n    tab$1 = window.open(src, \"_blank\");\n    if (!tab$1) throw new Error(\"Tab failed to open (was it blocked by the browser?)\");\n  } else if (previousUrl !== src) {\n    tab$1.location.replace(src);\n    tab$1.focus();\n  } else {\n    tab$1.focus();\n  }\n  previousUrl = src;\n  const unmount = () => {\n    if (tab$1 && !tab$1.closed) {\n      tab$1.close();\n    }\n    tab$1 = null;\n  };\n  return [tab$1, unmount];\n}\n\nconst isServerSide = () => typeof window === \"undefined\";\nconst getSessionStorage = () => {\n  try {\n    const SESSION_STORAGE = {\n      can: !isServerSide(),\n      get: async key => JSON.parse(sessionStorage.getItem(key)),\n      put: async (key, value) => sessionStorage.setItem(key, JSON.stringify(value))\n    };\n    return SESSION_STORAGE;\n  } catch (error) {\n    return null;\n  }\n};\nconst getDefaultConfig = () => {\n  return {\n    \"discovery.wallet.method.default\": \"IFRAME/RPC\",\n    \"fcl.storage.default\": getSessionStorage()\n  };\n};\n\nfunction serviceEndpoint(service) {\n  const url = new URL$1(service.endpoint);\n  if (window?.location?.origin) {\n    url.searchParams.append(\"l6n\", window.location.origin);\n  }\n  if (service.params != null) {\n    for (let [key, value] of Object.entries(service.params || {})) {\n      url.searchParams.append(key, value);\n    }\n  }\n  return url;\n}\n\nfunction fetchService(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const method = opts.method || \"POST\";\n  const body = method === \"GET\" ? undefined : JSON.stringify(opts.data || service.data || {});\n  return fetch(serviceEndpoint(service), {\n    method: method,\n    headers: {\n      ...(service.headers || {}),\n      ...(opts.headers || {}),\n      \"Content-Type\": \"application/json\"\n    },\n    body: body\n  }).then(d => d.json());\n}\n\n// {\n//    \"f_type\": \"PollingResponse\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"status\": \"PENDING\", // PENDING | APPROVED | DECLINED | REDIRECT\n//    \"reason\": null,      // Reason for Declining Transaction\n//    \"data\": null,        // Return value for APPROVED\n//    \"updates\": BackChannelRpc,\n//    \"local\": Frame,\n// }\nfunction normalizePollingResponse(resp) {\n  if (resp == null) return null;\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp;\n    default:\n      return {\n        ...POLLING_RESPONSE_PRAGMA,\n        status: resp.status ?? \"APPROVED\",\n        reason: resp.reason ?? null,\n        data: resp.compositeSignature || resp.data || {\n          ...resp\n        } || {},\n        updates: normalizeBackChannelRpc(resp.authorizationUpdates),\n        local: normalizeFrame((resp.local || [])[0])\n      };\n  }\n}\n\nconst OPTIONS = {\n  \"HTTP/GET\": \"GET\",\n  \"HTTP/POST\": \"POST\"\n};\nconst serviceMethod = service => {\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(OPTIONS[service.method], \"Invalid Service Method for type back-channel-rpc\", {\n    service\n  });\n  return OPTIONS[service.method];\n};\nasync function poll(service) {\n  let checkCanContinue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => true;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_2__.invariant)(service, \"Missing Polling Service\", {\n    service\n  });\n  const canContinue = checkCanContinue();\n  if (!canContinue) throw new Error(\"Externally Halted\");\n  let resp;\n  try {\n    if (typeof document !== \"undefined\" && document.visibilityState === \"hidden\") {\n      await new Promise(r => setTimeout(r, 500));\n      return poll(service, checkCanContinue);\n    }\n    resp = await fetchService(service, {\n      method: serviceMethod(service)\n    }).then(normalizePollingResponse);\n  } catch (error) {\n    throw error;\n  }\n  switch (resp.status) {\n    case \"APPROVED\":\n      return resp.data;\n    case \"DECLINED\":\n      throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`);\n    default:\n      await new Promise(r => setTimeout(r, 500));\n      return poll(resp.updates, checkCanContinue);\n  }\n}\n\nconst getExecHttpPost = execLocal => async _ref => {\n  let {\n    service,\n    body,\n    config,\n    opts\n  } = _ref;\n  const resp = await fetchService(service, {\n    data: {\n      fclVersion: VERSION,\n      service: {\n        params: service.params,\n        data: service.data,\n        type: service.type\n      },\n      config,\n      ...body\n    }\n  }).then(normalizePollingResponse);\n  if (resp.status === \"APPROVED\") {\n    return resp.data;\n  } else if (resp.status === \"DECLINED\") {\n    throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`);\n  } else if (resp.status === \"REDIRECT\") {\n    return resp;\n  } else if (resp.status === \"PENDING\") {\n    // these two flags are required to run polling one more time before it stops\n    var canContinue = true;\n    var shouldContinue = true;\n    const [_, unmount] = await execLocal(normalizeLocalView(resp.local), {\n      serviceEndpoint,\n      onClose: () => shouldContinue = false\n    });\n    const close = () => {\n      try {\n        unmount();\n        shouldContinue = false;\n      } catch (error) {\n        console.error(\"Frame Close Error\", error);\n      }\n    };\n    /**\n     * this function is run once per poll call.\n     * Offsetting canContinue flag to make sure that\n     * the polling is performed one extra time after canContinue flag is set to false\n     * to prevent halting on Android when a browser calls window.close\n     * before FCL receives a successful result from polling\n     *\n     * @returns {boolean} \n     */\n    const checkCanContinue = () => {\n      const offsetCanContinue = canContinue;\n      canContinue = shouldContinue;\n      return offsetCanContinue;\n    };\n    return poll(resp.updates, checkCanContinue).then(serviceResponse => {\n      close();\n      return serviceResponse;\n    }).catch(error => {\n      console.error(error);\n      close();\n      throw error;\n    });\n  } else {\n    console.error(`Auto Decline: Invalid Response`, {\n      service,\n      resp\n    });\n    throw new Error(`Auto Decline: Invalid Response`);\n  }\n};\n\nconst CLOSE_EVENT = \"FCL:VIEW:CLOSE\";\nconst READY_EVENT = \"FCL:VIEW:READY\";\nconst RESPONSE_EVENT = \"FCL:VIEW:RESPONSE\";\nconst _ = e => typeof e === \"string\" && e.toLowerCase();\nconst IGNORE = new Set([\"monetizationstart\", \"monetizationpending\", \"monetizationprogress\", \"monetizationstop\"]);\nconst deprecate = (was, want) => console.warn(\"DEPRECATION NOTICE\", `Received ${was}, please use ${want} for this and future versions of FCL`);\nconst buildMessageHandler = _ref => {\n  let {\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage\n  } = _ref;\n  return e => {\n    try {\n      if (typeof e.data !== \"object\") return;\n      if (IGNORE.has(e.data.type)) return;\n      if (_(e.data.type) === _(CLOSE_EVENT)) close();\n      if (_(e.data.type) === _(READY_EVENT)) onReady(e, {\n        send,\n        close\n      });\n      if (_(e.data.type) === _(RESPONSE_EVENT)) onResponse(e, {\n        send,\n        close\n      });\n      onMessage(e, {\n        send,\n        close\n      });\n\n      // Backwards Compatible\n      if (_(e.data.type) === _(\"FCL:FRAME:READY\")) {\n        deprecate(e.data.type, READY_EVENT);\n        onReady(e, {\n          send,\n          close\n        });\n      }\n      if (_(e.data.type) === _(\"FCL:FRAME:RESPONSE\")) {\n        deprecate(e.data.type, RESPONSE_EVENT);\n        onResponse(e, {\n          send,\n          close\n        });\n      }\n      if (_(e.data.type) === _(\"FCL:FRAME:CLOSE\")) {\n        deprecate(e.data.type, CLOSE_EVENT);\n        close();\n      }\n      //\n      if (_(e.data.type) === _(\"FCL::CHALLENGE::RESPONSE\")) {\n        deprecate(e.data.type, RESPONSE_EVENT);\n        onResponse(e, {\n          send,\n          close\n        });\n      }\n      if (_(e.data.type) === _(\"FCL::AUTHZ_READY\")) {\n        deprecate(e.data.type, READY_EVENT);\n        onReady(e, {\n          send,\n          close\n        });\n      }\n      if (_(e.data.type) === _(\"FCL::CHALLENGE::CANCEL\")) {\n        deprecate(e.data.type, CLOSE_EVENT);\n        close();\n      }\n      if (_(e.data.type) === _(\"FCL::CANCEL\")) {\n        deprecate(e.data.type, CLOSE_EVENT);\n        close();\n      }\n    } catch (error) {\n      console.error(\"Frame Callback Error\", error);\n      close();\n    }\n  };\n};\n\nconst noop$3 = () => {};\nfunction frame(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop$3,\n    close: noop$3\n  };\n  const onClose = opts.onClose || noop$3;\n  const onMessage = opts.onMessage || noop$3;\n  const onReady = opts.onReady || noop$3;\n  const onResponse = opts.onResponse || noop$3;\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage\n  });\n  window.addEventListener(\"message\", handler);\n  const [$frame, unmount] = renderFrame(serviceEndpoint(service));\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      unmount();\n      onClose();\n    } catch (error) {\n      console.error(\"Frame Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      $frame.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Frame Send Error\", msg, error);\n    }\n  }\n}\n\nfunction execIframeRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    const id = (0,_onflow_util_uid__WEBPACK_IMPORTED_MODULE_11__.uid)();\n    const includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall;\n    frame(service, {\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            fclVersion: VERSION,\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config,\n            deprecated: {\n              message: \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n            }\n          });\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n              deprecated: {\n                message: \"jsonrpc is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n              }\n            });\n          }\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = normalizePollingResponse(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onMessage(e, _ref4) {\n        let {\n          close\n        } = _ref4;\n        try {\n          if (typeof e.data !== \"object\") return;\n          if (e.data.jsonrpc !== \"2.0\") return;\n          if (e.data.id !== id) return;\n          const resp = normalizePollingResponse(e.data.result);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onMessage error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      }\n    });\n  });\n}\n\nconst noop$2 = () => {};\nfunction pop(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop$2,\n    close: noop$2\n  };\n  const onClose = opts.onClose || noop$2;\n  const onMessage = opts.onMessage || noop$2;\n  const onReady = opts.onReady || noop$2;\n  const onResponse = opts.onResponse || noop$2;\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage\n  });\n  window.addEventListener(\"message\", handler);\n  const [$pop, unmount] = renderPop(serviceEndpoint(service));\n  const timer = setInterval(function () {\n    if ($pop && $pop.closed) {\n      close();\n    }\n  }, 500);\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      clearInterval(timer);\n      unmount();\n      onClose();\n    } catch (error) {\n      console.error(\"Popup Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      $pop.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Popup Send Error\", msg, error);\n    }\n  }\n}\n\nfunction execPopRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    const id = (0,_onflow_util_uid__WEBPACK_IMPORTED_MODULE_11__.uid)();\n    const {\n      redir,\n      includeOlderJsonRpcCall\n    } = opts;\n    pop(service, {\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config,\n            deprecated: {\n              message: \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n            }\n          });\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params]\n            });\n          }\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = normalizePollingResponse(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onMessage(e, _ref4) {\n        let {\n          close\n        } = _ref4;\n        try {\n          if (typeof e.data !== \"object\") return;\n          if (e.data.jsonrpc !== \"2.0\") return;\n          if (e.data.id !== id) return;\n          const resp = normalizePollingResponse(e.data.result);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      }\n    });\n  });\n}\n\nconst noop$1 = () => {};\nfunction tab(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop$1,\n    close: noop$1\n  };\n  const onClose = opts.onClose || noop$1;\n  const onMessage = opts.onMessage || noop$1;\n  const onReady = opts.onReady || noop$1;\n  const onResponse = opts.onResponse || noop$1;\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage\n  });\n  window.addEventListener(\"message\", handler);\n  const [$tab, unmount] = renderTab(serviceEndpoint(service));\n  const timer = setInterval(function () {\n    if ($tab && $tab.closed) {\n      close();\n    }\n  }, 500);\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      clearInterval(timer);\n      unmount();\n      onClose();\n    } catch (error) {\n      console.error(\"Tab Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      $tab.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Tab Send Error\", msg, error);\n    }\n  }\n}\n\nfunction execTabRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    const id = (0,_onflow_util_uid__WEBPACK_IMPORTED_MODULE_11__.uid)();\n    const {\n      redir,\n      includeOlderJsonRpcCall\n    } = opts;\n    tab(service, {\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config,\n            deprecated: {\n              message: \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\"\n            }\n          });\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params]\n            });\n          }\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = normalizePollingResponse(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onMessage(e, _ref4) {\n        let {\n          close\n        } = _ref4;\n        try {\n          if (typeof e.data !== \"object\") return;\n          if (e.data.jsonrpc !== \"2.0\") return;\n          if (e.data.id !== id) return;\n          const resp = normalizePollingResponse(e.data.result);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              !redir && close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      }\n    });\n  });\n}\n\nconst noop = () => {};\nfunction extension(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (service == null) return {\n    send: noop,\n    close: noop\n  };\n  const onClose = opts.onClose || noop;\n  const onMessage = opts.onMessage || noop;\n  const onReady = opts.onReady || noop;\n  const onResponse = opts.onResponse || noop;\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage\n  });\n  window.addEventListener(\"message\", handler);\n  send({\n    service\n  });\n  return {\n    send,\n    close\n  };\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler);\n      onClose();\n    } catch (error) {\n      console.error(\"Ext Close Error\", error);\n    }\n  }\n  function send(msg) {\n    try {\n      window && window.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\");\n    } catch (error) {\n      console.error(\"Ext Send Error\", msg, error);\n    }\n  }\n}\n\nfunction execExtRPC(_ref) {\n  let {\n    service,\n    body,\n    config,\n    opts\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    extension(service, {\n      async onReady(_, _ref2) {\n        let {\n          send\n        } = _ref2;\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type\n            },\n            config\n          });\n        } catch (error) {\n          throw error;\n        }\n      },\n      onResponse(e, _ref3) {\n        let {\n          close\n        } = _ref3;\n        try {\n          if (typeof e.data !== \"object\") return;\n          const resp = normalizePollingResponse(e.data);\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data);\n              close();\n              break;\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`);\n              close();\n              break;\n            case \"REDIRECT\":\n              resolve(resp);\n              close();\n              break;\n            default:\n              reject(`Declined: No reason supplied`);\n              close();\n              break;\n          }\n        } catch (error) {\n          console.error(\"execExtRPC onResponse error\", error);\n          throw error;\n        }\n      },\n      onClose() {\n        reject(`Declined: Externally Halted`);\n      }\n    });\n  });\n}\n\nconst NOT_IMPLEMENTED = () => {\n  throw new Error(\"Strategy util has not been implemented on this platform\");\n};\nconst VIEWS = {\n  \"VIEW/IFRAME\": renderFrame,\n  \"VIEW/POP\": renderPop,\n  \"VIEW/TAB\": renderTab,\n  \"VIEW/MOBILE_BROWSER\": NOT_IMPLEMENTED\n};\nasync function execLocal(service) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    serviceEndpoint: () => {}\n  };\n  const {\n    serviceEndpoint\n  } = opts;\n  try {\n    return VIEWS[service.method](serviceEndpoint(service), opts);\n  } catch (error) {\n    console.error(\"execLocal({service, opts = {}})\", error, {\n      service,\n      opts\n    });\n    throw error;\n  }\n}\n\nconst coreStrategies = {\n  [CORE_STRATEGIES[\"HTTP/RPC\"]]: getExecHttpPost(execLocal),\n  [CORE_STRATEGIES[\"HTTP/POST\"]]: getExecHttpPost(execLocal),\n  [CORE_STRATEGIES[\"IFRAME/RPC\"]]: execIframeRPC,\n  [CORE_STRATEGIES[\"POP/RPC\"]]: execPopRPC,\n  [CORE_STRATEGIES[\"TAB/RPC\"]]: execTabRPC,\n  [CORE_STRATEGIES[\"EXT/RPC\"]]: execExtRPC\n};\n\nconst mutate = getMutate({\n  platform: \"web\"\n});\nconst currentUser = getCurrentUser({\n  platform: \"web\"\n});\nconst authenticate = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return currentUser().authenticate(opts);\n};\nconst unauthenticate = () => currentUser().unauthenticate();\nconst reauthenticate = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  currentUser().unauthenticate();\n  return currentUser().authenticate(opts);\n};\nconst signUp = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return currentUser().authenticate(opts);\n};\nconst logIn = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return currentUser().authenticate(opts);\n};\nconst authz = currentUser().authorization;\n(0,_onflow_config__WEBPACK_IMPORTED_MODULE_4__.config)(getDefaultConfig());\ninitServiceRegistry({\n  coreStrategies\n});\n\n\n//# sourceMappingURL=fcl.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@onflow/fcl/dist/fcl.module.js\n"));

/***/ }),

/***/ "./node_modules/@onflow/rlp/dist/rlp.module.js":
/*!*****************************************************!*\
  !*** ./node_modules/@onflow/rlp/dist/rlp.module.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Buffer\": function() { return /* reexport safe */ buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer; },\n/* harmony export */   \"decode\": function() { return /* binding */ decode; },\n/* harmony export */   \"encode\": function() { return /* binding */ encode; },\n/* harmony export */   \"getLength\": function() { return /* binding */ getLength; },\n/* harmony export */   \"toBuffer\": function() { return /* binding */ toBuffer; }\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\n\n\n/**\n * Built on top of rlp library, removing the BN dependency for the flow.\n * Package : https://github.com/ethereumjs/rlp\n * RLP License : https://github.com/ethereumjs/rlp/blob/master/LICENSE\n *\n * ethereumjs/rlp is licensed under the\n * Mozilla Public License 2.0\n * Permissions of this weak copyleft license are conditioned on making available source code of licensed files and modifications of those files under the same license (or in certain cases, one of the GNU licenses). Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. However, a larger work using the licensed work may be distributed under different terms and without source code for files added in the larger work.\n **/\n\n/**\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    var output = [];\n    for (var i = 0; i < input.length; i++) {\n      output.push(encode(input[i]));\n    }\n    var buf = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat(output);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([encodeLength(buf.length, 192), buf]);\n  } else {\n    var inputBuf = toBuffer(input);\n    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n  }\n}\n\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\nfunction safeParseInt(v, base) {\n  if (v.slice(0, 2) === \"00\") {\n    throw new Error(\"invalid RLP: extra zeros\");\n  }\n  return parseInt(v, base);\n}\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([len + offset]);\n  } else {\n    var hexLength = intToHex(len);\n    var lLength = hexLength.length / 2;\n    var firstByte = intToHex(offset + 55 + lLength);\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(firstByte + hexLength, \"hex\");\n  }\n}\n\n/**\n * Built on top of rlp library, removing the BN dependency for the flow.\n * Package : https://github.com/ethereumjs/rlp\n * RLP License : https://github.com/ethereumjs/rlp/blob/master/LICENSE\n *\n * ethereumjs/rlp is licensed under the\n * Mozilla Public License 2.0\n * Permissions of this weak copyleft license are conditioned on making available source code of licensed files and modifications of those files under the same license (or in certain cases, one of the GNU licenses). Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. However, a larger work using the licensed work may be distributed under different terms and without source code for files added in the larger work.\n **/\n\n/**\n * @param input - will be converted to buffer\n * @param stream Is the input a stream (false by default)\n * @returns returns buffer of encoded data\n **/\nfunction decode(input, stream) {\n  if (stream === void 0) {\n    stream = false;\n  }\n  if (!input || input.length === 0) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n  }\n  var inputBuffer = toBuffer(input);\n  var decoded = _decode(inputBuffer);\n  if (stream) {\n    return decoded;\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error(\"invalid remainder\");\n  }\n  return decoded.data;\n}\n\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\nfunction getLength(input) {\n  if (!input || input.length === 0) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n  }\n  var inputBuffer = toBuffer(input);\n  var firstByte = inputBuffer[0];\n  if (firstByte <= 0x7f) {\n    return inputBuffer.length;\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f;\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6;\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf;\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6;\n    var length = safeParseInt(inputBuffer.slice(1, llength).toString(\"hex\"), 16);\n    return llength + length;\n  }\n}\n\n/** Decode an input with RLP */\nfunction _decode(input) {\n  var length, llength, data, innerRemainder, d;\n  var decoded = [];\n  var firstByte = input[0];\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f;\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n    } else {\n      data = input.slice(1, length);\n    }\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error(\"invalid rlp encoding: byte must be less 0x80\");\n    }\n    return {\n      data: data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    llength = firstByte - 0xb6;\n    length = safeParseInt(input.slice(1, llength).toString(\"hex\"), 16);\n    data = input.slice(llength, length + llength);\n    if (data.length < length) {\n      throw new Error(\"invalid RLP\");\n    }\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = input.slice(1, length);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = safeParseInt(input.slice(1, llength).toString(\"hex\"), 16);\n    var totalLength = llength + length;\n    if (totalLength > input.length) {\n      throw new Error(\"invalid rlp: total length is larger than the data\");\n    }\n    innerRemainder = input.slice(llength, totalLength);\n    if (innerRemainder.length === 0) {\n      throw new Error(\"invalid rlp, List has a invalid length\");\n    }\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === \"0x\";\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n  if (typeof str !== \"string\") {\n    return str;\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n  if (integer < 0) {\n    throw new Error(\"Invalid integer as argument, must be unsigned!\");\n  }\n  var hex = integer.toString(16);\n  return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n  return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n  var hex = intToHex(integer);\n  return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex, \"hex\");\n}\n\n/** Transform anything into a Buffer */\nfunction toBuffer(v) {\n  if (!buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(v)) {\n    if (typeof v === \"string\") {\n      if (isHexPrefixed(v)) {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(padToEven(stripHexPrefix(v)), \"hex\");\n      } else {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(v);\n      }\n    } else if (typeof v === \"number\") {\n      if (!v) {\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n      } else {\n        return intToBuffer(v);\n      }\n    } else if (v === null || v === undefined) {\n      return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n    } else if (v instanceof Uint8Array) {\n      return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(v);\n    } else {\n      throw new Error(\"invalid type\");\n    }\n  }\n  return v;\n}\n\n\n//# sourceMappingURL=rlp.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@onflow/rlp/dist/rlp.module.js\n"));

/***/ }),

/***/ "./node_modules/@onflow/sdk/dist/sdk.module.js":
/*!*****************************************************!*\
  !*** ./node_modules/@onflow/sdk/dist/sdk.module.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TestUtils\": function() { return /* binding */ index; },\n/* harmony export */   \"VERSION\": function() { return /* binding */ VERSION; },\n/* harmony export */   \"account\": function() { return /* binding */ account; },\n/* harmony export */   \"arg\": function() { return /* binding */ arg; },\n/* harmony export */   \"args\": function() { return /* binding */ args; },\n/* harmony export */   \"atBlockHeight\": function() { return /* binding */ atBlockHeight; },\n/* harmony export */   \"atBlockId\": function() { return /* binding */ atBlockId; },\n/* harmony export */   \"authorization\": function() { return /* binding */ authorization; },\n/* harmony export */   \"authorizations\": function() { return /* binding */ authorizations; },\n/* harmony export */   \"block\": function() { return /* binding */ block; },\n/* harmony export */   \"build\": function() { return /* binding */ build; },\n/* harmony export */   \"cadence\": function() { return /* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_7__.template; },\n/* harmony export */   \"cdc\": function() { return /* reexport safe */ _onflow_util_template__WEBPACK_IMPORTED_MODULE_7__.template; },\n/* harmony export */   \"config\": function() { return /* reexport safe */ _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config; },\n/* harmony export */   \"createSignableVoucher\": function() { return /* binding */ createSignableVoucher; },\n/* harmony export */   \"decode\": function() { return /* binding */ decode; },\n/* harmony export */   \"destroy\": function() { return /* binding */ destroy; },\n/* harmony export */   \"encodeMessageFromSignable\": function() { return /* binding */ encodeMessageFromSignable; },\n/* harmony export */   \"encodeTransactionEnvelope\": function() { return /* binding */ encodeTransactionEnvelope; },\n/* harmony export */   \"encodeTransactionPayload\": function() { return /* binding */ encodeTransactionPayload; },\n/* harmony export */   \"encodeTxIdFromVoucher\": function() { return /* binding */ encodeTxIdFromVoucher; },\n/* harmony export */   \"get\": function() { return /* binding */ get; },\n/* harmony export */   \"getAccount\": function() { return /* binding */ getAccount; },\n/* harmony export */   \"getBlock\": function() { return /* binding */ getBlock; },\n/* harmony export */   \"getBlockHeader\": function() { return /* binding */ getBlockHeader; },\n/* harmony export */   \"getCollection\": function() { return /* binding */ getCollection; },\n/* harmony export */   \"getEvents\": function() { return /* binding */ getEvents; },\n/* harmony export */   \"getEventsAtBlockHeightRange\": function() { return /* binding */ getEventsAtBlockHeightRange; },\n/* harmony export */   \"getEventsAtBlockIds\": function() { return /* binding */ getEventsAtBlockIds; },\n/* harmony export */   \"getNetworkParameters\": function() { return /* binding */ getNetworkParameters; },\n/* harmony export */   \"getTransaction\": function() { return /* binding */ getTransaction; },\n/* harmony export */   \"getTransactionStatus\": function() { return /* binding */ getTransactionStatus; },\n/* harmony export */   \"interaction\": function() { return /* binding */ interaction; },\n/* harmony export */   \"invariant\": function() { return /* binding */ invariant; },\n/* harmony export */   \"isBad\": function() { return /* binding */ isBad; },\n/* harmony export */   \"isGetAccount\": function() { return /* binding */ isGetAccount; },\n/* harmony export */   \"isGetBlock\": function() { return /* binding */ isGetBlock; },\n/* harmony export */   \"isGetBlockHeader\": function() { return /* binding */ isGetBlockHeader; },\n/* harmony export */   \"isGetCollection\": function() { return /* binding */ isGetCollection; },\n/* harmony export */   \"isGetEvents\": function() { return /* binding */ isGetEvents; },\n/* harmony export */   \"isGetNetworkParameters\": function() { return /* binding */ isGetNetworkParameters; },\n/* harmony export */   \"isGetTransaction\": function() { return /* binding */ isGetTransaction; },\n/* harmony export */   \"isGetTransactionStatus\": function() { return /* binding */ isGetTransactionStatus; },\n/* harmony export */   \"isOk\": function() { return /* binding */ isOk; },\n/* harmony export */   \"isPing\": function() { return /* binding */ isPing; },\n/* harmony export */   \"isScript\": function() { return /* binding */ isScript; },\n/* harmony export */   \"isTransaction\": function() { return /* binding */ isTransaction; },\n/* harmony export */   \"isUnknown\": function() { return /* binding */ isUnknown; },\n/* harmony export */   \"limit\": function() { return /* binding */ limit; },\n/* harmony export */   \"param\": function() { return /* binding */ param; },\n/* harmony export */   \"params\": function() { return /* binding */ params; },\n/* harmony export */   \"payer\": function() { return /* binding */ payer; },\n/* harmony export */   \"ping\": function() { return /* binding */ ping; },\n/* harmony export */   \"pipe\": function() { return /* binding */ pipe; },\n/* harmony export */   \"proposer\": function() { return /* binding */ proposer; },\n/* harmony export */   \"put\": function() { return /* binding */ put; },\n/* harmony export */   \"ref\": function() { return /* binding */ ref; },\n/* harmony export */   \"resolve\": function() { return /* binding */ resolve; },\n/* harmony export */   \"resolveAccounts\": function() { return /* binding */ resolveAccounts; },\n/* harmony export */   \"resolveArguments\": function() { return /* binding */ resolveArguments; },\n/* harmony export */   \"resolveCadence\": function() { return /* binding */ resolveCadence; },\n/* harmony export */   \"resolveFinalNormalization\": function() { return /* binding */ resolveFinalNormalization; },\n/* harmony export */   \"resolveProposerSequenceNumber\": function() { return /* binding */ resolveProposerSequenceNumber; },\n/* harmony export */   \"resolveRefBlockId\": function() { return /* binding */ resolveRefBlockId; },\n/* harmony export */   \"resolveSignatures\": function() { return /* binding */ resolveSignatures; },\n/* harmony export */   \"resolveValidators\": function() { return /* binding */ resolveValidators; },\n/* harmony export */   \"resolveVoucherIntercept\": function() { return /* binding */ resolveVoucherIntercept; },\n/* harmony export */   \"response\": function() { return /* binding */ response; },\n/* harmony export */   \"script\": function() { return /* binding */ script; },\n/* harmony export */   \"send\": function() { return /* binding */ send; },\n/* harmony export */   \"transaction\": function() { return /* binding */ transaction; },\n/* harmony export */   \"update\": function() { return /* binding */ update; },\n/* harmony export */   \"validator\": function() { return /* binding */ validator; },\n/* harmony export */   \"voucherIntercept\": function() { return /* binding */ voucherIntercept; },\n/* harmony export */   \"voucherToTxId\": function() { return /* binding */ voucherToTxId; },\n/* harmony export */   \"why\": function() { return /* binding */ why; }\n/* harmony export */ });\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-logger */ \"./node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/util-invariant */ \"./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var _onflow_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/config */ \"./node_modules/@onflow/config/dist/config.module.js\");\n/* harmony import */ var _onflow_rlp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @onflow/rlp */ \"./node_modules/@onflow/rlp/dist/rlp.module.js\");\n/* harmony import */ var _onflow_transport_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onflow/transport-http */ \"./node_modules/@onflow/transport-http/dist/sdk-send-http.module.js\");\n/* harmony import */ var _onflow_util_address__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @onflow/util-address */ \"./node_modules/@onflow/util-address/dist/util-address.module.js\");\n/* harmony import */ var sha3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! sha3 */ \"./node_modules/sha3/index.js\");\n/* harmony import */ var _onflow_util_template__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @onflow/util-template */ \"./node_modules/@onflow/util-template/dist/template.module.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst UNKNOWN /*                       */ = \"UNKNOWN\";\nconst SCRIPT /*                        */ = \"SCRIPT\";\nconst TRANSACTION /*                   */ = \"TRANSACTION\";\nconst GET_TRANSACTION_STATUS /*        */ = \"GET_TRANSACTION_STATUS\";\nconst GET_ACCOUNT /*                   */ = \"GET_ACCOUNT\";\nconst GET_EVENTS /*                    */ = \"GET_EVENTS\";\nconst PING /*                          */ = \"PING\";\nconst GET_TRANSACTION /*               */ = \"GET_TRANSACTION\";\nconst GET_BLOCK /*                     */ = \"GET_BLOCK\";\nconst GET_BLOCK_HEADER /*              */ = \"GET_BLOCK_HEADER\";\nconst GET_COLLECTION /*                */ = \"GET_COLLECTION\";\nconst GET_NETWORK_PARAMETERS /*        */ = \"GET_NETWORK_PARAMETERS\";\nconst BAD /* */ = \"BAD\";\nconst OK /*  */ = \"OK\";\nconst ACCOUNT /*  */ = \"ACCOUNT\";\nconst PARAM /*    */ = \"PARAM\";\nconst ARGUMENT /* */ = \"ARGUMENT\";\nconst AUTHORIZER /* */ = \"authorizer\";\nconst PAYER /*      */ = \"payer\";\nconst PROPOSER /*   */ = \"proposer\";\nconst ACCT = `{\n  \"kind\":\"${ACCOUNT}\",\n  \"tempId\":null,\n  \"addr\":null,\n  \"keyId\":null,\n  \"sequenceNum\":null,\n  \"signature\":null,\n  \"signingFunction\":null,\n  \"resolve\":null,\n  \"role\": {\n    \"proposer\":false,\n    \"authorizer\":false,\n    \"payer\":false,\n    \"param\":false\n  }\n}`;\nconst ARG = `{\n  \"kind\":\"${ARGUMENT}\",\n  \"tempId\":null,\n  \"value\":null,\n  \"asArgument\":null,\n  \"xform\":null,\n  \"resolve\": null,\n  \"resolveArgument\": null\n}`;\nconst IX = `{\n  \"tag\":\"${UNKNOWN}\",\n  \"assigns\":{},\n  \"status\":\"${OK}\",\n  \"reason\":null,\n  \"accounts\":{},\n  \"params\":{},\n  \"arguments\":{},\n  \"message\": {\n    \"cadence\":null,\n    \"refBlock\":null,\n    \"computeLimit\":null,\n    \"proposer\":null,\n    \"payer\":null,\n    \"authorizations\":[],\n    \"params\":[],\n    \"arguments\":[]\n  },\n  \"proposer\":null,\n  \"authorizations\":[],\n  \"payer\":[],\n  \"events\": {\n    \"eventType\":null,\n    \"start\":null,\n    \"end\":null,\n    \"blockIds\":[]\n  },\n  \"transaction\": {\n    \"id\":null\n  },\n  \"block\": {\n    \"id\":null,\n    \"height\":null,\n    \"isSealed\":null\n  },\n  \"account\": {\n    \"addr\":null\n  },\n  \"collection\": {\n    \"id\":null\n  }\n}`;\nconst KEYS = new Set(Object.keys(JSON.parse(IX)));\nconst interaction = () => JSON.parse(IX);\nconst CHARS = \"abcdefghijklmnopqrstuvwxyz0123456789\".split(\"\");\nconst randChar = () => CHARS[~~(Math.random() * CHARS.length)];\nconst uuid = () => Array.from({\n  length: 10\n}, randChar).join(\"\");\nconst isNumber$1 = d => typeof d === \"number\";\nconst isArray$1 = d => Array.isArray(d);\nconst isObj = d => d !== null && typeof d === \"object\";\nconst isNull = d => d == null;\nconst isFn$3 = d => typeof d === \"function\";\nconst isInteraction = ix => {\n  if (!isObj(ix) || isNull(ix) || isNumber$1(ix)) return false;\n  for (let key of KEYS) if (!ix.hasOwnProperty(key)) return false;\n  return true;\n};\nconst Ok = ix => {\n  ix.status = OK;\n  return ix;\n};\nconst Bad = (ix, reason) => {\n  ix.status = BAD;\n  ix.reason = reason;\n  return ix;\n};\nconst makeIx = wat => ix => {\n  ix.tag = wat;\n  return Ok(ix);\n};\nconst prepAccountKeyId = acct => {\n  if (acct.keyId == null) return acct;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!isNaN(parseInt(acct.keyId)), \"account.keyId must be an integer\");\n  return {\n    ...acct,\n    keyId: parseInt(acct.keyId)\n  };\n};\nconst prepAccount = function (acct) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return ix => {\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(typeof acct === \"function\" || typeof acct === \"object\", \"prepAccount must be passed an authorization function or an account object\");\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(opts.role != null, \"Account must have a role\");\n    const ACCOUNT = JSON.parse(ACCT);\n    const role = opts.role;\n    const tempId = uuid();\n    if (acct.authorization && isFn$3(acct.authorization)) acct = {\n      resolve: acct.authorization\n    };\n    if (!acct.authorization && isFn$3(acct)) acct = {\n      resolve: acct\n    };\n    const resolve = acct.resolve;\n    if (resolve) acct.resolve = function (acct) {\n      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        rest[_key - 1] = arguments[_key];\n      }\n      return [resolve, prepAccountKeyId].reduce(async (d, fn) => fn(await d, ...rest), acct);\n    };\n    acct = prepAccountKeyId(acct);\n    ix.accounts[tempId] = {\n      ...ACCOUNT,\n      tempId,\n      ...acct,\n      role: {\n        ...ACCOUNT.role,\n        ...(typeof acct.role === \"object\" ? acct.role : {}),\n        [role]: true\n      }\n    };\n    if (role === AUTHORIZER) {\n      ix.authorizations.push(tempId);\n    } else if (role === PAYER) {\n      ix.payer.push(tempId);\n    } else {\n      ix[role] = tempId;\n    }\n    return ix;\n  };\n};\nconst makeArgument = arg => ix => {\n  let tempId = uuid();\n  ix.message.arguments.push(tempId);\n  ix.arguments[tempId] = JSON.parse(ARG);\n  ix.arguments[tempId].tempId = tempId;\n  ix.arguments[tempId].value = arg.value;\n  ix.arguments[tempId].asArgument = arg.asArgument;\n  ix.arguments[tempId].xform = arg.xform;\n  ix.arguments[tempId].resolve = arg.resolve;\n  ix.arguments[tempId].resolveArgument = isFn$3(arg.resolveArgument) ? arg.resolveArgument.bind(arg) : arg.resolveArgument;\n  return Ok(ix);\n};\nconst makeUnknown /*                 */ = makeIx(UNKNOWN);\nconst makeScript /*                  */ = makeIx(SCRIPT);\nconst makeTransaction /*             */ = makeIx(TRANSACTION);\nconst makeGetTransactionStatus /*    */ = makeIx(GET_TRANSACTION_STATUS);\nconst makeGetTransaction /*          */ = makeIx(GET_TRANSACTION);\nconst makeGetAccount /*              */ = makeIx(GET_ACCOUNT);\nconst makeGetEvents /*               */ = makeIx(GET_EVENTS);\nconst makePing /*                    */ = makeIx(PING);\nconst makeGetBlock /*                */ = makeIx(GET_BLOCK);\nconst makeGetBlockHeader /*          */ = makeIx(GET_BLOCK_HEADER);\nconst makeGetCollection /*           */ = makeIx(GET_COLLECTION);\nconst makeGetNetworkParameters /*    */ = makeIx(GET_NETWORK_PARAMETERS);\nconst is = wat => ix => ix.tag === wat;\nconst isUnknown /*                 */ = is(UNKNOWN);\nconst isScript /*                  */ = is(SCRIPT);\nconst isTransaction /*             */ = is(TRANSACTION);\nconst isGetTransactionStatus /*    */ = is(GET_TRANSACTION_STATUS);\nconst isGetTransaction /*          */ = is(GET_TRANSACTION);\nconst isGetAccount /*              */ = is(GET_ACCOUNT);\nconst isGetEvents /*               */ = is(GET_EVENTS);\nconst isPing /*                    */ = is(PING);\nconst isGetBlock /*                */ = is(GET_BLOCK);\nconst isGetBlockHeader /*          */ = is(GET_BLOCK_HEADER);\nconst isGetCollection /*           */ = is(GET_COLLECTION);\nconst isGetNetworkParameters /*    */ = is(GET_NETWORK_PARAMETERS);\nconst isOk /*  */ = ix => ix.status === OK;\nconst isBad /* */ = ix => ix.status === BAD;\nconst why /*   */ = ix => ix.reason;\nconst isAccount /*  */ = account => account.kind === ACCOUNT;\nconst isParam /*    */ = param => param.kind === PARAM;\nconst isArgument /* */ = argument => argument.kind === ARGUMENT;\nconst hardMode = ix => {\n  for (let key of Object.keys(ix)) {\n    if (!KEYS.has(key)) throw new Error(`\"${key}\" is an invalid root level Interaction property.`);\n  }\n  return ix;\n};\nconst recPipe = async function (ix) {\n  let fns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  try {\n    ix = hardMode(await ix);\n    if (isBad(ix)) throw new Error(`Interaction Error: ${ix.reason}`);\n    if (!fns.length) return ix;\n    const [hd, ...rest] = fns;\n    const cur = await hd;\n    if (isFn$3(cur)) return recPipe(cur(ix), rest);\n    if (isNull(cur) || !cur) return recPipe(ix, rest);\n    if (isInteraction(cur)) return recPipe(cur, rest);\n    throw new Error(\"Invalid Interaction Composition\");\n  } catch (e) {\n    throw e;\n  }\n};\nconst pipe = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  const [arg1, arg2] = args;\n  if (isArray$1(arg1) && arg2 == null) return d => pipe(d, arg1);\n  return recPipe(arg1, arg2);\n};\nconst identity$1 = v => v;\nconst get = (ix, key, fallback) => {\n  return ix.assigns[key] == null ? fallback : ix.assigns[key];\n};\nconst put = (key, value) => ix => {\n  ix.assigns[key] = value;\n  return Ok(ix);\n};\nconst update = function (key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity$1;\n  return ix => {\n    ix.assigns[key] = fn(ix.assigns[key], ix);\n    return Ok(ix);\n  };\n};\nconst destroy = key => ix => {\n  delete ix.assigns[key];\n  return Ok(ix);\n};\n\nvar ixModule = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  UNKNOWN: UNKNOWN,\n  SCRIPT: SCRIPT,\n  TRANSACTION: TRANSACTION,\n  GET_TRANSACTION_STATUS: GET_TRANSACTION_STATUS,\n  GET_ACCOUNT: GET_ACCOUNT,\n  GET_EVENTS: GET_EVENTS,\n  PING: PING,\n  GET_TRANSACTION: GET_TRANSACTION,\n  GET_BLOCK: GET_BLOCK,\n  GET_BLOCK_HEADER: GET_BLOCK_HEADER,\n  GET_COLLECTION: GET_COLLECTION,\n  GET_NETWORK_PARAMETERS: GET_NETWORK_PARAMETERS,\n  BAD: BAD,\n  OK: OK,\n  ACCOUNT: ACCOUNT,\n  PARAM: PARAM,\n  ARGUMENT: ARGUMENT,\n  AUTHORIZER: AUTHORIZER,\n  PAYER: PAYER,\n  PROPOSER: PROPOSER,\n  interaction: interaction,\n  uuid: uuid,\n  isNumber: isNumber$1,\n  isArray: isArray$1,\n  isObj: isObj,\n  isNull: isNull,\n  isFn: isFn$3,\n  isInteraction: isInteraction,\n  Ok: Ok,\n  Bad: Bad,\n  prepAccount: prepAccount,\n  makeArgument: makeArgument,\n  makeUnknown: makeUnknown,\n  makeScript: makeScript,\n  makeTransaction: makeTransaction,\n  makeGetTransactionStatus: makeGetTransactionStatus,\n  makeGetTransaction: makeGetTransaction,\n  makeGetAccount: makeGetAccount,\n  makeGetEvents: makeGetEvents,\n  makePing: makePing,\n  makeGetBlock: makeGetBlock,\n  makeGetBlockHeader: makeGetBlockHeader,\n  makeGetCollection: makeGetCollection,\n  makeGetNetworkParameters: makeGetNetworkParameters,\n  isUnknown: isUnknown,\n  isScript: isScript,\n  isTransaction: isTransaction,\n  isGetTransactionStatus: isGetTransactionStatus,\n  isGetTransaction: isGetTransaction,\n  isGetAccount: isGetAccount,\n  isGetEvents: isGetEvents,\n  isPing: isPing,\n  isGetBlock: isGetBlock,\n  isGetBlockHeader: isGetBlockHeader,\n  isGetCollection: isGetCollection,\n  isGetNetworkParameters: isGetNetworkParameters,\n  isOk: isOk,\n  isBad: isBad,\n  why: why,\n  isAccount: isAccount,\n  isParam: isParam,\n  isArgument: isArgument,\n  pipe: pipe,\n  get: get,\n  put: put,\n  update: update,\n  destroy: destroy\n});\n\nfunction build() {\n  let fns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return pipe(interaction(), fns);\n}\n\nconst DEFAULT_RESPONSE = `{\n    \"tag\":null,\n    \"transaction\":null,\n    \"transactionStatus\":null,\n    \"transactionId\":null,\n    \"encodedData\":null,\n    \"events\":null,\n    \"account\":null,\n    \"block\":null,\n    \"blockHeader\":null,\n    \"latestBlock\":null,\n    \"collection\":null,\n    \"networkParameters\":null\n}`;\nconst response = () => JSON.parse(DEFAULT_RESPONSE);\n\n/**\n * @description - A builder function that returns the interaction to get the latest block\n * @param {boolean} [isSealed] - Whether or not the block should be sealed\n * @returns {Function} - An interaction object\n */\nfunction getBlock() {\n  let isSealed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return pipe([makeGetBlock, ix => {\n    ix.block.isSealed = isSealed;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description - A builder function that returns the interaction to get an account by address\n * @param {string} addr - The address of the account to getq\n * @returns {Function} - An interaction object\n */\nfunction getAccount(addr) {\n  return pipe([makeGetAccount, ix => {\n    ix.account.addr = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(addr);\n    return Ok(ix);\n  }]);\n}\n\nconst latestBlockDeprecationNotice = () => {\n  _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n    pkg: \"@onflow/decode\",\n    subject: \"Operating upon data of the latestBlock field of the response object\",\n    transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/decode/WARNINGS.md#0001-Deprecating-latestBlock-field\"\n  });\n};\nconst decodeImplicit = async i => i;\nconst decodeVoid = async () => null;\nconst decodeType = async type => {\n  return type.staticType;\n};\nconst decodePath = async path => {\n  return {\n    domain: path.domain,\n    identifier: path.identifier\n  };\n};\nconst decodeCapability = async cap => {\n  return {\n    path: cap.path,\n    address: cap.address,\n    borrowType: cap.borrowType\n  };\n};\nconst decodeOptional = async (optional, decoders, stack) => optional ? await recurseDecode(optional, decoders, stack) : null;\nconst decodeReference = async v => ({\n  address: v.address,\n  type: v.type\n});\nconst decodeArray = async (array, decoders, stack) => await Promise.all(array.map(v => new Promise(async res => res(await recurseDecode(v, decoders, [...stack, v.type])))));\nconst decodeDictionary = async (dictionary, decoders, stack) => await dictionary.reduce(async (acc, v) => {\n  acc = await acc;\n  acc[await recurseDecode(v.key, decoders, [...stack, v.key])] = await recurseDecode(v.value, decoders, [...stack, v.key]);\n  return acc;\n}, Promise.resolve({}));\nconst decodeComposite = async (composite, decoders, stack) => {\n  const decoded = await composite.fields.reduce(async (acc, v) => {\n    acc = await acc;\n    acc[v.name] = await recurseDecode(v.value, decoders, [...stack, v.name]);\n    return acc;\n  }, Promise.resolve({}));\n  const decoder = composite.id && decoderLookup(decoders, composite.id);\n  return decoder ? await decoder(decoded) : decoded;\n};\nconst defaultDecoders = {\n  UInt: decodeImplicit,\n  Int: decodeImplicit,\n  UInt8: decodeImplicit,\n  Int8: decodeImplicit,\n  UInt16: decodeImplicit,\n  Int16: decodeImplicit,\n  UInt32: decodeImplicit,\n  Int32: decodeImplicit,\n  UInt64: decodeImplicit,\n  Int64: decodeImplicit,\n  UInt128: decodeImplicit,\n  Int128: decodeImplicit,\n  UInt256: decodeImplicit,\n  Int256: decodeImplicit,\n  Word8: decodeImplicit,\n  Word16: decodeImplicit,\n  Word32: decodeImplicit,\n  Word64: decodeImplicit,\n  UFix64: decodeImplicit,\n  Fix64: decodeImplicit,\n  String: decodeImplicit,\n  Character: decodeImplicit,\n  Bool: decodeImplicit,\n  Address: decodeImplicit,\n  Void: decodeVoid,\n  Optional: decodeOptional,\n  Reference: decodeReference,\n  Array: decodeArray,\n  Dictionary: decodeDictionary,\n  Event: decodeComposite,\n  Resource: decodeComposite,\n  Struct: decodeComposite,\n  Enum: decodeComposite,\n  Type: decodeType,\n  Path: decodePath,\n  Capability: decodeCapability\n};\nconst decoderLookup = (decoders, lookup) => {\n  const found = Object.keys(decoders).find(decoder => {\n    if (/^\\/.*\\/$/.test(decoder)) {\n      const reg = new RegExp(decoder.substring(1, decoder.length - 1));\n      return reg.test(lookup);\n    }\n    return decoder === lookup;\n  });\n  return lookup && found && decoders[found];\n};\nconst recurseDecode = async (decodeInstructions, decoders, stack) => {\n  let decoder = decoderLookup(decoders, decodeInstructions.type);\n  if (!decoder) throw new Error(`Undefined Decoder Error: ${decodeInstructions.type}@${stack.join(\".\")}`);\n  return await decoder(decodeInstructions.value, decoders, stack);\n};\n\n/**\n * @description - Decodes a response from Flow into JSON\n * @param {*} decodeInstructions - The response object from Flow\n * @param {object} customDecoders - An object of custom decoders\n * @param {Array<*>} stack - The stack of the current decoding\n * @returns {Promise<*>} - The decoded response\n */\nconst decode$1 = async function (decodeInstructions) {\n  let customDecoders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let stack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  // Filter out all default decoders which are overridden by a custom decoder regex\n  const filteredDecoders = Object.keys(defaultDecoders).filter(decoder => !Object.keys(customDecoders).find(customDecoder => new RegExp(customDecoder).test(decoder))).reduce((decoders, decoderKey) => {\n    decoders[decoderKey] = defaultDecoders[decoderKey];\n    return decoders;\n  }, customDecoders);\n  const decoders = {\n    ...filteredDecoders,\n    ...customDecoders\n  };\n  return recurseDecode(decodeInstructions, decoders, stack);\n};\nconst decodeResponse = async function (response) {\n  let customDecoders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (response.encodedData) {\n    return decode$1(response.encodedData, customDecoders);\n  } else if (response.transactionStatus) {\n    return {\n      ...response.transactionStatus,\n      events: await Promise.all(response.transactionStatus.events.map(async function decodeEvents(e) {\n        return {\n          type: e.type,\n          transactionId: e.transactionId,\n          transactionIndex: e.transactionIndex,\n          eventIndex: e.eventIndex,\n          data: await decode$1(e.payload, customDecoders)\n        };\n      }))\n    };\n  } else if (response.transaction) {\n    return response.transaction;\n  } else if (response.events) {\n    return await Promise.all(response.events.map(async function decodeEvents(e) {\n      return {\n        blockId: e.blockId,\n        blockHeight: e.blockHeight,\n        blockTimestamp: e.blockTimestamp,\n        type: e.type,\n        transactionId: e.transactionId,\n        transactionIndex: e.transactionIndex,\n        eventIndex: e.eventIndex,\n        data: await decode$1(e.payload, customDecoders)\n      };\n    }));\n  } else if (response.account) {\n    return response.account;\n  } else if (response.block) {\n    return response.block;\n  } else if (response.blockHeader) {\n    return response.blockHeader;\n  } else if (response.latestBlock) {\n    latestBlockDeprecationNotice();\n    return response.latestBlock;\n  } else if (response.transactionId) {\n    return response.transactionId;\n  } else if (response.collection) {\n    return response.collection;\n  } else if (response.networkParameters) {\n    const chainIdMap = {\n      \"flow-testnet\": \"testnet\",\n      \"flow-mainnet\": \"mainnet\",\n      \"flow-emulator\": \"local\"\n    };\n    return {\n      chainId: chainIdMap[response.networkParameters.chainId]\n    };\n  }\n  return null;\n};\n\nconst isFn$2 = v => typeof v === \"function\";\nconst isString$1 = v => typeof v === \"string\";\nconst oldIdentifierPatternFn = () => /\\b(0x\\w+)\\b/g;\nfunction isOldIdentifierSyntax(cadence) {\n  return oldIdentifierPatternFn().test(cadence);\n}\nconst newIdentifierPatternFn = () => /import\\s+\"(\\w+)\"/g;\nfunction isNewIdentifierSyntax(cadence) {\n  return newIdentifierPatternFn().test(cadence);\n}\nfunction getContractIdentifierSyntaxMatches(cadence) {\n  return cadence.matchAll(newIdentifierPatternFn());\n}\nasync function resolveCadence(ix) {\n  if (!isTransaction(ix) && !isScript(ix)) return ix;\n  var cadence = get(ix, \"ix.cadence\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(isFn$2(cadence) || isString$1(cadence), \"Cadence needs to be a function or a string.\");\n  if (isFn$2(cadence)) cadence = await cadence({});\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(isString$1(cadence), \"Cadence needs to be a string at this point.\");\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!isOldIdentifierSyntax(cadence) || !isNewIdentifierSyntax(cadence), \"Both account identifier and contract identifier syntax not simultaneously supported.\");\n  if (isOldIdentifierSyntax(cadence)) {\n    cadence = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_2__.config)().where(/^0x/).then(d => Object.entries(d).reduce((cadence, _ref) => {\n      let [key, value] = _ref;\n      const regex = new RegExp(\"(\\\\b\" + key + \"\\\\b)\", \"g\");\n      return cadence.replace(regex, value);\n    }, cadence));\n  }\n  if (isNewIdentifierSyntax(cadence)) {\n    for (const [fullMatch, contractName] of getContractIdentifierSyntaxMatches(cadence)) {\n      const address = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_2__.config)().get(`system.contracts.${contractName}`);\n      if (address) {\n        cadence = cadence.replace(fullMatch, `import ${contractName} from ${(0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(address)}`);\n      } else {\n        _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log({\n          title: \"Contract Placeholder not found\",\n          message: `Cannot find a value for contract placeholder ${contractName}. Please add to your flow.json or explicitly add it to the config 'contracts.*' namespace.`,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.LEVELS.warn\n        });\n      }\n    }\n  }\n\n  // We need to move this over in any case.\n  ix.message.cadence = cadence;\n  return ix;\n}\n\nconst isFn$1 = v => typeof v === \"function\";\nfunction cast(arg) {\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(typeof arg.xform != null, `No type specified for argument: ${arg.value}`);\n  if (isFn$1(arg.xform)) return arg.xform(arg.value);\n  if (isFn$1(arg.xform.asArgument)) return arg.xform.asArgument(arg.value);\n\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(false, `Invalid Argument`, arg);\n}\nasync function handleArgResolution(arg) {\n  let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(depth > 0, `Argument Resolve Recursion Limit Exceeded for Arg: ${arg.tempId}`);\n  if (isFn$1(arg.resolveArgument)) {\n    const resolvedArg = await arg.resolveArgument();\n    return handleArgResolution(resolvedArg, depth - 1);\n  } else {\n    return arg;\n  }\n}\nasync function resolveArguments(ix) {\n  if (isTransaction(ix) || isScript(ix)) {\n    for (let [id, arg] of Object.entries(ix.arguments)) {\n      const res = await handleArgResolution(arg);\n      ix.arguments[id].asArgument = cast(res);\n    }\n  }\n  return ix;\n}\n\nconst encodeTransactionPayload = tx => prependTransactionDomainTag(rlpEncode(preparePayload(tx)));\nconst encodeTransactionEnvelope = tx => prependTransactionDomainTag(rlpEncode(prepareEnvelope(tx)));\nconst encodeTxIdFromVoucher = voucher => sha3_256(rlpEncode(prepareVoucher(voucher)));\nconst rightPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(value.padEnd(pad * 2, 0), \"hex\");\nconst leftPaddedHexBuffer = (value, pad) => _onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(value.padStart(pad * 2, 0), \"hex\");\nconst TRANSACTION_DOMAIN_TAG = rightPaddedHexBuffer(_onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(\"FLOW-V0.0-transaction\").toString(\"hex\"), 32).toString(\"hex\");\nconst prependTransactionDomainTag = tx => TRANSACTION_DOMAIN_TAG + tx;\nconst addressBuffer = addr => leftPaddedHexBuffer(addr, 8);\nconst blockBuffer = block => leftPaddedHexBuffer(block, 32);\nconst argumentToString = arg => _onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(JSON.stringify(arg), \"utf8\");\nconst scriptBuffer = script => _onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(script, \"utf8\");\nconst signatureBuffer = signature => _onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(signature, \"hex\");\nconst rlpEncode = v => {\n  return (0,_onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.encode)(v).toString(\"hex\");\n};\nconst sha3_256 = msg => {\n  const sha = new sha3__WEBPACK_IMPORTED_MODULE_6__.SHA3(256);\n  sha.update(_onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(msg, \"hex\"));\n  return sha.digest().toString(\"hex\");\n};\nconst preparePayload = tx => {\n  validatePayload(tx);\n  return [scriptBuffer(tx.cadence), tx.arguments.map(argumentToString), blockBuffer(tx.refBlock), tx.computeLimit, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(tx.proposalKey.address)), tx.proposalKey.keyId, tx.proposalKey.sequenceNum, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(tx.payer)), tx.authorizers.map(authorizer => addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(authorizer)))];\n};\nconst prepareEnvelope = tx => {\n  validateEnvelope(tx);\n  return [preparePayload(tx), preparePayloadSignatures(tx)];\n};\nconst preparePayloadSignatures = tx => {\n  const signers = collectSigners(tx);\n  return tx.payloadSigs.map(sig => {\n    return {\n      signerIndex: signers.get(sig.address),\n      keyId: sig.keyId,\n      sig: sig.sig\n    };\n  }).sort((a, b) => {\n    if (a.signerIndex > b.signerIndex) return 1;\n    if (a.signerIndex < b.signerIndex) return -1;\n    if (a.keyId > b.keyId) return 1;\n    if (a.keyId < b.keyId) return -1;\n  }).map(sig => {\n    return [sig.signerIndex, sig.keyId, signatureBuffer(sig.sig)];\n  });\n};\nconst collectSigners = tx => {\n  const signers = new Map();\n  let i = 0;\n  const addSigner = addr => {\n    if (!signers.has(addr)) {\n      signers.set(addr, i);\n      i++;\n    }\n  };\n  addSigner(tx.proposalKey.address);\n  addSigner(tx.payer);\n  tx.authorizers.forEach(addSigner);\n  return signers;\n};\nconst prepareVoucher = voucher => {\n  validateVoucher(voucher);\n  const signers = collectSigners(voucher);\n  const prepareSigs = sigs => {\n    return sigs.map(_ref => {\n      let {\n        address,\n        keyId,\n        sig\n      } = _ref;\n      return {\n        signerIndex: signers.get(address),\n        keyId,\n        sig\n      };\n    }).sort((a, b) => {\n      if (a.signerIndex > b.signerIndex) return 1;\n      if (a.signerIndex < b.signerIndex) return -1;\n      if (a.keyId > b.keyId) return 1;\n      if (a.keyId < b.keyId) return -1;\n    }).map(sig => {\n      return [sig.signerIndex, sig.keyId, signatureBuffer(sig.sig)];\n    });\n  };\n  return [[scriptBuffer(voucher.cadence), voucher.arguments.map(argumentToString), blockBuffer(voucher.refBlock), voucher.computeLimit, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(voucher.proposalKey.address)), voucher.proposalKey.keyId, voucher.proposalKey.sequenceNum, addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(voucher.payer)), voucher.authorizers.map(authorizer => addressBuffer((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(authorizer)))], prepareSigs(voucher.payloadSigs), prepareSigs(voucher.envelopeSigs)];\n};\nconst validatePayload = tx => {\n  payloadFields.forEach(field => checkField(tx, field));\n  proposalKeyFields.forEach(field => checkField(tx.proposalKey, field, \"proposalKey\"));\n};\nconst validateEnvelope = tx => {\n  payloadSigsFields.forEach(field => checkField(tx, field));\n  tx.payloadSigs.forEach((sig, index) => {\n    payloadSigFields.forEach(field => checkField(sig, field, \"payloadSigs\", index));\n  });\n};\nconst validateVoucher = voucher => {\n  payloadFields.forEach(field => checkField(voucher, field));\n  proposalKeyFields.forEach(field => checkField(voucher.proposalKey, field, \"proposalKey\"));\n  payloadSigsFields.forEach(field => checkField(voucher, field));\n  voucher.payloadSigs.forEach((sig, index) => {\n    payloadSigFields.forEach(field => checkField(sig, field, \"payloadSigs\", index));\n  });\n  envelopeSigsFields.forEach(field => checkField(voucher, field));\n  voucher.envelopeSigs.forEach((sig, index) => {\n    envelopeSigFields.forEach(field => checkField(sig, field, \"envelopeSigs\", index));\n  });\n};\nconst isNumber = v => typeof v === \"number\";\nconst isString = v => typeof v === \"string\";\nconst isObject = v => v !== null && typeof v === \"object\";\nconst isArray = v => isObject(v) && v instanceof Array;\nconst payloadFields = [{\n  name: \"cadence\",\n  check: isString\n}, {\n  name: \"arguments\",\n  check: isArray\n}, {\n  name: \"refBlock\",\n  check: isString,\n  defaultVal: \"0\"\n}, {\n  name: \"computeLimit\",\n  check: isNumber\n}, {\n  name: \"proposalKey\",\n  check: isObject\n}, {\n  name: \"payer\",\n  check: isString\n}, {\n  name: \"authorizers\",\n  check: isArray\n}];\nconst proposalKeyFields = [{\n  name: \"address\",\n  check: isString\n}, {\n  name: \"keyId\",\n  check: isNumber\n}, {\n  name: \"sequenceNum\",\n  check: isNumber\n}];\nconst payloadSigsFields = [{\n  name: \"payloadSigs\",\n  check: isArray\n}];\nconst payloadSigFields = [{\n  name: \"address\",\n  check: isString\n}, {\n  name: \"keyId\",\n  check: isNumber\n}, {\n  name: \"sig\",\n  check: isString\n}];\nconst envelopeSigsFields = [{\n  name: \"envelopeSigs\",\n  check: isArray\n}];\nconst envelopeSigFields = [{\n  name: \"address\",\n  check: isString\n}, {\n  name: \"keyId\",\n  check: isNumber\n}, {\n  name: \"sig\",\n  check: isString\n}];\nconst checkField = (obj, field, base, index) => {\n  const {\n    name,\n    check,\n    defaultVal\n  } = field;\n  if (obj[name] == null && defaultVal != null) obj[name] = defaultVal;\n  if (obj[name] == null) throw missingFieldError(name, base, index);\n  if (!check(obj[name])) throw invalidFieldError(name, base, index);\n};\nconst printFieldName = (field, base, index) => {\n  if (!!base) return index == null ? `${base}.${field}` : `${base}.${index}.${field}`;\n  return field;\n};\nconst missingFieldError = (field, base, index) => new Error(`Missing field ${printFieldName(field, base, index)}`);\nconst invalidFieldError = (field, base, index) => new Error(`Invalid field ${printFieldName(field, base, index)}`);\n\nfunction findInsideSigners(ix) {\n  // Inside Signers Are: (authorizers + proposer) - payer\n  let inside = new Set(ix.authorizations);\n  inside.add(ix.proposer);\n  if (Array.isArray(ix.payer)) {\n    ix.payer.forEach(p => inside.delete(p));\n  } else {\n    inside.delete(ix.payer);\n  }\n  return Array.from(inside);\n}\nfunction findOutsideSigners(ix) {\n  // Outside Signers Are: (payer)\n  let outside = new Set(Array.isArray(ix.payer) ? ix.payer : [ix.payer]);\n  return Array.from(outside);\n}\nconst createSignableVoucher = ix => {\n  const buildAuthorizers = () => {\n    const authorizations = ix.authorizations.map(cid => (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(ix.accounts[cid].addr)).reduce((prev, current) => {\n      return prev.find(item => item === current) ? prev : [...prev, current];\n    }, []);\n    return authorizations[0] ? authorizations : [];\n  };\n  const buildInsideSigners = () => findInsideSigners(ix).map(id => ({\n    address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(ix.accounts[id].addr),\n    keyId: ix.accounts[id].keyId,\n    sig: ix.accounts[id].signature\n  }));\n  const buildOutsideSigners = () => findOutsideSigners(ix).map(id => ({\n    address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(ix.accounts[id].addr),\n    keyId: ix.accounts[id].keyId,\n    sig: ix.accounts[id].signature\n  }));\n  return {\n    cadence: ix.message.cadence,\n    refBlock: ix.message.refBlock || null,\n    computeLimit: ix.message.computeLimit,\n    arguments: ix.message.arguments.map(id => ix.arguments[id].asArgument),\n    proposalKey: {\n      address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(ix.accounts[ix.proposer].addr),\n      keyId: ix.accounts[ix.proposer].keyId,\n      sequenceNum: ix.accounts[ix.proposer].sequenceNum\n    },\n    payer: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr),\n    authorizers: buildAuthorizers(),\n    payloadSigs: buildInsideSigners(),\n    envelopeSigs: buildOutsideSigners()\n  };\n};\nconst voucherToTxId = voucher => {\n  return encodeTxIdFromVoucher(voucher);\n};\n\nconst idof$1 = acct => `${(0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(acct.addr)}-${acct.keyId}`;\nconst isFn = v => typeof v === \"function\";\nfunction buildPreSignable(acct, ix) {\n  try {\n    return {\n      f_type: \"PreSignable\",\n      f_vsn: \"1.0.1\",\n      roles: acct.role,\n      cadence: ix.message.cadence,\n      args: ix.message.arguments.map(d => ix.arguments[d].asArgument),\n      data: {},\n      interaction: ix,\n      voucher: createSignableVoucher(ix)\n    };\n  } catch (error) {\n    console.error(\"buildPreSignable\", error);\n    throw error;\n  }\n}\nasync function collectAccounts(ix, accounts, last) {\n  let depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(depth, \"Account Resolve Recursion Limit Exceeded\", {\n    ix,\n    accounts\n  });\n  let authorizations = [];\n  for (let ax of accounts) {\n    let resolve = ax.resolve;\n    ax.resolve = null;\n    var old = last || ax;\n    if (isFn(resolve)) ax = await resolve(ax, buildPreSignable(ax, ix));\n    if (Array.isArray(ax)) {\n      await collectAccounts(ix, ax, old, depth - 1);\n    } else {\n      if (ax.addr) {\n        ax.addr = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(ax.addr);\n      }\n      if (ax.addr != null && ax.keyId != null) {\n        ax.tempId = idof$1(ax);\n      }\n      ix.accounts[ax.tempId] = ix.accounts[ax.tempId] || ax;\n      ix.accounts[ax.tempId].role.proposer = ix.accounts[ax.tempId].role.proposer || ax.role.proposer;\n      ix.accounts[ax.tempId].role.payer = ix.accounts[ax.tempId].role.payer || ax.role.payer;\n      ix.accounts[ax.tempId].role.authorizer = ix.accounts[ax.tempId].role.authorizer || ax.role.authorizer;\n      if (ix.accounts[ax.tempId].role.proposer && ix.proposer === old.tempId) {\n        ix.proposer = ax.tempId;\n      }\n      if (ix.accounts[ax.tempId].role.payer) {\n        if (Array.isArray(ix.payer)) {\n          ix.payer = Array.from(new Set([...ix.payer, ax.tempId].map(d => d === old.tempId ? ax.tempId : d)));\n        } else {\n          ix.payer = Array.from(new Set([ix.payer, ax.tempId].map(d => d === old.tempId ? ax.tempId : d)));\n        }\n        if (ix.payer.length > 1) {\n          // remove payer dups based on addr and keyId\n          const dupList = [];\n          const payerAccts = [];\n          ix.payer = ix.payer.reduce((g, tempId) => {\n            const {\n              addr\n            } = ix.accounts[tempId];\n            const key = idof$1(ix.accounts[tempId]);\n            payerAccts.push(addr);\n            if (dupList.includes(key)) return g;\n            dupList.push(key);\n            return [...g, tempId];\n          }, []);\n          const multiAccts = Array.from(new Set(payerAccts));\n          if (multiAccts.length > 1) {\n            throw new Error(\"Payer can not be different accounts\");\n          }\n        }\n      }\n      if (ix.accounts[ax.tempId].role.authorizer) {\n        if (last) {\n          // do group replacement\n          authorizations = Array.from(new Set([...authorizations, ax.tempId]));\n        } else {\n          // do 1-1 replacement\n          ix.authorizations = ix.authorizations.map(d => d === old.tempId ? ax.tempId : d);\n        }\n      }\n    }\n    if (old.tempId != ax.tempId) delete ix.accounts[old.tempId];\n  }\n  if (last) {\n    // complete (flatmap) group replacement\n    ix.authorizations = ix.authorizations.map(d => d === last.tempId ? authorizations : d).reduce((prev, curr) => Array.isArray(curr) ? [...prev, ...curr] : [...prev, curr], []);\n  }\n}\nasync function resolveAccounts(ix) {\n  if (isTransaction(ix)) {\n    if (!Array.isArray(ix.payer)) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n        pkg: \"FCL\",\n        subject: '\"ix.payer\" must be an array. Support for ix.payer as a singular',\n        message: \"See changelog for more info.\"\n      });\n    }\n    try {\n      await collectAccounts(ix, Object.values(ix.accounts));\n      await collectAccounts(ix, Object.values(ix.accounts));\n    } catch (error) {\n      console.error(\"=== SAD PANDA ===\\n\\n\", error, \"\\n\\n=== SAD PANDA ===\");\n      throw error;\n    }\n  }\n  return ix;\n}\n\nasync function resolveSignatures(ix) {\n  if (isTransaction(ix)) {\n    try {\n      let insideSigners = findInsideSigners(ix);\n      const insidePayload = encodeTransactionPayload(prepForEncoding(ix));\n      await Promise.all(insideSigners.map(fetchSignature(ix, insidePayload)));\n      let outsideSigners = findOutsideSigners(ix);\n      const outsidePayload = encodeTransactionEnvelope({\n        ...prepForEncoding(ix),\n        payloadSigs: insideSigners.map(id => ({\n          address: ix.accounts[id].addr,\n          keyId: ix.accounts[id].keyId,\n          sig: ix.accounts[id].signature\n        }))\n      });\n      await Promise.all(outsideSigners.map(fetchSignature(ix, outsidePayload)));\n    } catch (error) {\n      console.error(\"Signatures\", error, {\n        ix\n      });\n      throw error;\n    }\n  }\n  return ix;\n}\nfunction fetchSignature(ix, payload) {\n  return async function innerFetchSignature(id) {\n    const acct = ix.accounts[id];\n    if (acct.signature != null) return;\n    const {\n      signature\n    } = await acct.signingFunction(buildSignable(acct, payload, ix));\n    ix.accounts[id].signature = signature;\n  };\n}\nfunction buildSignable(acct, message, ix) {\n  try {\n    return {\n      f_type: \"Signable\",\n      f_vsn: \"1.0.1\",\n      message,\n      addr: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(acct.addr),\n      keyId: acct.keyId,\n      roles: acct.role,\n      cadence: ix.message.cadence,\n      args: ix.message.arguments.map(d => ix.arguments[d].asArgument),\n      data: {},\n      interaction: ix,\n      voucher: createSignableVoucher(ix)\n    };\n  } catch (error) {\n    console.error(\"buildSignable\", error);\n    throw error;\n  }\n}\nfunction prepForEncoding(ix) {\n  const payerAddress = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)((Array.isArray(ix.payer) ? ix.accounts[ix.payer[0]] : ix.accounts[ix.payer]).addr);\n  return {\n    cadence: ix.message.cadence,\n    refBlock: ix.message.refBlock || null,\n    computeLimit: ix.message.computeLimit,\n    arguments: ix.message.arguments.map(id => ix.arguments[id].asArgument),\n    proposalKey: {\n      address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(ix.accounts[ix.proposer].addr),\n      keyId: ix.accounts[ix.proposer].keyId,\n      sequenceNum: ix.accounts[ix.proposer].sequenceNum\n    },\n    payer: payerAddress,\n    authorizers: ix.authorizations.map(cid => (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(ix.accounts[cid].addr)).reduce((prev, current) => {\n      return prev.find(item => item === current) ? prev : [...prev, current];\n    }, [])\n  };\n}\n\nasync function resolveValidators(ix) {\n  const validators = get(ix, \"ix.validators\", []);\n  return pipe(ix, validators.map(cb => ix => cb(ix, {\n    Ok,\n    Bad\n  })));\n}\n\nasync function resolveFinalNormalization(ix) {\n  for (let key of Object.keys(ix.accounts)) {\n    ix.accounts[key].addr = (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(ix.accounts[key].addr);\n  }\n  return ix;\n}\n\nasync function resolveVoucherIntercept(ix) {\n  const fn = get(ix, \"ix.voucher-intercept\");\n  if (isFn$3(fn)) {\n    await fn(createSignableVoucher(ix));\n  }\n  return ix;\n}\n\nconst DEFAULT_COMPUTE_LIMIT = 100;\nasync function resolveComputeLimit(ix) {\n  if (isTransaction(ix)) {\n    ix.message.computeLimit = ix.message.computeLimit || (await _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config.get(\"fcl.limit\"));\n    if (!ix.message.computeLimit) {\n      _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n        pkg: \"FCL/SDK\",\n        subject: \"The built-in default compute limit (DEFAULT_COMPUTE_LIMIT=10)\",\n        transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0009-deprecate-default-compute-limit\"\n      });\n      ix.message.computeLimit = DEFAULT_COMPUTE_LIMIT;\n    }\n  }\n  return ix;\n}\n\nconst noop = v => v;\nconst debug = function (key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  return async ix => {\n    const accts = ix => [\"\\nAccounts:\", {\n      proposer: ix.proposer,\n      authorizations: ix.authorizations,\n      payer: ix.payer\n    }, \"\\n\\nDetails:\", ix.accounts].filter(Boolean);\n    const log = function () {\n      for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n        msg[_key] = arguments[_key];\n      }\n      console.log(`debug[${key}] ---\\n`, ...msg, \"\\n\\n\\n---\");\n    };\n    if (await _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config.get(`debug.${key}`)) await fn(ix, log, accts);\n    return ix;\n  };\n};\nconst resolve = pipe([resolveCadence, debug(\"cadence\", (ix, log) => log(ix.message.cadence)), resolveComputeLimit, debug(\"compute limit\", (ix, log) => log(ix.message.computeLimit)), resolveArguments, debug(\"arguments\", (ix, log) => log(ix.message.arguments, ix.message)), resolveAccounts, debug(\"accounts\", (ix, log, accts) => log(...accts(ix))), /* special */execFetchRef, /* special */execFetchSequenceNumber, resolveSignatures, debug(\"signatures\", (ix, log, accts) => log(...accts(ix))), resolveFinalNormalization, resolveValidators, resolveVoucherIntercept, debug(\"resolved\", (ix, log) => log(ix))]);\nasync function execFetchRef(ix) {\n  if (isTransaction(ix) && ix.message.refBlock == null) {\n    const node = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_2__.config)().get(\"accessNode.api\");\n    const sendFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config.first([\"sdk.transport\", \"sdk.send\"], _onflow_transport_http__WEBPACK_IMPORTED_MODULE_4__.send);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n    ix.message.refBlock = (await sendFn(build([getBlock()]), {\n      config: _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config,\n      response,\n      Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer,\n      ix: ixModule\n    }, {\n      node\n    }).then(decodeResponse)).id;\n  }\n  return ix;\n}\nasync function execFetchSequenceNumber(ix) {\n  if (isTransaction(ix)) {\n    var acct = Object.values(ix.accounts).find(a => a.role.proposer);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(acct, `Transactions require a proposer`);\n    if (acct.sequenceNum == null) {\n      const node = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_2__.config)().get(\"accessNode.api\");\n      const sendFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config.first([\"sdk.transport\", \"sdk.send\"], _onflow_transport_http__WEBPACK_IMPORTED_MODULE_4__.send);\n      (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n      ix.accounts[acct.tempId].sequenceNum = await sendFn(await build([getAccount(acct.addr)]), {\n        config: _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config,\n        response,\n        Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer,\n        ix: ixModule\n      }, {\n        node\n      }).then(decodeResponse).then(acct => acct.keys).then(keys => keys.find(key => key.index === acct.keyId)).then(key => key.sequenceNumber);\n    }\n  }\n  return ix;\n}\n\nfunction invariant() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (args.length > 1) {\n    const [predicate, message] = args;\n    return invariant((ix, _ref) => {\n      let {\n        Ok,\n        Bad\n      } = _ref;\n      return predicate ? Ok(ix) : Bad(ix, message);\n    });\n  }\n  const [fn] = args;\n  return ix => fn(ix, {\n    Ok,\n    Bad\n  });\n}\n\n/**\n * @description - Sends arbitrary scripts, transactions, and requests to Flow\n * @param {Array.<Function>} args - An array of functions that take interaction and return interaction\n * @param {object} opts - Optional parameters\n * @returns {Promise<*>} - A promise that resolves to a response\n */\nconst send = async function () {\n  let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const sendFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config.first([\"sdk.transport\", \"sdk.send\"], opts.send || _onflow_transport_http__WEBPACK_IMPORTED_MODULE_4__.send);\n  invariant(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n  const resolveFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config.first([\"sdk.resolve\"], opts.resolve || resolve);\n  opts.node = opts.node || (await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_2__.config)().get(\"accessNode.api\"));\n  if (Array.isArray(args)) args = pipe(interaction(), args);\n  return sendFn(await resolveFn(args), {\n    config: _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config,\n    response,\n    ix: ixModule,\n    Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer\n  }, opts);\n};\n\nasync function decode(response) {\n  const decodersFromConfig = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_2__.config)().where(/^decoder\\./);\n  const decoders = Object.entries(decodersFromConfig).map(_ref => {\n    let [pattern, xform] = _ref;\n    pattern = `/${pattern.replace(/^decoder\\./, \"\")}$/`;\n    return [pattern, xform];\n  });\n  return decodeResponse(response, Object.fromEntries(decoders));\n}\n\nconst findPayloadSigners = voucher => {\n  // Payload Signers Are: (authorizers + proposer) - payer\n  let payload = new Set(voucher.authorizers);\n  payload.add(voucher.proposalKey.address);\n  payload.delete(voucher.payer);\n  return Array.from(payload).map(_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix);\n};\nconst findEnvelopeSigners = voucher => {\n  // Envelope Signers Are: (payer)\n  let envelope = new Set([voucher.payer]);\n  return Array.from(envelope).map(_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix);\n};\nclass UnableToDetermineMessageEncodingTypeForSignerAddress extends Error {\n  constructor(signerAddress) {\n    const msg = `\n        Encode Message From Signable Error: Unable to determine message encoding for signer addresss: ${signerAddress}. \n        Please ensure the address: ${signerAddress} is intended to sign the given transaction as specified by the transaction signable.\n      `.trim();\n    super(msg);\n    this.name = \"Unable To Determine Message Encoding For Signer Addresss\";\n  }\n}\nconst encodeMessageFromSignable = (signable, signerAddress) => {\n  let payloadSigners = findPayloadSigners(signable.voucher);\n  let envelopeSigners = findEnvelopeSigners(signable.voucher);\n  const isPayloadSigner = payloadSigners.includes((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(signerAddress));\n  const isEnvelopeSigner = envelopeSigners.includes((0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(signerAddress));\n  if (!isPayloadSigner && !isEnvelopeSigner) {\n    throw new UnableToDetermineMessageEncodingTypeForSignerAddress(signerAddress);\n  }\n  const message = {\n    cadence: signable.voucher.cadence,\n    refBlock: signable.voucher.refBlock,\n    computeLimit: signable.voucher.computeLimit,\n    arguments: signable.voucher.arguments,\n    proposalKey: {\n      ...signable.voucher.proposalKey,\n      address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(signable.voucher.proposalKey.address)\n    },\n    payer: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(signable.voucher.payer),\n    authorizers: signable.voucher.authorizers.map(_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix),\n    payloadSigs: signable.voucher.payloadSigs.map(ps => ({\n      ...ps,\n      address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.sansPrefix)(ps.address)\n    }))\n  };\n  return isPayloadSigner ? encodeTransactionPayload(message) : encodeTransactionEnvelope(message);\n};\n\nfunction validator(cb) {\n  return update(\"ix.validators\", validators => Array.isArray(validators) ? validators.push(cb) : [cb]);\n}\n\n/**\n * @description - A builder function that returns a partial interaction to a block at a specific height\n * @param {number} height - The height of the block to get\n * @returns {Function} - A partial interaction object\n */\nfunction atBlockHeight(height) {\n  return pipe([ix => {\n    ix.block.height = height;\n    return ix;\n  }, validator(ix => {\n    if (typeof ix.block.isSealed === \"boolean\") throw new Error(\"Unable to specify both block height and isSealed.\");\n    if (ix.block.id) throw new Error(\"Unable to specify both block height and block id.\");\n    return ix;\n  })]);\n}\n\nfunction atBlockId(id) {\n  return pipe([ix => {\n    ix.block.id = id;\n    return Ok(ix);\n  }, validator((ix, _ref) => {\n    let {\n      Ok,\n      Bad\n    } = _ref;\n    if (isGetAccount(ix)) return Bad(ix, \"Unable to specify a block id with a Get Account interaction.\");\n    if (typeof ix.block.isSealed === \"boolean\") return Bad(ix, \"Unable to specify both block id and isSealed.\");\n    if (ix.block.height) return Bad(ix, \"Unable to specify both block id and block height.\");\n    return Ok(ix);\n  })]);\n}\n\n/**\n * @typedef {import(\"@onflow/typedefs\").Account} Account\n */\n\n/**\n * @description  Returns the details of an account from their public address\n * @param {string} address - Address of the account\n * @param {object} [queryOptions] - Query parameters\n * @param {number} [queryOptions.height] - Block height to query\n * @param {string} [queryOptions.id] - Block ID to query\n * @param {object} [opts] - Optional parameters\n * @returns {Promise<Account>} - A promise that resolves to an account response\n */\nfunction account(address) {\n  let {\n    height,\n    id\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 ? arguments[2] : undefined;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!(id && height), `Method: account -- Cannot pass \"id\" and \"height\" simultaneously`);\n\n  // Get account by ID\n  if (id) return send([getAccount(address), atBlockId(id)], opts).then(decodeResponse);\n\n  // Get account by height\n  if (height) return send([getAccount(address), atBlockHeight(height)], opts).then(decodeResponse);\n  return send([getAccount(address)], opts).then(decodeResponse);\n}\n\n/**\n * @typedef {import(\"@onflow/typedefs\").Block} Block\n */\n\n/**\n * @description Returns the latest block (optionally sealed or not), by id, or by height\n * @param {object} [queryOptions] - Query parameters\n * @param {boolean} [queryOptions.sealed=false] - Whether to query for a sealed block\n * @param {number} [queryOptions.height] - Block height to query\n * @param {string} [queryOptions.id] - Block ID to query\n * @param {object} [opts] - Optional parameters\n * @returns {Promise<Block>} - A promise that resolves to a block response\n */\nfunction block() {\n  let {\n    sealed = false,\n    id,\n    height\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!(sealed && id || sealed && height), `Method: block -- Cannot pass \"sealed\" with \"id\" or \"height\"`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(!(id && height), `Method: block -- Cannot pass \"id\" and \"height\" simultaneously`);\n\n  // Get block by ID\n  if (id) return send([getBlock(), atBlockId(id)], opts).then(decodeResponse);\n\n  // Get block by height\n  if (height) return send([getBlock(), atBlockHeight(height)], opts).then(decodeResponse);\n\n  // Get latest block\n  return send([getBlock(sealed)], opts).then(decodeResponse);\n}\n\nfunction authorizations() {\n  let ax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return pipe(ax.map(authz => {\n    return prepAccount(authz, {\n      role: AUTHORIZER\n    });\n  }));\n}\nfunction authorization(addr, signingFunction, keyId, sequenceNum) {\n  return {\n    addr,\n    signingFunction,\n    keyId,\n    sequenceNum\n  };\n}\n\nfunction getEvents(eventType, start, end) {\n  if (typeof start !== \"undefined\" || typeof end !== \"undefined\") {\n    _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n      pkg: \"FCL/SDK\",\n      subject: \"Passing a start and end into getEvents\",\n      transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0005-deprecate-start-end-get-events-builder\"\n    });\n  }\n  return pipe([makeGetEvents, ix => {\n    ix.events.eventType = eventType;\n    ix.events.start = start;\n    ix.events.end = end;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description - A builder function that returns all instances of a particular event (by name) within a height range\n * NOTE:\n * - The block range provided must be from the current spork.\n * - The block range provided must be 250 blocks or lower per request.\n * @param {string} eventName - The name of the event to get\n * @param {number} fromBlockHeight - The height of the block to start looking for events (inclusive)\n * @param {number} toBlockHeight - The height of the block to stop looking for events (inclusive)\n * @returns {Function} - An interaction object\n */\nfunction getEventsAtBlockHeightRange(eventName, fromBlockHeight, toBlockHeight) {\n  return pipe([makeGetEvents, ix => {\n    ix.events.eventType = eventName;\n    ix.events.start = fromBlockHeight;\n    ix.events.end = toBlockHeight;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description - A builder function that returns all instances of a particular event (by name) within a set of blocks, specified by block ids\n * NOTE:\n * - The block range provided must be from the current spork.\n * @param {string} eventName - The name of the event to get\n * @param {number[]} blockIds - The ids of the blocks to look for events\n * @returns {Function} - An interaction object\n */\nfunction getEventsAtBlockIds(eventName) {\n  let blockIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return pipe([makeGetEvents, ix => {\n    ix.events.eventType = eventName;\n    ix.events.blockIds = blockIds;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description - A builder function that returns the interaction to get a block header\n * @param {boolean} [isSealed] - Whether or not the block should be sealed\n * @returns {Function} - An interaction object\n */\nfunction getBlockHeader() {\n  let isSealed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return pipe([makeGetBlockHeader, ix => {\n    ix.block.isSealed = isSealed;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description - A builder function that returns all a collection containing a list of transaction ids by its collection id\n * NOTE:\n * - The block range provided must be from the current spork. All events emitted during past sporks is current unavailable.\n * @param {string} [id] - The id of the collection to get\n * @returns {Function} - An interaction object\n */\nfunction getCollection() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return pipe([makeGetCollection, ix => {\n    ix.collection.id = id;\n    return ix;\n  }]);\n}\n\n/**\n * @description - A builder function that returns the status of transaction\n * NOTE: The transactionID provided must be from the current spork.\n * @param {string} transactionId - The id of the transaction to get status\n * @returns {Function} - An interaction object\n */\nfunction getTransactionStatus(transactionId) {\n  return pipe([makeGetTransactionStatus, ix => {\n    ix.transaction.id = transactionId;\n    return Ok(ix);\n  }]);\n}\n\n/**\n * @description - A builder function that returns a transaction\n * NOTE: The transactionID provided must be from the current spork.\n * @param {string} transactionId - The id of the transaction to get\n * @returns {Function} - An interaction object\n */\nfunction getTransaction(transactionId) {\n  return pipe([makeGetTransaction, ix => {\n    ix.transaction.id = transactionId;\n    return Ok(ix);\n  }]);\n}\n\nfunction getNetworkParameters() {\n  return pipe([makeGetNetworkParameters, ix => {\n    return Ok(ix);\n  }]);\n}\n\nfunction limit(computeLimit) {\n  return ix => {\n    ix.message.computeLimit = computeLimit;\n    return ix;\n  };\n}\n\n/**\n * @description - A utility builder to be used with other builders to pass in arguments with a value and supported type\n * @param {Array.<*>} ax - An array of arguments\n * @returns {Function} - An interaction object\n */\nfunction args() {\n  let ax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return pipe(ax.map(makeArgument));\n}\n\n/**\n * @description - A utility builder to be used with fcl.args[...] to create FCL supported arguments for interactions\n * @param {any} value - The value of the argument\n * @param {Function} xform - A function to transform the value\n * @returns {object} - An argument object\n */\nfunction arg(value, xform) {\n  return {\n    value,\n    xform\n  };\n}\n\nasync function proposer(authz) {\n  return prepAccount(authz, {\n    role: PROPOSER\n  });\n}\n\nasync function payer(authz) {\n  return prepAccount(authz, {\n    role: PAYER\n  });\n}\n\nfunction ping() {\n  return makePing;\n}\n\nfunction ref(refBlock) {\n  return pipe([ix => {\n    ix.message.refBlock = refBlock;\n    return Ok(ix);\n  }]);\n}\n\nfunction script() {\n  return pipe([makeScript, put(\"ix.cadence\", (0,_onflow_util_template__WEBPACK_IMPORTED_MODULE_7__.template)(...arguments))]);\n}\n\nconst DEFAULT_SCRIPT_ACCOUNTS = [];\nconst DEFUALT_REF = null;\n\n/**\n * @description - A template builder to use a Cadence transaction for an interaction\n * @param {...*} args - The arguments to pass\n * @returns {Function} - An interaction object\n */\nfunction transaction() {\n  return pipe([makeTransaction, put(\"ix.cadence\", (0,_onflow_util_template__WEBPACK_IMPORTED_MODULE_7__.template)(...arguments)), ix => {\n    ix.message.refBlock = ix.message.refBlock || DEFUALT_REF;\n    ix.authorizations = ix.authorizations || DEFAULT_SCRIPT_ACCOUNTS;\n    return Ok(ix);\n  }]);\n}\n\nfunction voucherIntercept(fn) {\n  return put(\"ix.voucher-intercept\", fn);\n}\n\nconst resolveProposerSequenceNumber = _ref => {\n  let {\n    node\n  } = _ref;\n  return async ix => {\n    if (!isTransaction(ix)) return Ok(ix);\n    if (ix.accounts[ix.proposer].sequenceNum) return Ok(ix);\n    const sendFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config.first([\"sdk.transport\", \"sdk.send\"], _onflow_transport_http__WEBPACK_IMPORTED_MODULE_4__.send);\n    (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n    const response$1 = await sendFn(await build([getAccount(ix.accounts[ix.proposer].addr)]), {\n      config: _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config,\n      response: response,\n      Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer,\n      ix: ixModule\n    }, {\n      node\n    });\n    const decoded = await decodeResponse(response$1);\n    ix.accounts[ix.proposer].sequenceNum = decoded.keys[ix.accounts[ix.proposer].keyId].sequenceNumber;\n    return Ok(ix);\n  };\n};\n\nasync function getRefId(opts) {\n  const node = await (0,_onflow_config__WEBPACK_IMPORTED_MODULE_2__.config)().get(\"accessNode.api\");\n  const sendFn = await _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config.first([\"sdk.transport\", \"sdk.send\"], _onflow_transport_http__WEBPACK_IMPORTED_MODULE_4__.send);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(sendFn, `Required value for sdk.transport is not defined in config. See: ${\"https://github.com/onflow/fcl-js/blob/master/packages/sdk/CHANGELOG.md#0057-alpha1----2022-01-21\"}`);\n  var ix;\n  ix = await pipe(interaction(), [getBlock()]);\n  ix = await sendFn(ix, {\n    config: _onflow_config__WEBPACK_IMPORTED_MODULE_2__.config,\n    response,\n    Buffer: _onflow_rlp__WEBPACK_IMPORTED_MODULE_3__.Buffer,\n    ix: ixModule\n  }, {\n    node\n  });\n  ix = await decodeResponse(ix);\n  return ix.id;\n}\nfunction resolveRefBlockId(opts) {\n  return async ix => {\n    if (!isTransaction(ix)) return Ok(ix);\n    if (ix.message.refBlock) return Ok(ix);\n    ix.message.refBlock = await getRefId();\n    return Ok(ix);\n  };\n}\n\nfunction mockAccountResponse(ix) {\n  let numberOfKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(ix.account, \"mockAccountResponse(ix) -- ix.account is missing\", ix);\n  // prettier-ignore\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_1__.invariant)(ix.account.addr, \"mockAccountResponse(ix) -- ix.account.addr is missing\", ix);\n  const address = ix.account.addr;\n  return {\n    account: {\n      addr: address,\n      keys: Array.from({\n        length: numberOfKeys\n      }, (_, i) => ({\n        index: i,\n        sequenceNumber: 42\n      }))\n    }\n  };\n}\nfunction mockGetBlockResponse(ix) {\n  return {\n    tag: \"GET_BLOCK\",\n    block: {\n      id: \"32\"\n    }\n  };\n}\nconst identity = v => v;\nfunction mockSend() {\n  let fallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : identity;\n  return async function execSend(ix) {\n    ix = await ix;\n    switch (true) {\n      case isGetAccount(ix):\n        return mockAccountResponse(ix);\n      case isGetBlock(ix):\n        return mockGetBlockResponse();\n      default:\n        return fallback(ix);\n    }\n  };\n}\n\nconst idof = acct => `${(0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_5__.withPrefix)(acct.addr)}-${acct.keyId}`;\nfunction sig(opts) {\n  return [\"SIGNATURE\", opts.addr, opts.keyId].join(\".\");\n}\nfunction authzFn() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (account) {\n    const acct = {\n      ...account,\n      ...opts,\n      signingFunction: opts.signingFunction || account.signingFunction || fallbackSigningFunction\n    };\n    return acct;\n    function fallbackSigningFunction(signable) {\n      return {\n        addr: acct.addr,\n        keyId: acct.keyId,\n        signature: sig(acct)\n      };\n    }\n  };\n}\nfunction authzResolve() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (account) {\n    const {\n      tempId,\n      ...rest\n    } = opts;\n    return {\n      ...account,\n      tempId: tempId || \"WITH_RESOLVE\",\n      resolve: authzFn(rest)\n    };\n  };\n}\nconst ROLE = {\n  proposer: false,\n  authorizer: false,\n  payer: false\n};\nfunction authzResolveMany() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (account) {\n    const tempId = opts.tempId || \"AUTHZ_RESOLVE_MANY\";\n    return {\n      ...account,\n      tempId,\n      resolve: () => [opts.proposer && authzFn(opts.proposer)({\n        role: {\n          ...ROLE,\n          proposer: true\n        }\n      }), ...opts.authorizations.map(authzFn).map(d => d({\n        role: {\n          ...ROLE,\n          authorizer: true\n        }\n      })), opts.payer && authzFn(opts.payer)({\n        role: {\n          ...ROLE,\n          payer: true\n        }\n      })].filter(Boolean)\n    };\n  };\n}\n\nconst run = function () {\n  let fns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return build([ref(\"123\"), ...fns]).then(resolve);\n};\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  mockSend: mockSend,\n  authzFn: authzFn,\n  authzResolve: authzResolve,\n  authzResolveMany: authzResolveMany,\n  sig: sig,\n  idof: idof,\n  run: run\n});\n\nconst VERSION = \"1.2.1\" ;\n\n// Deprecated\nconst params = params => _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n  pkg: \"FCL/SDK\",\n  message: `The params builder has been removed from the Flow JS-SDK/FCL.`,\n  transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\",\n  level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.LEVELS.error\n});\nconst param = params => _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.log.deprecate({\n  pkg: \"FCL/SDK\",\n  message: `The param builder has been removed from the Flow JS-SDK/FCL.`,\n  transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\",\n  level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_0__.LEVELS.error\n});\n\n\n//# sourceMappingURL=sdk.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG9uZmxvdy9zZGsvZGlzdC9zZGsubW9kdWxlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QztBQUNKO0FBQ3dCO0FBQzFCO0FBQ0E7QUFDSztBQUNXO0FBQ007QUFDbEM7QUFDcUI7QUFDNEI7O0FBRTdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxXQUFXLFFBQVE7QUFDbkIsY0FBYztBQUNkLGNBQWMsR0FBRztBQUNqQjtBQUNBLGVBQWU7QUFDZixhQUFhO0FBQ2IsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxpRUFBVztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlFQUFXO0FBQ2YsSUFBSSxpRUFBVztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RkFBNkYsYUFBYTtBQUMxRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxJQUFJO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFVBQVU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsZUFBZTtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0VBQVU7QUFDaEM7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxFQUFFLDhEQUFhO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0JBQW9CO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLG9CQUFvQjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsd0JBQXdCLEdBQUcsZ0JBQWdCO0FBQ3ZHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckIsYUFBYSxZQUFZO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxpRUFBVztBQUNiLGlEQUFpRDtBQUNqRCxFQUFFLGlFQUFXO0FBQ2IsRUFBRSxpRUFBVztBQUNiO0FBQ0Esb0JBQW9CLHNEQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsc0RBQU0sMkJBQTJCLGFBQWE7QUFDMUU7QUFDQSx1REFBdUQsY0FBYyxPQUFPLGdFQUFVLFVBQVU7QUFDaEcsUUFBUTtBQUNSLFFBQVEsb0RBQVU7QUFDbEI7QUFDQSxtRUFBbUUsYUFBYTtBQUNoRixpQkFBaUIsNERBQWtCO0FBQ25DLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRSxpRUFBVyw4REFBOEQsVUFBVTtBQUNyRjtBQUNBOztBQUVBO0FBQ0EsRUFBRSxpRUFBVztBQUNiO0FBQ0E7QUFDQTtBQUNBLEVBQUUsaUVBQVcsa0VBQWtFLFdBQVc7QUFDMUY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsb0RBQVc7QUFDeEQsNENBQTRDLG9EQUFXO0FBQ3ZELG9EQUFvRCxvREFBVztBQUMvRDtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msb0RBQVc7QUFDM0MsK0JBQStCLG9EQUFXO0FBQzFDLHFDQUFxQyxvREFBVztBQUNoRDtBQUNBLFNBQVMsbURBQU07QUFDZjtBQUNBO0FBQ0Esa0JBQWtCLHNDQUFJO0FBQ3RCLGFBQWEsb0RBQVc7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpSUFBaUksZ0VBQVUsMkZBQTJGLGdFQUFVLDREQUE0RCxnRUFBVTtBQUN0VDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLHNKQUFzSixnRUFBVSwwR0FBMEcsZ0VBQVUsc0VBQXNFLGdFQUFVO0FBQ3BXO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLEtBQUssR0FBRyxNQUFNLE9BQU8sS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNO0FBQ3BGO0FBQ0E7QUFDQSw2RUFBNkUsbUNBQW1DO0FBQ2hILDZFQUE2RSxtQ0FBbUM7O0FBRWhIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELGdFQUFVO0FBQ2xFO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0VBQVU7QUFDdkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGFBQWEsZ0VBQVU7QUFDdkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdFQUFVO0FBQ3pCO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsV0FBVyxnRUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQixnRUFBVSxZQUFZLEdBQUcsV0FBVztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsaUVBQVc7QUFDYjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxrQkFBa0IsZ0VBQVU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLDhEQUFhO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGdFQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGdFQUFVO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0VBQVU7QUFDekI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE4QyxnRUFBVTtBQUN4RDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLDRCQUE0QixnRUFBVTtBQUN0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLHNEQUFVO0FBQzFFO0FBQ0EsTUFBTSw4REFBb0I7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHlFQUF5RSxhQUFhO0FBQ3RGO0FBQ0E7QUFDQSwyQkFBMkIsSUFBSTtBQUMvQjtBQUNBLGNBQWMsc0RBQVUsVUFBVSxJQUFJO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzREFBTTtBQUM3Qix5QkFBeUIsd0RBQVksZ0NBQWdDLHdEQUFNO0FBQzNFLElBQUksaUVBQVcsNEVBQTRFLG1HQUFtRztBQUM5TDtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlFQUFXO0FBQ2Y7QUFDQSx5QkFBeUIsc0RBQU07QUFDL0IsMkJBQTJCLHdEQUFZLGdDQUFnQyx3REFBTTtBQUM3RSxNQUFNLGlFQUFXLDRFQUE0RSxtR0FBbUc7QUFDaE07QUFDQSxjQUFjO0FBQ2Q7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzRUFBc0UsYUFBYTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCLFdBQVcsUUFBUTtBQUNuQixhQUFhLFlBQVk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsd0RBQVksNkNBQTZDLHdEQUFNO0FBQ3RGLHVGQUF1RixtR0FBbUc7QUFDMUwsMEJBQTBCLHdEQUFZO0FBQ3RDLGtDQUFrQyxzREFBTTtBQUN4QztBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsR0FBRztBQUNIOztBQUVBO0FBQ0EsbUNBQW1DLHNEQUFNO0FBQ3pDO0FBQ0E7QUFDQSxrQkFBa0Isa0NBQWtDO0FBQ3BEO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw0REFBVTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyw0REFBVTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdHQUF3RyxjQUFjO0FBQ3RILHFDQUFxQyxlQUFlO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsZ0VBQVU7QUFDNUQsb0RBQW9ELGdFQUFVO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnRUFBVTtBQUN6QixLQUFLO0FBQ0wsV0FBVyxnRUFBVTtBQUNyQixrREFBa0QsNERBQVU7QUFDNUQ7QUFDQTtBQUNBLGVBQWUsZ0VBQVU7QUFDekIsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsYUFBYSxvQ0FBb0M7QUFDakQ7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxrQkFBa0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEVBQUUsaUVBQVc7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsa0NBQWtDO0FBQy9DOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsZ0JBQWdCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEVBQUUsaUVBQVc7QUFDYixFQUFFLGlFQUFXOztBQUViO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJLDhEQUFvQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsVUFBVTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSw2Q0FBNkMsK0RBQVE7QUFDckQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0Esa0RBQWtELCtEQUFRO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix3REFBWSxnQ0FBZ0Msd0RBQU07QUFDM0UsSUFBSSxpRUFBVyw0RUFBNEUsbUdBQW1HO0FBQzlMO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIsc0RBQU07QUFDM0IsdUJBQXVCLHdEQUFZLGdDQUFnQyx3REFBTTtBQUN6RSxFQUFFLGlFQUFXLDRFQUE0RSxtR0FBbUc7QUFDNUw7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRSxpRUFBVztBQUNiO0FBQ0EsRUFBRSxpRUFBVztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLGdFQUFVLFlBQVksR0FBRyxXQUFXO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQSx5QkFBeUIsOERBQW9CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLFNBQVMsNkRBQW1CO0FBQzVCLENBQUM7QUFDRCx3QkFBd0IsOERBQW9CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLFNBQVMsNkRBQW1CO0FBQzVCLENBQUM7O0FBRW1nQztBQUNwZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvc2RrL2Rpc3Qvc2RrLm1vZHVsZS5qcz9kMDI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdAb25mbG93L3V0aWwtbG9nZ2VyJztcbmltcG9ydCB7IGxvZyB9IGZyb20gJ0BvbmZsb3cvdXRpbC1sb2dnZXInO1xuaW1wb3J0IHsgaW52YXJpYW50IGFzIGludmFyaWFudCQxIH0gZnJvbSAnQG9uZmxvdy91dGlsLWludmFyaWFudCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdAb25mbG93L2NvbmZpZyc7XG5leHBvcnQgeyBjb25maWcgfSBmcm9tICdAb25mbG93L2NvbmZpZyc7XG5pbXBvcnQgeyBCdWZmZXIsIGVuY29kZSB9IGZyb20gJ0BvbmZsb3cvcmxwJztcbmltcG9ydCB7IHNlbmQgYXMgc2VuZCQxIH0gZnJvbSAnQG9uZmxvdy90cmFuc3BvcnQtaHR0cCc7XG5pbXBvcnQgeyBzYW5zUHJlZml4LCB3aXRoUHJlZml4IH0gZnJvbSAnQG9uZmxvdy91dGlsLWFkZHJlc3MnO1xuaW1wb3J0IHsgU0hBMyB9IGZyb20gJ3NoYTMnO1xuaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICdAb25mbG93L3V0aWwtdGVtcGxhdGUnO1xuZXhwb3J0IHsgdGVtcGxhdGUgYXMgY2FkZW5jZSwgdGVtcGxhdGUgYXMgY2RjIH0gZnJvbSAnQG9uZmxvdy91dGlsLXRlbXBsYXRlJztcblxuY29uc3QgVU5LTk9XTiAvKiAgICAgICAgICAgICAgICAgICAgICAgKi8gPSBcIlVOS05PV05cIjtcbmNvbnN0IFNDUklQVCAvKiAgICAgICAgICAgICAgICAgICAgICAgICovID0gXCJTQ1JJUFRcIjtcbmNvbnN0IFRSQU5TQUNUSU9OIC8qICAgICAgICAgICAgICAgICAgICovID0gXCJUUkFOU0FDVElPTlwiO1xuY29uc3QgR0VUX1RSQU5TQUNUSU9OX1NUQVRVUyAvKiAgICAgICAgKi8gPSBcIkdFVF9UUkFOU0FDVElPTl9TVEFUVVNcIjtcbmNvbnN0IEdFVF9BQ0NPVU5UIC8qICAgICAgICAgICAgICAgICAgICovID0gXCJHRVRfQUNDT1VOVFwiO1xuY29uc3QgR0VUX0VWRU5UUyAvKiAgICAgICAgICAgICAgICAgICAgKi8gPSBcIkdFVF9FVkVOVFNcIjtcbmNvbnN0IFBJTkcgLyogICAgICAgICAgICAgICAgICAgICAgICAgICovID0gXCJQSU5HXCI7XG5jb25zdCBHRVRfVFJBTlNBQ1RJT04gLyogICAgICAgICAgICAgICAqLyA9IFwiR0VUX1RSQU5TQUNUSU9OXCI7XG5jb25zdCBHRVRfQkxPQ0sgLyogICAgICAgICAgICAgICAgICAgICAqLyA9IFwiR0VUX0JMT0NLXCI7XG5jb25zdCBHRVRfQkxPQ0tfSEVBREVSIC8qICAgICAgICAgICAgICAqLyA9IFwiR0VUX0JMT0NLX0hFQURFUlwiO1xuY29uc3QgR0VUX0NPTExFQ1RJT04gLyogICAgICAgICAgICAgICAgKi8gPSBcIkdFVF9DT0xMRUNUSU9OXCI7XG5jb25zdCBHRVRfTkVUV09SS19QQVJBTUVURVJTIC8qICAgICAgICAqLyA9IFwiR0VUX05FVFdPUktfUEFSQU1FVEVSU1wiO1xuY29uc3QgQkFEIC8qICovID0gXCJCQURcIjtcbmNvbnN0IE9LIC8qICAqLyA9IFwiT0tcIjtcbmNvbnN0IEFDQ09VTlQgLyogICovID0gXCJBQ0NPVU5UXCI7XG5jb25zdCBQQVJBTSAvKiAgICAqLyA9IFwiUEFSQU1cIjtcbmNvbnN0IEFSR1VNRU5UIC8qICovID0gXCJBUkdVTUVOVFwiO1xuY29uc3QgQVVUSE9SSVpFUiAvKiAqLyA9IFwiYXV0aG9yaXplclwiO1xuY29uc3QgUEFZRVIgLyogICAgICAqLyA9IFwicGF5ZXJcIjtcbmNvbnN0IFBST1BPU0VSIC8qICAgKi8gPSBcInByb3Bvc2VyXCI7XG5jb25zdCBBQ0NUID0gYHtcbiAgXCJraW5kXCI6XCIke0FDQ09VTlR9XCIsXG4gIFwidGVtcElkXCI6bnVsbCxcbiAgXCJhZGRyXCI6bnVsbCxcbiAgXCJrZXlJZFwiOm51bGwsXG4gIFwic2VxdWVuY2VOdW1cIjpudWxsLFxuICBcInNpZ25hdHVyZVwiOm51bGwsXG4gIFwic2lnbmluZ0Z1bmN0aW9uXCI6bnVsbCxcbiAgXCJyZXNvbHZlXCI6bnVsbCxcbiAgXCJyb2xlXCI6IHtcbiAgICBcInByb3Bvc2VyXCI6ZmFsc2UsXG4gICAgXCJhdXRob3JpemVyXCI6ZmFsc2UsXG4gICAgXCJwYXllclwiOmZhbHNlLFxuICAgIFwicGFyYW1cIjpmYWxzZVxuICB9XG59YDtcbmNvbnN0IEFSRyA9IGB7XG4gIFwia2luZFwiOlwiJHtBUkdVTUVOVH1cIixcbiAgXCJ0ZW1wSWRcIjpudWxsLFxuICBcInZhbHVlXCI6bnVsbCxcbiAgXCJhc0FyZ3VtZW50XCI6bnVsbCxcbiAgXCJ4Zm9ybVwiOm51bGwsXG4gIFwicmVzb2x2ZVwiOiBudWxsLFxuICBcInJlc29sdmVBcmd1bWVudFwiOiBudWxsXG59YDtcbmNvbnN0IElYID0gYHtcbiAgXCJ0YWdcIjpcIiR7VU5LTk9XTn1cIixcbiAgXCJhc3NpZ25zXCI6e30sXG4gIFwic3RhdHVzXCI6XCIke09LfVwiLFxuICBcInJlYXNvblwiOm51bGwsXG4gIFwiYWNjb3VudHNcIjp7fSxcbiAgXCJwYXJhbXNcIjp7fSxcbiAgXCJhcmd1bWVudHNcIjp7fSxcbiAgXCJtZXNzYWdlXCI6IHtcbiAgICBcImNhZGVuY2VcIjpudWxsLFxuICAgIFwicmVmQmxvY2tcIjpudWxsLFxuICAgIFwiY29tcHV0ZUxpbWl0XCI6bnVsbCxcbiAgICBcInByb3Bvc2VyXCI6bnVsbCxcbiAgICBcInBheWVyXCI6bnVsbCxcbiAgICBcImF1dGhvcml6YXRpb25zXCI6W10sXG4gICAgXCJwYXJhbXNcIjpbXSxcbiAgICBcImFyZ3VtZW50c1wiOltdXG4gIH0sXG4gIFwicHJvcG9zZXJcIjpudWxsLFxuICBcImF1dGhvcml6YXRpb25zXCI6W10sXG4gIFwicGF5ZXJcIjpbXSxcbiAgXCJldmVudHNcIjoge1xuICAgIFwiZXZlbnRUeXBlXCI6bnVsbCxcbiAgICBcInN0YXJ0XCI6bnVsbCxcbiAgICBcImVuZFwiOm51bGwsXG4gICAgXCJibG9ja0lkc1wiOltdXG4gIH0sXG4gIFwidHJhbnNhY3Rpb25cIjoge1xuICAgIFwiaWRcIjpudWxsXG4gIH0sXG4gIFwiYmxvY2tcIjoge1xuICAgIFwiaWRcIjpudWxsLFxuICAgIFwiaGVpZ2h0XCI6bnVsbCxcbiAgICBcImlzU2VhbGVkXCI6bnVsbFxuICB9LFxuICBcImFjY291bnRcIjoge1xuICAgIFwiYWRkclwiOm51bGxcbiAgfSxcbiAgXCJjb2xsZWN0aW9uXCI6IHtcbiAgICBcImlkXCI6bnVsbFxuICB9XG59YDtcbmNvbnN0IEtFWVMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKEpTT04ucGFyc2UoSVgpKSk7XG5jb25zdCBpbnRlcmFjdGlvbiA9ICgpID0+IEpTT04ucGFyc2UoSVgpO1xuY29uc3QgQ0hBUlMgPSBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiLnNwbGl0KFwiXCIpO1xuY29uc3QgcmFuZENoYXIgPSAoKSA9PiBDSEFSU1t+fihNYXRoLnJhbmRvbSgpICogQ0hBUlMubGVuZ3RoKV07XG5jb25zdCB1dWlkID0gKCkgPT4gQXJyYXkuZnJvbSh7XG4gIGxlbmd0aDogMTBcbn0sIHJhbmRDaGFyKS5qb2luKFwiXCIpO1xuY29uc3QgaXNOdW1iZXIkMSA9IGQgPT4gdHlwZW9mIGQgPT09IFwibnVtYmVyXCI7XG5jb25zdCBpc0FycmF5JDEgPSBkID0+IEFycmF5LmlzQXJyYXkoZCk7XG5jb25zdCBpc09iaiA9IGQgPT4gZCAhPT0gbnVsbCAmJiB0eXBlb2YgZCA9PT0gXCJvYmplY3RcIjtcbmNvbnN0IGlzTnVsbCA9IGQgPT4gZCA9PSBudWxsO1xuY29uc3QgaXNGbiQzID0gZCA9PiB0eXBlb2YgZCA9PT0gXCJmdW5jdGlvblwiO1xuY29uc3QgaXNJbnRlcmFjdGlvbiA9IGl4ID0+IHtcbiAgaWYgKCFpc09iaihpeCkgfHwgaXNOdWxsKGl4KSB8fCBpc051bWJlciQxKGl4KSkgcmV0dXJuIGZhbHNlO1xuICBmb3IgKGxldCBrZXkgb2YgS0VZUykgaWYgKCFpeC5oYXNPd25Qcm9wZXJ0eShrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufTtcbmNvbnN0IE9rID0gaXggPT4ge1xuICBpeC5zdGF0dXMgPSBPSztcbiAgcmV0dXJuIGl4O1xufTtcbmNvbnN0IEJhZCA9IChpeCwgcmVhc29uKSA9PiB7XG4gIGl4LnN0YXR1cyA9IEJBRDtcbiAgaXgucmVhc29uID0gcmVhc29uO1xuICByZXR1cm4gaXg7XG59O1xuY29uc3QgbWFrZUl4ID0gd2F0ID0+IGl4ID0+IHtcbiAgaXgudGFnID0gd2F0O1xuICByZXR1cm4gT2soaXgpO1xufTtcbmNvbnN0IHByZXBBY2NvdW50S2V5SWQgPSBhY2N0ID0+IHtcbiAgaWYgKGFjY3Qua2V5SWQgPT0gbnVsbCkgcmV0dXJuIGFjY3Q7XG4gIGludmFyaWFudCQxKCFpc05hTihwYXJzZUludChhY2N0LmtleUlkKSksIFwiYWNjb3VudC5rZXlJZCBtdXN0IGJlIGFuIGludGVnZXJcIik7XG4gIHJldHVybiB7XG4gICAgLi4uYWNjdCxcbiAgICBrZXlJZDogcGFyc2VJbnQoYWNjdC5rZXlJZClcbiAgfTtcbn07XG5jb25zdCBwcmVwQWNjb3VudCA9IGZ1bmN0aW9uIChhY2N0KSB7XG4gIGxldCBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIGl4ID0+IHtcbiAgICBpbnZhcmlhbnQkMSh0eXBlb2YgYWNjdCA9PT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiBhY2N0ID09PSBcIm9iamVjdFwiLCBcInByZXBBY2NvdW50IG11c3QgYmUgcGFzc2VkIGFuIGF1dGhvcml6YXRpb24gZnVuY3Rpb24gb3IgYW4gYWNjb3VudCBvYmplY3RcIik7XG4gICAgaW52YXJpYW50JDEob3B0cy5yb2xlICE9IG51bGwsIFwiQWNjb3VudCBtdXN0IGhhdmUgYSByb2xlXCIpO1xuICAgIGNvbnN0IEFDQ09VTlQgPSBKU09OLnBhcnNlKEFDQ1QpO1xuICAgIGNvbnN0IHJvbGUgPSBvcHRzLnJvbGU7XG4gICAgY29uc3QgdGVtcElkID0gdXVpZCgpO1xuICAgIGlmIChhY2N0LmF1dGhvcml6YXRpb24gJiYgaXNGbiQzKGFjY3QuYXV0aG9yaXphdGlvbikpIGFjY3QgPSB7XG4gICAgICByZXNvbHZlOiBhY2N0LmF1dGhvcml6YXRpb25cbiAgICB9O1xuICAgIGlmICghYWNjdC5hdXRob3JpemF0aW9uICYmIGlzRm4kMyhhY2N0KSkgYWNjdCA9IHtcbiAgICAgIHJlc29sdmU6IGFjY3RcbiAgICB9O1xuICAgIGNvbnN0IHJlc29sdmUgPSBhY2N0LnJlc29sdmU7XG4gICAgaWYgKHJlc29sdmUpIGFjY3QucmVzb2x2ZSA9IGZ1bmN0aW9uIChhY2N0KSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcmVzdCA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIHJlc3RbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtyZXNvbHZlLCBwcmVwQWNjb3VudEtleUlkXS5yZWR1Y2UoYXN5bmMgKGQsIGZuKSA9PiBmbihhd2FpdCBkLCAuLi5yZXN0KSwgYWNjdCk7XG4gICAgfTtcbiAgICBhY2N0ID0gcHJlcEFjY291bnRLZXlJZChhY2N0KTtcbiAgICBpeC5hY2NvdW50c1t0ZW1wSWRdID0ge1xuICAgICAgLi4uQUNDT1VOVCxcbiAgICAgIHRlbXBJZCxcbiAgICAgIC4uLmFjY3QsXG4gICAgICByb2xlOiB7XG4gICAgICAgIC4uLkFDQ09VTlQucm9sZSxcbiAgICAgICAgLi4uKHR5cGVvZiBhY2N0LnJvbGUgPT09IFwib2JqZWN0XCIgPyBhY2N0LnJvbGUgOiB7fSksXG4gICAgICAgIFtyb2xlXTogdHJ1ZVxuICAgICAgfVxuICAgIH07XG4gICAgaWYgKHJvbGUgPT09IEFVVEhPUklaRVIpIHtcbiAgICAgIGl4LmF1dGhvcml6YXRpb25zLnB1c2godGVtcElkKTtcbiAgICB9IGVsc2UgaWYgKHJvbGUgPT09IFBBWUVSKSB7XG4gICAgICBpeC5wYXllci5wdXNoKHRlbXBJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl4W3JvbGVdID0gdGVtcElkO1xuICAgIH1cbiAgICByZXR1cm4gaXg7XG4gIH07XG59O1xuY29uc3QgbWFrZUFyZ3VtZW50ID0gYXJnID0+IGl4ID0+IHtcbiAgbGV0IHRlbXBJZCA9IHV1aWQoKTtcbiAgaXgubWVzc2FnZS5hcmd1bWVudHMucHVzaCh0ZW1wSWQpO1xuICBpeC5hcmd1bWVudHNbdGVtcElkXSA9IEpTT04ucGFyc2UoQVJHKTtcbiAgaXguYXJndW1lbnRzW3RlbXBJZF0udGVtcElkID0gdGVtcElkO1xuICBpeC5hcmd1bWVudHNbdGVtcElkXS52YWx1ZSA9IGFyZy52YWx1ZTtcbiAgaXguYXJndW1lbnRzW3RlbXBJZF0uYXNBcmd1bWVudCA9IGFyZy5hc0FyZ3VtZW50O1xuICBpeC5hcmd1bWVudHNbdGVtcElkXS54Zm9ybSA9IGFyZy54Zm9ybTtcbiAgaXguYXJndW1lbnRzW3RlbXBJZF0ucmVzb2x2ZSA9IGFyZy5yZXNvbHZlO1xuICBpeC5hcmd1bWVudHNbdGVtcElkXS5yZXNvbHZlQXJndW1lbnQgPSBpc0ZuJDMoYXJnLnJlc29sdmVBcmd1bWVudCkgPyBhcmcucmVzb2x2ZUFyZ3VtZW50LmJpbmQoYXJnKSA6IGFyZy5yZXNvbHZlQXJndW1lbnQ7XG4gIHJldHVybiBPayhpeCk7XG59O1xuY29uc3QgbWFrZVVua25vd24gLyogICAgICAgICAgICAgICAgICovID0gbWFrZUl4KFVOS05PV04pO1xuY29uc3QgbWFrZVNjcmlwdCAvKiAgICAgICAgICAgICAgICAgICovID0gbWFrZUl4KFNDUklQVCk7XG5jb25zdCBtYWtlVHJhbnNhY3Rpb24gLyogICAgICAgICAgICAgKi8gPSBtYWtlSXgoVFJBTlNBQ1RJT04pO1xuY29uc3QgbWFrZUdldFRyYW5zYWN0aW9uU3RhdHVzIC8qICAgICovID0gbWFrZUl4KEdFVF9UUkFOU0FDVElPTl9TVEFUVVMpO1xuY29uc3QgbWFrZUdldFRyYW5zYWN0aW9uIC8qICAgICAgICAgICovID0gbWFrZUl4KEdFVF9UUkFOU0FDVElPTik7XG5jb25zdCBtYWtlR2V0QWNjb3VudCAvKiAgICAgICAgICAgICAgKi8gPSBtYWtlSXgoR0VUX0FDQ09VTlQpO1xuY29uc3QgbWFrZUdldEV2ZW50cyAvKiAgICAgICAgICAgICAgICovID0gbWFrZUl4KEdFVF9FVkVOVFMpO1xuY29uc3QgbWFrZVBpbmcgLyogICAgICAgICAgICAgICAgICAgICovID0gbWFrZUl4KFBJTkcpO1xuY29uc3QgbWFrZUdldEJsb2NrIC8qICAgICAgICAgICAgICAgICovID0gbWFrZUl4KEdFVF9CTE9DSyk7XG5jb25zdCBtYWtlR2V0QmxvY2tIZWFkZXIgLyogICAgICAgICAgKi8gPSBtYWtlSXgoR0VUX0JMT0NLX0hFQURFUik7XG5jb25zdCBtYWtlR2V0Q29sbGVjdGlvbiAvKiAgICAgICAgICAgKi8gPSBtYWtlSXgoR0VUX0NPTExFQ1RJT04pO1xuY29uc3QgbWFrZUdldE5ldHdvcmtQYXJhbWV0ZXJzIC8qICAgICovID0gbWFrZUl4KEdFVF9ORVRXT1JLX1BBUkFNRVRFUlMpO1xuY29uc3QgaXMgPSB3YXQgPT4gaXggPT4gaXgudGFnID09PSB3YXQ7XG5jb25zdCBpc1Vua25vd24gLyogICAgICAgICAgICAgICAgICovID0gaXMoVU5LTk9XTik7XG5jb25zdCBpc1NjcmlwdCAvKiAgICAgICAgICAgICAgICAgICovID0gaXMoU0NSSVBUKTtcbmNvbnN0IGlzVHJhbnNhY3Rpb24gLyogICAgICAgICAgICAgKi8gPSBpcyhUUkFOU0FDVElPTik7XG5jb25zdCBpc0dldFRyYW5zYWN0aW9uU3RhdHVzIC8qICAgICovID0gaXMoR0VUX1RSQU5TQUNUSU9OX1NUQVRVUyk7XG5jb25zdCBpc0dldFRyYW5zYWN0aW9uIC8qICAgICAgICAgICovID0gaXMoR0VUX1RSQU5TQUNUSU9OKTtcbmNvbnN0IGlzR2V0QWNjb3VudCAvKiAgICAgICAgICAgICAgKi8gPSBpcyhHRVRfQUNDT1VOVCk7XG5jb25zdCBpc0dldEV2ZW50cyAvKiAgICAgICAgICAgICAgICovID0gaXMoR0VUX0VWRU5UUyk7XG5jb25zdCBpc1BpbmcgLyogICAgICAgICAgICAgICAgICAgICovID0gaXMoUElORyk7XG5jb25zdCBpc0dldEJsb2NrIC8qICAgICAgICAgICAgICAgICovID0gaXMoR0VUX0JMT0NLKTtcbmNvbnN0IGlzR2V0QmxvY2tIZWFkZXIgLyogICAgICAgICAgKi8gPSBpcyhHRVRfQkxPQ0tfSEVBREVSKTtcbmNvbnN0IGlzR2V0Q29sbGVjdGlvbiAvKiAgICAgICAgICAgKi8gPSBpcyhHRVRfQ09MTEVDVElPTik7XG5jb25zdCBpc0dldE5ldHdvcmtQYXJhbWV0ZXJzIC8qICAgICovID0gaXMoR0VUX05FVFdPUktfUEFSQU1FVEVSUyk7XG5jb25zdCBpc09rIC8qICAqLyA9IGl4ID0+IGl4LnN0YXR1cyA9PT0gT0s7XG5jb25zdCBpc0JhZCAvKiAqLyA9IGl4ID0+IGl4LnN0YXR1cyA9PT0gQkFEO1xuY29uc3Qgd2h5IC8qICAgKi8gPSBpeCA9PiBpeC5yZWFzb247XG5jb25zdCBpc0FjY291bnQgLyogICovID0gYWNjb3VudCA9PiBhY2NvdW50LmtpbmQgPT09IEFDQ09VTlQ7XG5jb25zdCBpc1BhcmFtIC8qICAgICovID0gcGFyYW0gPT4gcGFyYW0ua2luZCA9PT0gUEFSQU07XG5jb25zdCBpc0FyZ3VtZW50IC8qICovID0gYXJndW1lbnQgPT4gYXJndW1lbnQua2luZCA9PT0gQVJHVU1FTlQ7XG5jb25zdCBoYXJkTW9kZSA9IGl4ID0+IHtcbiAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKGl4KSkge1xuICAgIGlmICghS0VZUy5oYXMoa2V5KSkgdGhyb3cgbmV3IEVycm9yKGBcIiR7a2V5fVwiIGlzIGFuIGludmFsaWQgcm9vdCBsZXZlbCBJbnRlcmFjdGlvbiBwcm9wZXJ0eS5gKTtcbiAgfVxuICByZXR1cm4gaXg7XG59O1xuY29uc3QgcmVjUGlwZSA9IGFzeW5jIGZ1bmN0aW9uIChpeCkge1xuICBsZXQgZm5zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcbiAgdHJ5IHtcbiAgICBpeCA9IGhhcmRNb2RlKGF3YWl0IGl4KTtcbiAgICBpZiAoaXNCYWQoaXgpKSB0aHJvdyBuZXcgRXJyb3IoYEludGVyYWN0aW9uIEVycm9yOiAke2l4LnJlYXNvbn1gKTtcbiAgICBpZiAoIWZucy5sZW5ndGgpIHJldHVybiBpeDtcbiAgICBjb25zdCBbaGQsIC4uLnJlc3RdID0gZm5zO1xuICAgIGNvbnN0IGN1ciA9IGF3YWl0IGhkO1xuICAgIGlmIChpc0ZuJDMoY3VyKSkgcmV0dXJuIHJlY1BpcGUoY3VyKGl4KSwgcmVzdCk7XG4gICAgaWYgKGlzTnVsbChjdXIpIHx8ICFjdXIpIHJldHVybiByZWNQaXBlKGl4LCByZXN0KTtcbiAgICBpZiAoaXNJbnRlcmFjdGlvbihjdXIpKSByZXR1cm4gcmVjUGlwZShjdXIsIHJlc3QpO1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSW50ZXJhY3Rpb24gQ29tcG9zaXRpb25cIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuY29uc3QgcGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG4gIGNvbnN0IFthcmcxLCBhcmcyXSA9IGFyZ3M7XG4gIGlmIChpc0FycmF5JDEoYXJnMSkgJiYgYXJnMiA9PSBudWxsKSByZXR1cm4gZCA9PiBwaXBlKGQsIGFyZzEpO1xuICByZXR1cm4gcmVjUGlwZShhcmcxLCBhcmcyKTtcbn07XG5jb25zdCBpZGVudGl0eSQxID0gdiA9PiB2O1xuY29uc3QgZ2V0ID0gKGl4LCBrZXksIGZhbGxiYWNrKSA9PiB7XG4gIHJldHVybiBpeC5hc3NpZ25zW2tleV0gPT0gbnVsbCA/IGZhbGxiYWNrIDogaXguYXNzaWduc1trZXldO1xufTtcbmNvbnN0IHB1dCA9IChrZXksIHZhbHVlKSA9PiBpeCA9PiB7XG4gIGl4LmFzc2lnbnNba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gT2soaXgpO1xufTtcbmNvbnN0IHVwZGF0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgbGV0IGZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBpZGVudGl0eSQxO1xuICByZXR1cm4gaXggPT4ge1xuICAgIGl4LmFzc2lnbnNba2V5XSA9IGZuKGl4LmFzc2lnbnNba2V5XSwgaXgpO1xuICAgIHJldHVybiBPayhpeCk7XG4gIH07XG59O1xuY29uc3QgZGVzdHJveSA9IGtleSA9PiBpeCA9PiB7XG4gIGRlbGV0ZSBpeC5hc3NpZ25zW2tleV07XG4gIHJldHVybiBPayhpeCk7XG59O1xuXG52YXIgaXhNb2R1bGUgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgVU5LTk9XTjogVU5LTk9XTixcbiAgU0NSSVBUOiBTQ1JJUFQsXG4gIFRSQU5TQUNUSU9OOiBUUkFOU0FDVElPTixcbiAgR0VUX1RSQU5TQUNUSU9OX1NUQVRVUzogR0VUX1RSQU5TQUNUSU9OX1NUQVRVUyxcbiAgR0VUX0FDQ09VTlQ6IEdFVF9BQ0NPVU5ULFxuICBHRVRfRVZFTlRTOiBHRVRfRVZFTlRTLFxuICBQSU5HOiBQSU5HLFxuICBHRVRfVFJBTlNBQ1RJT046IEdFVF9UUkFOU0FDVElPTixcbiAgR0VUX0JMT0NLOiBHRVRfQkxPQ0ssXG4gIEdFVF9CTE9DS19IRUFERVI6IEdFVF9CTE9DS19IRUFERVIsXG4gIEdFVF9DT0xMRUNUSU9OOiBHRVRfQ09MTEVDVElPTixcbiAgR0VUX05FVFdPUktfUEFSQU1FVEVSUzogR0VUX05FVFdPUktfUEFSQU1FVEVSUyxcbiAgQkFEOiBCQUQsXG4gIE9LOiBPSyxcbiAgQUNDT1VOVDogQUNDT1VOVCxcbiAgUEFSQU06IFBBUkFNLFxuICBBUkdVTUVOVDogQVJHVU1FTlQsXG4gIEFVVEhPUklaRVI6IEFVVEhPUklaRVIsXG4gIFBBWUVSOiBQQVlFUixcbiAgUFJPUE9TRVI6IFBST1BPU0VSLFxuICBpbnRlcmFjdGlvbjogaW50ZXJhY3Rpb24sXG4gIHV1aWQ6IHV1aWQsXG4gIGlzTnVtYmVyOiBpc051bWJlciQxLFxuICBpc0FycmF5OiBpc0FycmF5JDEsXG4gIGlzT2JqOiBpc09iaixcbiAgaXNOdWxsOiBpc051bGwsXG4gIGlzRm46IGlzRm4kMyxcbiAgaXNJbnRlcmFjdGlvbjogaXNJbnRlcmFjdGlvbixcbiAgT2s6IE9rLFxuICBCYWQ6IEJhZCxcbiAgcHJlcEFjY291bnQ6IHByZXBBY2NvdW50LFxuICBtYWtlQXJndW1lbnQ6IG1ha2VBcmd1bWVudCxcbiAgbWFrZVVua25vd246IG1ha2VVbmtub3duLFxuICBtYWtlU2NyaXB0OiBtYWtlU2NyaXB0LFxuICBtYWtlVHJhbnNhY3Rpb246IG1ha2VUcmFuc2FjdGlvbixcbiAgbWFrZUdldFRyYW5zYWN0aW9uU3RhdHVzOiBtYWtlR2V0VHJhbnNhY3Rpb25TdGF0dXMsXG4gIG1ha2VHZXRUcmFuc2FjdGlvbjogbWFrZUdldFRyYW5zYWN0aW9uLFxuICBtYWtlR2V0QWNjb3VudDogbWFrZUdldEFjY291bnQsXG4gIG1ha2VHZXRFdmVudHM6IG1ha2VHZXRFdmVudHMsXG4gIG1ha2VQaW5nOiBtYWtlUGluZyxcbiAgbWFrZUdldEJsb2NrOiBtYWtlR2V0QmxvY2ssXG4gIG1ha2VHZXRCbG9ja0hlYWRlcjogbWFrZUdldEJsb2NrSGVhZGVyLFxuICBtYWtlR2V0Q29sbGVjdGlvbjogbWFrZUdldENvbGxlY3Rpb24sXG4gIG1ha2VHZXROZXR3b3JrUGFyYW1ldGVyczogbWFrZUdldE5ldHdvcmtQYXJhbWV0ZXJzLFxuICBpc1Vua25vd246IGlzVW5rbm93bixcbiAgaXNTY3JpcHQ6IGlzU2NyaXB0LFxuICBpc1RyYW5zYWN0aW9uOiBpc1RyYW5zYWN0aW9uLFxuICBpc0dldFRyYW5zYWN0aW9uU3RhdHVzOiBpc0dldFRyYW5zYWN0aW9uU3RhdHVzLFxuICBpc0dldFRyYW5zYWN0aW9uOiBpc0dldFRyYW5zYWN0aW9uLFxuICBpc0dldEFjY291bnQ6IGlzR2V0QWNjb3VudCxcbiAgaXNHZXRFdmVudHM6IGlzR2V0RXZlbnRzLFxuICBpc1Bpbmc6IGlzUGluZyxcbiAgaXNHZXRCbG9jazogaXNHZXRCbG9jayxcbiAgaXNHZXRCbG9ja0hlYWRlcjogaXNHZXRCbG9ja0hlYWRlcixcbiAgaXNHZXRDb2xsZWN0aW9uOiBpc0dldENvbGxlY3Rpb24sXG4gIGlzR2V0TmV0d29ya1BhcmFtZXRlcnM6IGlzR2V0TmV0d29ya1BhcmFtZXRlcnMsXG4gIGlzT2s6IGlzT2ssXG4gIGlzQmFkOiBpc0JhZCxcbiAgd2h5OiB3aHksXG4gIGlzQWNjb3VudDogaXNBY2NvdW50LFxuICBpc1BhcmFtOiBpc1BhcmFtLFxuICBpc0FyZ3VtZW50OiBpc0FyZ3VtZW50LFxuICBwaXBlOiBwaXBlLFxuICBnZXQ6IGdldCxcbiAgcHV0OiBwdXQsXG4gIHVwZGF0ZTogdXBkYXRlLFxuICBkZXN0cm95OiBkZXN0cm95XG59KTtcblxuZnVuY3Rpb24gYnVpbGQoKSB7XG4gIGxldCBmbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICByZXR1cm4gcGlwZShpbnRlcmFjdGlvbigpLCBmbnMpO1xufVxuXG5jb25zdCBERUZBVUxUX1JFU1BPTlNFID0gYHtcbiAgICBcInRhZ1wiOm51bGwsXG4gICAgXCJ0cmFuc2FjdGlvblwiOm51bGwsXG4gICAgXCJ0cmFuc2FjdGlvblN0YXR1c1wiOm51bGwsXG4gICAgXCJ0cmFuc2FjdGlvbklkXCI6bnVsbCxcbiAgICBcImVuY29kZWREYXRhXCI6bnVsbCxcbiAgICBcImV2ZW50c1wiOm51bGwsXG4gICAgXCJhY2NvdW50XCI6bnVsbCxcbiAgICBcImJsb2NrXCI6bnVsbCxcbiAgICBcImJsb2NrSGVhZGVyXCI6bnVsbCxcbiAgICBcImxhdGVzdEJsb2NrXCI6bnVsbCxcbiAgICBcImNvbGxlY3Rpb25cIjpudWxsLFxuICAgIFwibmV0d29ya1BhcmFtZXRlcnNcIjpudWxsXG59YDtcbmNvbnN0IHJlc3BvbnNlID0gKCkgPT4gSlNPTi5wYXJzZShERUZBVUxUX1JFU1BPTlNFKTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gLSBBIGJ1aWxkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBpbnRlcmFjdGlvbiB0byBnZXQgdGhlIGxhdGVzdCBibG9ja1xuICogQHBhcmFtIHtib29sZWFufSBbaXNTZWFsZWRdIC0gV2hldGhlciBvciBub3QgdGhlIGJsb2NrIHNob3VsZCBiZSBzZWFsZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gLSBBbiBpbnRlcmFjdGlvbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZ2V0QmxvY2soKSB7XG4gIGxldCBpc1NlYWxlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgcmV0dXJuIHBpcGUoW21ha2VHZXRCbG9jaywgaXggPT4ge1xuICAgIGl4LmJsb2NrLmlzU2VhbGVkID0gaXNTZWFsZWQ7XG4gICAgcmV0dXJuIE9rKGl4KTtcbiAgfV0pO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiAtIEEgYnVpbGRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGludGVyYWN0aW9uIHRvIGdldCBhbiBhY2NvdW50IGJ5IGFkZHJlc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyIC0gVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdG8gZ2V0cVxuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIEFuIGludGVyYWN0aW9uIG9iamVjdFxuICovXG5mdW5jdGlvbiBnZXRBY2NvdW50KGFkZHIpIHtcbiAgcmV0dXJuIHBpcGUoW21ha2VHZXRBY2NvdW50LCBpeCA9PiB7XG4gICAgaXguYWNjb3VudC5hZGRyID0gc2Fuc1ByZWZpeChhZGRyKTtcbiAgICByZXR1cm4gT2soaXgpO1xuICB9XSk7XG59XG5cbmNvbnN0IGxhdGVzdEJsb2NrRGVwcmVjYXRpb25Ob3RpY2UgPSAoKSA9PiB7XG4gIGxvZy5kZXByZWNhdGUoe1xuICAgIHBrZzogXCJAb25mbG93L2RlY29kZVwiLFxuICAgIHN1YmplY3Q6IFwiT3BlcmF0aW5nIHVwb24gZGF0YSBvZiB0aGUgbGF0ZXN0QmxvY2sgZmllbGQgb2YgdGhlIHJlc3BvbnNlIG9iamVjdFwiLFxuICAgIHRyYW5zaXRpb246IFwiaHR0cHM6Ly9naXRodWIuY29tL29uZmxvdy9mbG93LWpzLXNkay9ibG9iL21hc3Rlci9wYWNrYWdlcy9kZWNvZGUvV0FSTklOR1MubWQjMDAwMS1EZXByZWNhdGluZy1sYXRlc3RCbG9jay1maWVsZFwiXG4gIH0pO1xufTtcbmNvbnN0IGRlY29kZUltcGxpY2l0ID0gYXN5bmMgaSA9PiBpO1xuY29uc3QgZGVjb2RlVm9pZCA9IGFzeW5jICgpID0+IG51bGw7XG5jb25zdCBkZWNvZGVUeXBlID0gYXN5bmMgdHlwZSA9PiB7XG4gIHJldHVybiB0eXBlLnN0YXRpY1R5cGU7XG59O1xuY29uc3QgZGVjb2RlUGF0aCA9IGFzeW5jIHBhdGggPT4ge1xuICByZXR1cm4ge1xuICAgIGRvbWFpbjogcGF0aC5kb21haW4sXG4gICAgaWRlbnRpZmllcjogcGF0aC5pZGVudGlmaWVyXG4gIH07XG59O1xuY29uc3QgZGVjb2RlQ2FwYWJpbGl0eSA9IGFzeW5jIGNhcCA9PiB7XG4gIHJldHVybiB7XG4gICAgcGF0aDogY2FwLnBhdGgsXG4gICAgYWRkcmVzczogY2FwLmFkZHJlc3MsXG4gICAgYm9ycm93VHlwZTogY2FwLmJvcnJvd1R5cGVcbiAgfTtcbn07XG5jb25zdCBkZWNvZGVPcHRpb25hbCA9IGFzeW5jIChvcHRpb25hbCwgZGVjb2RlcnMsIHN0YWNrKSA9PiBvcHRpb25hbCA/IGF3YWl0IHJlY3Vyc2VEZWNvZGUob3B0aW9uYWwsIGRlY29kZXJzLCBzdGFjaykgOiBudWxsO1xuY29uc3QgZGVjb2RlUmVmZXJlbmNlID0gYXN5bmMgdiA9PiAoe1xuICBhZGRyZXNzOiB2LmFkZHJlc3MsXG4gIHR5cGU6IHYudHlwZVxufSk7XG5jb25zdCBkZWNvZGVBcnJheSA9IGFzeW5jIChhcnJheSwgZGVjb2RlcnMsIHN0YWNrKSA9PiBhd2FpdCBQcm9taXNlLmFsbChhcnJheS5tYXAodiA9PiBuZXcgUHJvbWlzZShhc3luYyByZXMgPT4gcmVzKGF3YWl0IHJlY3Vyc2VEZWNvZGUodiwgZGVjb2RlcnMsIFsuLi5zdGFjaywgdi50eXBlXSkpKSkpO1xuY29uc3QgZGVjb2RlRGljdGlvbmFyeSA9IGFzeW5jIChkaWN0aW9uYXJ5LCBkZWNvZGVycywgc3RhY2spID0+IGF3YWl0IGRpY3Rpb25hcnkucmVkdWNlKGFzeW5jIChhY2MsIHYpID0+IHtcbiAgYWNjID0gYXdhaXQgYWNjO1xuICBhY2NbYXdhaXQgcmVjdXJzZURlY29kZSh2LmtleSwgZGVjb2RlcnMsIFsuLi5zdGFjaywgdi5rZXldKV0gPSBhd2FpdCByZWN1cnNlRGVjb2RlKHYudmFsdWUsIGRlY29kZXJzLCBbLi4uc3RhY2ssIHYua2V5XSk7XG4gIHJldHVybiBhY2M7XG59LCBQcm9taXNlLnJlc29sdmUoe30pKTtcbmNvbnN0IGRlY29kZUNvbXBvc2l0ZSA9IGFzeW5jIChjb21wb3NpdGUsIGRlY29kZXJzLCBzdGFjaykgPT4ge1xuICBjb25zdCBkZWNvZGVkID0gYXdhaXQgY29tcG9zaXRlLmZpZWxkcy5yZWR1Y2UoYXN5bmMgKGFjYywgdikgPT4ge1xuICAgIGFjYyA9IGF3YWl0IGFjYztcbiAgICBhY2Nbdi5uYW1lXSA9IGF3YWl0IHJlY3Vyc2VEZWNvZGUodi52YWx1ZSwgZGVjb2RlcnMsIFsuLi5zdGFjaywgdi5uYW1lXSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgUHJvbWlzZS5yZXNvbHZlKHt9KSk7XG4gIGNvbnN0IGRlY29kZXIgPSBjb21wb3NpdGUuaWQgJiYgZGVjb2Rlckxvb2t1cChkZWNvZGVycywgY29tcG9zaXRlLmlkKTtcbiAgcmV0dXJuIGRlY29kZXIgPyBhd2FpdCBkZWNvZGVyKGRlY29kZWQpIDogZGVjb2RlZDtcbn07XG5jb25zdCBkZWZhdWx0RGVjb2RlcnMgPSB7XG4gIFVJbnQ6IGRlY29kZUltcGxpY2l0LFxuICBJbnQ6IGRlY29kZUltcGxpY2l0LFxuICBVSW50ODogZGVjb2RlSW1wbGljaXQsXG4gIEludDg6IGRlY29kZUltcGxpY2l0LFxuICBVSW50MTY6IGRlY29kZUltcGxpY2l0LFxuICBJbnQxNjogZGVjb2RlSW1wbGljaXQsXG4gIFVJbnQzMjogZGVjb2RlSW1wbGljaXQsXG4gIEludDMyOiBkZWNvZGVJbXBsaWNpdCxcbiAgVUludDY0OiBkZWNvZGVJbXBsaWNpdCxcbiAgSW50NjQ6IGRlY29kZUltcGxpY2l0LFxuICBVSW50MTI4OiBkZWNvZGVJbXBsaWNpdCxcbiAgSW50MTI4OiBkZWNvZGVJbXBsaWNpdCxcbiAgVUludDI1NjogZGVjb2RlSW1wbGljaXQsXG4gIEludDI1NjogZGVjb2RlSW1wbGljaXQsXG4gIFdvcmQ4OiBkZWNvZGVJbXBsaWNpdCxcbiAgV29yZDE2OiBkZWNvZGVJbXBsaWNpdCxcbiAgV29yZDMyOiBkZWNvZGVJbXBsaWNpdCxcbiAgV29yZDY0OiBkZWNvZGVJbXBsaWNpdCxcbiAgVUZpeDY0OiBkZWNvZGVJbXBsaWNpdCxcbiAgRml4NjQ6IGRlY29kZUltcGxpY2l0LFxuICBTdHJpbmc6IGRlY29kZUltcGxpY2l0LFxuICBDaGFyYWN0ZXI6IGRlY29kZUltcGxpY2l0LFxuICBCb29sOiBkZWNvZGVJbXBsaWNpdCxcbiAgQWRkcmVzczogZGVjb2RlSW1wbGljaXQsXG4gIFZvaWQ6IGRlY29kZVZvaWQsXG4gIE9wdGlvbmFsOiBkZWNvZGVPcHRpb25hbCxcbiAgUmVmZXJlbmNlOiBkZWNvZGVSZWZlcmVuY2UsXG4gIEFycmF5OiBkZWNvZGVBcnJheSxcbiAgRGljdGlvbmFyeTogZGVjb2RlRGljdGlvbmFyeSxcbiAgRXZlbnQ6IGRlY29kZUNvbXBvc2l0ZSxcbiAgUmVzb3VyY2U6IGRlY29kZUNvbXBvc2l0ZSxcbiAgU3RydWN0OiBkZWNvZGVDb21wb3NpdGUsXG4gIEVudW06IGRlY29kZUNvbXBvc2l0ZSxcbiAgVHlwZTogZGVjb2RlVHlwZSxcbiAgUGF0aDogZGVjb2RlUGF0aCxcbiAgQ2FwYWJpbGl0eTogZGVjb2RlQ2FwYWJpbGl0eVxufTtcbmNvbnN0IGRlY29kZXJMb29rdXAgPSAoZGVjb2RlcnMsIGxvb2t1cCkgPT4ge1xuICBjb25zdCBmb3VuZCA9IE9iamVjdC5rZXlzKGRlY29kZXJzKS5maW5kKGRlY29kZXIgPT4ge1xuICAgIGlmICgvXlxcLy4qXFwvJC8udGVzdChkZWNvZGVyKSkge1xuICAgICAgY29uc3QgcmVnID0gbmV3IFJlZ0V4cChkZWNvZGVyLnN1YnN0cmluZygxLCBkZWNvZGVyLmxlbmd0aCAtIDEpKTtcbiAgICAgIHJldHVybiByZWcudGVzdChsb29rdXApO1xuICAgIH1cbiAgICByZXR1cm4gZGVjb2RlciA9PT0gbG9va3VwO1xuICB9KTtcbiAgcmV0dXJuIGxvb2t1cCAmJiBmb3VuZCAmJiBkZWNvZGVyc1tmb3VuZF07XG59O1xuY29uc3QgcmVjdXJzZURlY29kZSA9IGFzeW5jIChkZWNvZGVJbnN0cnVjdGlvbnMsIGRlY29kZXJzLCBzdGFjaykgPT4ge1xuICBsZXQgZGVjb2RlciA9IGRlY29kZXJMb29rdXAoZGVjb2RlcnMsIGRlY29kZUluc3RydWN0aW9ucy50eXBlKTtcbiAgaWYgKCFkZWNvZGVyKSB0aHJvdyBuZXcgRXJyb3IoYFVuZGVmaW5lZCBEZWNvZGVyIEVycm9yOiAke2RlY29kZUluc3RydWN0aW9ucy50eXBlfUAke3N0YWNrLmpvaW4oXCIuXCIpfWApO1xuICByZXR1cm4gYXdhaXQgZGVjb2RlcihkZWNvZGVJbnN0cnVjdGlvbnMudmFsdWUsIGRlY29kZXJzLCBzdGFjayk7XG59O1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiAtIERlY29kZXMgYSByZXNwb25zZSBmcm9tIEZsb3cgaW50byBKU09OXG4gKiBAcGFyYW0geyp9IGRlY29kZUluc3RydWN0aW9ucyAtIFRoZSByZXNwb25zZSBvYmplY3QgZnJvbSBGbG93XG4gKiBAcGFyYW0ge29iamVjdH0gY3VzdG9tRGVjb2RlcnMgLSBBbiBvYmplY3Qgb2YgY3VzdG9tIGRlY29kZXJzXG4gKiBAcGFyYW0ge0FycmF5PCo+fSBzdGFjayAtIFRoZSBzdGFjayBvZiB0aGUgY3VycmVudCBkZWNvZGluZ1xuICogQHJldHVybnMge1Byb21pc2U8Kj59IC0gVGhlIGRlY29kZWQgcmVzcG9uc2VcbiAqL1xuY29uc3QgZGVjb2RlJDEgPSBhc3luYyBmdW5jdGlvbiAoZGVjb2RlSW5zdHJ1Y3Rpb25zKSB7XG4gIGxldCBjdXN0b21EZWNvZGVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIGxldCBzdGFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107XG4gIC8vIEZpbHRlciBvdXQgYWxsIGRlZmF1bHQgZGVjb2RlcnMgd2hpY2ggYXJlIG92ZXJyaWRkZW4gYnkgYSBjdXN0b20gZGVjb2RlciByZWdleFxuICBjb25zdCBmaWx0ZXJlZERlY29kZXJzID0gT2JqZWN0LmtleXMoZGVmYXVsdERlY29kZXJzKS5maWx0ZXIoZGVjb2RlciA9PiAhT2JqZWN0LmtleXMoY3VzdG9tRGVjb2RlcnMpLmZpbmQoY3VzdG9tRGVjb2RlciA9PiBuZXcgUmVnRXhwKGN1c3RvbURlY29kZXIpLnRlc3QoZGVjb2RlcikpKS5yZWR1Y2UoKGRlY29kZXJzLCBkZWNvZGVyS2V5KSA9PiB7XG4gICAgZGVjb2RlcnNbZGVjb2RlcktleV0gPSBkZWZhdWx0RGVjb2RlcnNbZGVjb2RlcktleV07XG4gICAgcmV0dXJuIGRlY29kZXJzO1xuICB9LCBjdXN0b21EZWNvZGVycyk7XG4gIGNvbnN0IGRlY29kZXJzID0ge1xuICAgIC4uLmZpbHRlcmVkRGVjb2RlcnMsXG4gICAgLi4uY3VzdG9tRGVjb2RlcnNcbiAgfTtcbiAgcmV0dXJuIHJlY3Vyc2VEZWNvZGUoZGVjb2RlSW5zdHJ1Y3Rpb25zLCBkZWNvZGVycywgc3RhY2spO1xufTtcbmNvbnN0IGRlY29kZVJlc3BvbnNlID0gYXN5bmMgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gIGxldCBjdXN0b21EZWNvZGVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIGlmIChyZXNwb25zZS5lbmNvZGVkRGF0YSkge1xuICAgIHJldHVybiBkZWNvZGUkMShyZXNwb25zZS5lbmNvZGVkRGF0YSwgY3VzdG9tRGVjb2RlcnMpO1xuICB9IGVsc2UgaWYgKHJlc3BvbnNlLnRyYW5zYWN0aW9uU3RhdHVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlc3BvbnNlLnRyYW5zYWN0aW9uU3RhdHVzLFxuICAgICAgZXZlbnRzOiBhd2FpdCBQcm9taXNlLmFsbChyZXNwb25zZS50cmFuc2FjdGlvblN0YXR1cy5ldmVudHMubWFwKGFzeW5jIGZ1bmN0aW9uIGRlY29kZUV2ZW50cyhlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogZS50eXBlLFxuICAgICAgICAgIHRyYW5zYWN0aW9uSWQ6IGUudHJhbnNhY3Rpb25JZCxcbiAgICAgICAgICB0cmFuc2FjdGlvbkluZGV4OiBlLnRyYW5zYWN0aW9uSW5kZXgsXG4gICAgICAgICAgZXZlbnRJbmRleDogZS5ldmVudEluZGV4LFxuICAgICAgICAgIGRhdGE6IGF3YWl0IGRlY29kZSQxKGUucGF5bG9hZCwgY3VzdG9tRGVjb2RlcnMpXG4gICAgICAgIH07XG4gICAgICB9KSlcbiAgICB9O1xuICB9IGVsc2UgaWYgKHJlc3BvbnNlLnRyYW5zYWN0aW9uKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnRyYW5zYWN0aW9uO1xuICB9IGVsc2UgaWYgKHJlc3BvbnNlLmV2ZW50cykge1xuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChyZXNwb25zZS5ldmVudHMubWFwKGFzeW5jIGZ1bmN0aW9uIGRlY29kZUV2ZW50cyhlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBibG9ja0lkOiBlLmJsb2NrSWQsXG4gICAgICAgIGJsb2NrSGVpZ2h0OiBlLmJsb2NrSGVpZ2h0LFxuICAgICAgICBibG9ja1RpbWVzdGFtcDogZS5ibG9ja1RpbWVzdGFtcCxcbiAgICAgICAgdHlwZTogZS50eXBlLFxuICAgICAgICB0cmFuc2FjdGlvbklkOiBlLnRyYW5zYWN0aW9uSWQsXG4gICAgICAgIHRyYW5zYWN0aW9uSW5kZXg6IGUudHJhbnNhY3Rpb25JbmRleCxcbiAgICAgICAgZXZlbnRJbmRleDogZS5ldmVudEluZGV4LFxuICAgICAgICBkYXRhOiBhd2FpdCBkZWNvZGUkMShlLnBheWxvYWQsIGN1c3RvbURlY29kZXJzKVxuICAgICAgfTtcbiAgICB9KSk7XG4gIH0gZWxzZSBpZiAocmVzcG9uc2UuYWNjb3VudCkge1xuICAgIHJldHVybiByZXNwb25zZS5hY2NvdW50O1xuICB9IGVsc2UgaWYgKHJlc3BvbnNlLmJsb2NrKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmJsb2NrO1xuICB9IGVsc2UgaWYgKHJlc3BvbnNlLmJsb2NrSGVhZGVyKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmJsb2NrSGVhZGVyO1xuICB9IGVsc2UgaWYgKHJlc3BvbnNlLmxhdGVzdEJsb2NrKSB7XG4gICAgbGF0ZXN0QmxvY2tEZXByZWNhdGlvbk5vdGljZSgpO1xuICAgIHJldHVybiByZXNwb25zZS5sYXRlc3RCbG9jaztcbiAgfSBlbHNlIGlmIChyZXNwb25zZS50cmFuc2FjdGlvbklkKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnRyYW5zYWN0aW9uSWQ7XG4gIH0gZWxzZSBpZiAocmVzcG9uc2UuY29sbGVjdGlvbikge1xuICAgIHJldHVybiByZXNwb25zZS5jb2xsZWN0aW9uO1xuICB9IGVsc2UgaWYgKHJlc3BvbnNlLm5ldHdvcmtQYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgY2hhaW5JZE1hcCA9IHtcbiAgICAgIFwiZmxvdy10ZXN0bmV0XCI6IFwidGVzdG5ldFwiLFxuICAgICAgXCJmbG93LW1haW5uZXRcIjogXCJtYWlubmV0XCIsXG4gICAgICBcImZsb3ctZW11bGF0b3JcIjogXCJsb2NhbFwiXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgY2hhaW5JZDogY2hhaW5JZE1hcFtyZXNwb25zZS5uZXR3b3JrUGFyYW1ldGVycy5jaGFpbklkXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBpc0ZuJDIgPSB2ID0+IHR5cGVvZiB2ID09PSBcImZ1bmN0aW9uXCI7XG5jb25zdCBpc1N0cmluZyQxID0gdiA9PiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIjtcbmNvbnN0IG9sZElkZW50aWZpZXJQYXR0ZXJuRm4gPSAoKSA9PiAvXFxiKDB4XFx3KylcXGIvZztcbmZ1bmN0aW9uIGlzT2xkSWRlbnRpZmllclN5bnRheChjYWRlbmNlKSB7XG4gIHJldHVybiBvbGRJZGVudGlmaWVyUGF0dGVybkZuKCkudGVzdChjYWRlbmNlKTtcbn1cbmNvbnN0IG5ld0lkZW50aWZpZXJQYXR0ZXJuRm4gPSAoKSA9PiAvaW1wb3J0XFxzK1wiKFxcdyspXCIvZztcbmZ1bmN0aW9uIGlzTmV3SWRlbnRpZmllclN5bnRheChjYWRlbmNlKSB7XG4gIHJldHVybiBuZXdJZGVudGlmaWVyUGF0dGVybkZuKCkudGVzdChjYWRlbmNlKTtcbn1cbmZ1bmN0aW9uIGdldENvbnRyYWN0SWRlbnRpZmllclN5bnRheE1hdGNoZXMoY2FkZW5jZSkge1xuICByZXR1cm4gY2FkZW5jZS5tYXRjaEFsbChuZXdJZGVudGlmaWVyUGF0dGVybkZuKCkpO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUNhZGVuY2UoaXgpIHtcbiAgaWYgKCFpc1RyYW5zYWN0aW9uKGl4KSAmJiAhaXNTY3JpcHQoaXgpKSByZXR1cm4gaXg7XG4gIHZhciBjYWRlbmNlID0gZ2V0KGl4LCBcIml4LmNhZGVuY2VcIik7XG4gIGludmFyaWFudCQxKGlzRm4kMihjYWRlbmNlKSB8fCBpc1N0cmluZyQxKGNhZGVuY2UpLCBcIkNhZGVuY2UgbmVlZHMgdG8gYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZy5cIik7XG4gIGlmIChpc0ZuJDIoY2FkZW5jZSkpIGNhZGVuY2UgPSBhd2FpdCBjYWRlbmNlKHt9KTtcbiAgaW52YXJpYW50JDEoaXNTdHJpbmckMShjYWRlbmNlKSwgXCJDYWRlbmNlIG5lZWRzIHRvIGJlIGEgc3RyaW5nIGF0IHRoaXMgcG9pbnQuXCIpO1xuICBpbnZhcmlhbnQkMSghaXNPbGRJZGVudGlmaWVyU3ludGF4KGNhZGVuY2UpIHx8ICFpc05ld0lkZW50aWZpZXJTeW50YXgoY2FkZW5jZSksIFwiQm90aCBhY2NvdW50IGlkZW50aWZpZXIgYW5kIGNvbnRyYWN0IGlkZW50aWZpZXIgc3ludGF4IG5vdCBzaW11bHRhbmVvdXNseSBzdXBwb3J0ZWQuXCIpO1xuICBpZiAoaXNPbGRJZGVudGlmaWVyU3ludGF4KGNhZGVuY2UpKSB7XG4gICAgY2FkZW5jZSA9IGF3YWl0IGNvbmZpZygpLndoZXJlKC9eMHgvKS50aGVuKGQgPT4gT2JqZWN0LmVudHJpZXMoZCkucmVkdWNlKChjYWRlbmNlLCBfcmVmKSA9PiB7XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0gX3JlZjtcbiAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChcIihcXFxcYlwiICsga2V5ICsgXCJcXFxcYilcIiwgXCJnXCIpO1xuICAgICAgcmV0dXJuIGNhZGVuY2UucmVwbGFjZShyZWdleCwgdmFsdWUpO1xuICAgIH0sIGNhZGVuY2UpKTtcbiAgfVxuICBpZiAoaXNOZXdJZGVudGlmaWVyU3ludGF4KGNhZGVuY2UpKSB7XG4gICAgZm9yIChjb25zdCBbZnVsbE1hdGNoLCBjb250cmFjdE5hbWVdIG9mIGdldENvbnRyYWN0SWRlbnRpZmllclN5bnRheE1hdGNoZXMoY2FkZW5jZSkpIHtcbiAgICAgIGNvbnN0IGFkZHJlc3MgPSBhd2FpdCBjb25maWcoKS5nZXQoYHN5c3RlbS5jb250cmFjdHMuJHtjb250cmFjdE5hbWV9YCk7XG4gICAgICBpZiAoYWRkcmVzcykge1xuICAgICAgICBjYWRlbmNlID0gY2FkZW5jZS5yZXBsYWNlKGZ1bGxNYXRjaCwgYGltcG9ydCAke2NvbnRyYWN0TmFtZX0gZnJvbSAke3dpdGhQcmVmaXgoYWRkcmVzcyl9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dnZXIubG9nKHtcbiAgICAgICAgICB0aXRsZTogXCJDb250cmFjdCBQbGFjZWhvbGRlciBub3QgZm91bmRcIixcbiAgICAgICAgICBtZXNzYWdlOiBgQ2Fubm90IGZpbmQgYSB2YWx1ZSBmb3IgY29udHJhY3QgcGxhY2Vob2xkZXIgJHtjb250cmFjdE5hbWV9LiBQbGVhc2UgYWRkIHRvIHlvdXIgZmxvdy5qc29uIG9yIGV4cGxpY2l0bHkgYWRkIGl0IHRvIHRoZSBjb25maWcgJ2NvbnRyYWN0cy4qJyBuYW1lc3BhY2UuYCxcbiAgICAgICAgICBsZXZlbDogbG9nZ2VyLkxFVkVMUy53YXJuXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFdlIG5lZWQgdG8gbW92ZSB0aGlzIG92ZXIgaW4gYW55IGNhc2UuXG4gIGl4Lm1lc3NhZ2UuY2FkZW5jZSA9IGNhZGVuY2U7XG4gIHJldHVybiBpeDtcbn1cblxuY29uc3QgaXNGbiQxID0gdiA9PiB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiO1xuZnVuY3Rpb24gY2FzdChhcmcpIHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIGludmFyaWFudCQxKHR5cGVvZiBhcmcueGZvcm0gIT0gbnVsbCwgYE5vIHR5cGUgc3BlY2lmaWVkIGZvciBhcmd1bWVudDogJHthcmcudmFsdWV9YCk7XG4gIGlmIChpc0ZuJDEoYXJnLnhmb3JtKSkgcmV0dXJuIGFyZy54Zm9ybShhcmcudmFsdWUpO1xuICBpZiAoaXNGbiQxKGFyZy54Zm9ybS5hc0FyZ3VtZW50KSkgcmV0dXJuIGFyZy54Zm9ybS5hc0FyZ3VtZW50KGFyZy52YWx1ZSk7XG5cbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIGludmFyaWFudCQxKGZhbHNlLCBgSW52YWxpZCBBcmd1bWVudGAsIGFyZyk7XG59XG5hc3luYyBmdW5jdGlvbiBoYW5kbGVBcmdSZXNvbHV0aW9uKGFyZykge1xuICBsZXQgZGVwdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDM7XG4gIGludmFyaWFudCQxKGRlcHRoID4gMCwgYEFyZ3VtZW50IFJlc29sdmUgUmVjdXJzaW9uIExpbWl0IEV4Y2VlZGVkIGZvciBBcmc6ICR7YXJnLnRlbXBJZH1gKTtcbiAgaWYgKGlzRm4kMShhcmcucmVzb2x2ZUFyZ3VtZW50KSkge1xuICAgIGNvbnN0IHJlc29sdmVkQXJnID0gYXdhaXQgYXJnLnJlc29sdmVBcmd1bWVudCgpO1xuICAgIHJldHVybiBoYW5kbGVBcmdSZXNvbHV0aW9uKHJlc29sdmVkQXJnLCBkZXB0aCAtIDEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhcmc7XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVBcmd1bWVudHMoaXgpIHtcbiAgaWYgKGlzVHJhbnNhY3Rpb24oaXgpIHx8IGlzU2NyaXB0KGl4KSkge1xuICAgIGZvciAobGV0IFtpZCwgYXJnXSBvZiBPYmplY3QuZW50cmllcyhpeC5hcmd1bWVudHMpKSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBoYW5kbGVBcmdSZXNvbHV0aW9uKGFyZyk7XG4gICAgICBpeC5hcmd1bWVudHNbaWRdLmFzQXJndW1lbnQgPSBjYXN0KHJlcyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpeDtcbn1cblxuY29uc3QgZW5jb2RlVHJhbnNhY3Rpb25QYXlsb2FkID0gdHggPT4gcHJlcGVuZFRyYW5zYWN0aW9uRG9tYWluVGFnKHJscEVuY29kZShwcmVwYXJlUGF5bG9hZCh0eCkpKTtcbmNvbnN0IGVuY29kZVRyYW5zYWN0aW9uRW52ZWxvcGUgPSB0eCA9PiBwcmVwZW5kVHJhbnNhY3Rpb25Eb21haW5UYWcocmxwRW5jb2RlKHByZXBhcmVFbnZlbG9wZSh0eCkpKTtcbmNvbnN0IGVuY29kZVR4SWRGcm9tVm91Y2hlciA9IHZvdWNoZXIgPT4gc2hhM18yNTYocmxwRW5jb2RlKHByZXBhcmVWb3VjaGVyKHZvdWNoZXIpKSk7XG5jb25zdCByaWdodFBhZGRlZEhleEJ1ZmZlciA9ICh2YWx1ZSwgcGFkKSA9PiBCdWZmZXIuZnJvbSh2YWx1ZS5wYWRFbmQocGFkICogMiwgMCksIFwiaGV4XCIpO1xuY29uc3QgbGVmdFBhZGRlZEhleEJ1ZmZlciA9ICh2YWx1ZSwgcGFkKSA9PiBCdWZmZXIuZnJvbSh2YWx1ZS5wYWRTdGFydChwYWQgKiAyLCAwKSwgXCJoZXhcIik7XG5jb25zdCBUUkFOU0FDVElPTl9ET01BSU5fVEFHID0gcmlnaHRQYWRkZWRIZXhCdWZmZXIoQnVmZmVyLmZyb20oXCJGTE9XLVYwLjAtdHJhbnNhY3Rpb25cIikudG9TdHJpbmcoXCJoZXhcIiksIDMyKS50b1N0cmluZyhcImhleFwiKTtcbmNvbnN0IHByZXBlbmRUcmFuc2FjdGlvbkRvbWFpblRhZyA9IHR4ID0+IFRSQU5TQUNUSU9OX0RPTUFJTl9UQUcgKyB0eDtcbmNvbnN0IGFkZHJlc3NCdWZmZXIgPSBhZGRyID0+IGxlZnRQYWRkZWRIZXhCdWZmZXIoYWRkciwgOCk7XG5jb25zdCBibG9ja0J1ZmZlciA9IGJsb2NrID0+IGxlZnRQYWRkZWRIZXhCdWZmZXIoYmxvY2ssIDMyKTtcbmNvbnN0IGFyZ3VtZW50VG9TdHJpbmcgPSBhcmcgPT4gQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoYXJnKSwgXCJ1dGY4XCIpO1xuY29uc3Qgc2NyaXB0QnVmZmVyID0gc2NyaXB0ID0+IEJ1ZmZlci5mcm9tKHNjcmlwdCwgXCJ1dGY4XCIpO1xuY29uc3Qgc2lnbmF0dXJlQnVmZmVyID0gc2lnbmF0dXJlID0+IEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSwgXCJoZXhcIik7XG5jb25zdCBybHBFbmNvZGUgPSB2ID0+IHtcbiAgcmV0dXJuIGVuY29kZSh2KS50b1N0cmluZyhcImhleFwiKTtcbn07XG5jb25zdCBzaGEzXzI1NiA9IG1zZyA9PiB7XG4gIGNvbnN0IHNoYSA9IG5ldyBTSEEzKDI1Nik7XG4gIHNoYS51cGRhdGUoQnVmZmVyLmZyb20obXNnLCBcImhleFwiKSk7XG4gIHJldHVybiBzaGEuZGlnZXN0KCkudG9TdHJpbmcoXCJoZXhcIik7XG59O1xuY29uc3QgcHJlcGFyZVBheWxvYWQgPSB0eCA9PiB7XG4gIHZhbGlkYXRlUGF5bG9hZCh0eCk7XG4gIHJldHVybiBbc2NyaXB0QnVmZmVyKHR4LmNhZGVuY2UpLCB0eC5hcmd1bWVudHMubWFwKGFyZ3VtZW50VG9TdHJpbmcpLCBibG9ja0J1ZmZlcih0eC5yZWZCbG9jayksIHR4LmNvbXB1dGVMaW1pdCwgYWRkcmVzc0J1ZmZlcihzYW5zUHJlZml4KHR4LnByb3Bvc2FsS2V5LmFkZHJlc3MpKSwgdHgucHJvcG9zYWxLZXkua2V5SWQsIHR4LnByb3Bvc2FsS2V5LnNlcXVlbmNlTnVtLCBhZGRyZXNzQnVmZmVyKHNhbnNQcmVmaXgodHgucGF5ZXIpKSwgdHguYXV0aG9yaXplcnMubWFwKGF1dGhvcml6ZXIgPT4gYWRkcmVzc0J1ZmZlcihzYW5zUHJlZml4KGF1dGhvcml6ZXIpKSldO1xufTtcbmNvbnN0IHByZXBhcmVFbnZlbG9wZSA9IHR4ID0+IHtcbiAgdmFsaWRhdGVFbnZlbG9wZSh0eCk7XG4gIHJldHVybiBbcHJlcGFyZVBheWxvYWQodHgpLCBwcmVwYXJlUGF5bG9hZFNpZ25hdHVyZXModHgpXTtcbn07XG5jb25zdCBwcmVwYXJlUGF5bG9hZFNpZ25hdHVyZXMgPSB0eCA9PiB7XG4gIGNvbnN0IHNpZ25lcnMgPSBjb2xsZWN0U2lnbmVycyh0eCk7XG4gIHJldHVybiB0eC5wYXlsb2FkU2lncy5tYXAoc2lnID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgc2lnbmVySW5kZXg6IHNpZ25lcnMuZ2V0KHNpZy5hZGRyZXNzKSxcbiAgICAgIGtleUlkOiBzaWcua2V5SWQsXG4gICAgICBzaWc6IHNpZy5zaWdcbiAgICB9O1xuICB9KS5zb3J0KChhLCBiKSA9PiB7XG4gICAgaWYgKGEuc2lnbmVySW5kZXggPiBiLnNpZ25lckluZGV4KSByZXR1cm4gMTtcbiAgICBpZiAoYS5zaWduZXJJbmRleCA8IGIuc2lnbmVySW5kZXgpIHJldHVybiAtMTtcbiAgICBpZiAoYS5rZXlJZCA+IGIua2V5SWQpIHJldHVybiAxO1xuICAgIGlmIChhLmtleUlkIDwgYi5rZXlJZCkgcmV0dXJuIC0xO1xuICB9KS5tYXAoc2lnID0+IHtcbiAgICByZXR1cm4gW3NpZy5zaWduZXJJbmRleCwgc2lnLmtleUlkLCBzaWduYXR1cmVCdWZmZXIoc2lnLnNpZyldO1xuICB9KTtcbn07XG5jb25zdCBjb2xsZWN0U2lnbmVycyA9IHR4ID0+IHtcbiAgY29uc3Qgc2lnbmVycyA9IG5ldyBNYXAoKTtcbiAgbGV0IGkgPSAwO1xuICBjb25zdCBhZGRTaWduZXIgPSBhZGRyID0+IHtcbiAgICBpZiAoIXNpZ25lcnMuaGFzKGFkZHIpKSB7XG4gICAgICBzaWduZXJzLnNldChhZGRyLCBpKTtcbiAgICAgIGkrKztcbiAgICB9XG4gIH07XG4gIGFkZFNpZ25lcih0eC5wcm9wb3NhbEtleS5hZGRyZXNzKTtcbiAgYWRkU2lnbmVyKHR4LnBheWVyKTtcbiAgdHguYXV0aG9yaXplcnMuZm9yRWFjaChhZGRTaWduZXIpO1xuICByZXR1cm4gc2lnbmVycztcbn07XG5jb25zdCBwcmVwYXJlVm91Y2hlciA9IHZvdWNoZXIgPT4ge1xuICB2YWxpZGF0ZVZvdWNoZXIodm91Y2hlcik7XG4gIGNvbnN0IHNpZ25lcnMgPSBjb2xsZWN0U2lnbmVycyh2b3VjaGVyKTtcbiAgY29uc3QgcHJlcGFyZVNpZ3MgPSBzaWdzID0+IHtcbiAgICByZXR1cm4gc2lncy5tYXAoX3JlZiA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBhZGRyZXNzLFxuICAgICAgICBrZXlJZCxcbiAgICAgICAgc2lnXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNpZ25lckluZGV4OiBzaWduZXJzLmdldChhZGRyZXNzKSxcbiAgICAgICAga2V5SWQsXG4gICAgICAgIHNpZ1xuICAgICAgfTtcbiAgICB9KS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBpZiAoYS5zaWduZXJJbmRleCA+IGIuc2lnbmVySW5kZXgpIHJldHVybiAxO1xuICAgICAgaWYgKGEuc2lnbmVySW5kZXggPCBiLnNpZ25lckluZGV4KSByZXR1cm4gLTE7XG4gICAgICBpZiAoYS5rZXlJZCA+IGIua2V5SWQpIHJldHVybiAxO1xuICAgICAgaWYgKGEua2V5SWQgPCBiLmtleUlkKSByZXR1cm4gLTE7XG4gICAgfSkubWFwKHNpZyA9PiB7XG4gICAgICByZXR1cm4gW3NpZy5zaWduZXJJbmRleCwgc2lnLmtleUlkLCBzaWduYXR1cmVCdWZmZXIoc2lnLnNpZyldO1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gW1tzY3JpcHRCdWZmZXIodm91Y2hlci5jYWRlbmNlKSwgdm91Y2hlci5hcmd1bWVudHMubWFwKGFyZ3VtZW50VG9TdHJpbmcpLCBibG9ja0J1ZmZlcih2b3VjaGVyLnJlZkJsb2NrKSwgdm91Y2hlci5jb21wdXRlTGltaXQsIGFkZHJlc3NCdWZmZXIoc2Fuc1ByZWZpeCh2b3VjaGVyLnByb3Bvc2FsS2V5LmFkZHJlc3MpKSwgdm91Y2hlci5wcm9wb3NhbEtleS5rZXlJZCwgdm91Y2hlci5wcm9wb3NhbEtleS5zZXF1ZW5jZU51bSwgYWRkcmVzc0J1ZmZlcihzYW5zUHJlZml4KHZvdWNoZXIucGF5ZXIpKSwgdm91Y2hlci5hdXRob3JpemVycy5tYXAoYXV0aG9yaXplciA9PiBhZGRyZXNzQnVmZmVyKHNhbnNQcmVmaXgoYXV0aG9yaXplcikpKV0sIHByZXBhcmVTaWdzKHZvdWNoZXIucGF5bG9hZFNpZ3MpLCBwcmVwYXJlU2lncyh2b3VjaGVyLmVudmVsb3BlU2lncyldO1xufTtcbmNvbnN0IHZhbGlkYXRlUGF5bG9hZCA9IHR4ID0+IHtcbiAgcGF5bG9hZEZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IGNoZWNrRmllbGQodHgsIGZpZWxkKSk7XG4gIHByb3Bvc2FsS2V5RmllbGRzLmZvckVhY2goZmllbGQgPT4gY2hlY2tGaWVsZCh0eC5wcm9wb3NhbEtleSwgZmllbGQsIFwicHJvcG9zYWxLZXlcIikpO1xufTtcbmNvbnN0IHZhbGlkYXRlRW52ZWxvcGUgPSB0eCA9PiB7XG4gIHBheWxvYWRTaWdzRmllbGRzLmZvckVhY2goZmllbGQgPT4gY2hlY2tGaWVsZCh0eCwgZmllbGQpKTtcbiAgdHgucGF5bG9hZFNpZ3MuZm9yRWFjaCgoc2lnLCBpbmRleCkgPT4ge1xuICAgIHBheWxvYWRTaWdGaWVsZHMuZm9yRWFjaChmaWVsZCA9PiBjaGVja0ZpZWxkKHNpZywgZmllbGQsIFwicGF5bG9hZFNpZ3NcIiwgaW5kZXgpKTtcbiAgfSk7XG59O1xuY29uc3QgdmFsaWRhdGVWb3VjaGVyID0gdm91Y2hlciA9PiB7XG4gIHBheWxvYWRGaWVsZHMuZm9yRWFjaChmaWVsZCA9PiBjaGVja0ZpZWxkKHZvdWNoZXIsIGZpZWxkKSk7XG4gIHByb3Bvc2FsS2V5RmllbGRzLmZvckVhY2goZmllbGQgPT4gY2hlY2tGaWVsZCh2b3VjaGVyLnByb3Bvc2FsS2V5LCBmaWVsZCwgXCJwcm9wb3NhbEtleVwiKSk7XG4gIHBheWxvYWRTaWdzRmllbGRzLmZvckVhY2goZmllbGQgPT4gY2hlY2tGaWVsZCh2b3VjaGVyLCBmaWVsZCkpO1xuICB2b3VjaGVyLnBheWxvYWRTaWdzLmZvckVhY2goKHNpZywgaW5kZXgpID0+IHtcbiAgICBwYXlsb2FkU2lnRmllbGRzLmZvckVhY2goZmllbGQgPT4gY2hlY2tGaWVsZChzaWcsIGZpZWxkLCBcInBheWxvYWRTaWdzXCIsIGluZGV4KSk7XG4gIH0pO1xuICBlbnZlbG9wZVNpZ3NGaWVsZHMuZm9yRWFjaChmaWVsZCA9PiBjaGVja0ZpZWxkKHZvdWNoZXIsIGZpZWxkKSk7XG4gIHZvdWNoZXIuZW52ZWxvcGVTaWdzLmZvckVhY2goKHNpZywgaW5kZXgpID0+IHtcbiAgICBlbnZlbG9wZVNpZ0ZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IGNoZWNrRmllbGQoc2lnLCBmaWVsZCwgXCJlbnZlbG9wZVNpZ3NcIiwgaW5kZXgpKTtcbiAgfSk7XG59O1xuY29uc3QgaXNOdW1iZXIgPSB2ID0+IHR5cGVvZiB2ID09PSBcIm51bWJlclwiO1xuY29uc3QgaXNTdHJpbmcgPSB2ID0+IHR5cGVvZiB2ID09PSBcInN0cmluZ1wiO1xuY29uc3QgaXNPYmplY3QgPSB2ID0+IHYgIT09IG51bGwgJiYgdHlwZW9mIHYgPT09IFwib2JqZWN0XCI7XG5jb25zdCBpc0FycmF5ID0gdiA9PiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgQXJyYXk7XG5jb25zdCBwYXlsb2FkRmllbGRzID0gW3tcbiAgbmFtZTogXCJjYWRlbmNlXCIsXG4gIGNoZWNrOiBpc1N0cmluZ1xufSwge1xuICBuYW1lOiBcImFyZ3VtZW50c1wiLFxuICBjaGVjazogaXNBcnJheVxufSwge1xuICBuYW1lOiBcInJlZkJsb2NrXCIsXG4gIGNoZWNrOiBpc1N0cmluZyxcbiAgZGVmYXVsdFZhbDogXCIwXCJcbn0sIHtcbiAgbmFtZTogXCJjb21wdXRlTGltaXRcIixcbiAgY2hlY2s6IGlzTnVtYmVyXG59LCB7XG4gIG5hbWU6IFwicHJvcG9zYWxLZXlcIixcbiAgY2hlY2s6IGlzT2JqZWN0XG59LCB7XG4gIG5hbWU6IFwicGF5ZXJcIixcbiAgY2hlY2s6IGlzU3RyaW5nXG59LCB7XG4gIG5hbWU6IFwiYXV0aG9yaXplcnNcIixcbiAgY2hlY2s6IGlzQXJyYXlcbn1dO1xuY29uc3QgcHJvcG9zYWxLZXlGaWVsZHMgPSBbe1xuICBuYW1lOiBcImFkZHJlc3NcIixcbiAgY2hlY2s6IGlzU3RyaW5nXG59LCB7XG4gIG5hbWU6IFwia2V5SWRcIixcbiAgY2hlY2s6IGlzTnVtYmVyXG59LCB7XG4gIG5hbWU6IFwic2VxdWVuY2VOdW1cIixcbiAgY2hlY2s6IGlzTnVtYmVyXG59XTtcbmNvbnN0IHBheWxvYWRTaWdzRmllbGRzID0gW3tcbiAgbmFtZTogXCJwYXlsb2FkU2lnc1wiLFxuICBjaGVjazogaXNBcnJheVxufV07XG5jb25zdCBwYXlsb2FkU2lnRmllbGRzID0gW3tcbiAgbmFtZTogXCJhZGRyZXNzXCIsXG4gIGNoZWNrOiBpc1N0cmluZ1xufSwge1xuICBuYW1lOiBcImtleUlkXCIsXG4gIGNoZWNrOiBpc051bWJlclxufSwge1xuICBuYW1lOiBcInNpZ1wiLFxuICBjaGVjazogaXNTdHJpbmdcbn1dO1xuY29uc3QgZW52ZWxvcGVTaWdzRmllbGRzID0gW3tcbiAgbmFtZTogXCJlbnZlbG9wZVNpZ3NcIixcbiAgY2hlY2s6IGlzQXJyYXlcbn1dO1xuY29uc3QgZW52ZWxvcGVTaWdGaWVsZHMgPSBbe1xuICBuYW1lOiBcImFkZHJlc3NcIixcbiAgY2hlY2s6IGlzU3RyaW5nXG59LCB7XG4gIG5hbWU6IFwia2V5SWRcIixcbiAgY2hlY2s6IGlzTnVtYmVyXG59LCB7XG4gIG5hbWU6IFwic2lnXCIsXG4gIGNoZWNrOiBpc1N0cmluZ1xufV07XG5jb25zdCBjaGVja0ZpZWxkID0gKG9iaiwgZmllbGQsIGJhc2UsIGluZGV4KSA9PiB7XG4gIGNvbnN0IHtcbiAgICBuYW1lLFxuICAgIGNoZWNrLFxuICAgIGRlZmF1bHRWYWxcbiAgfSA9IGZpZWxkO1xuICBpZiAob2JqW25hbWVdID09IG51bGwgJiYgZGVmYXVsdFZhbCAhPSBudWxsKSBvYmpbbmFtZV0gPSBkZWZhdWx0VmFsO1xuICBpZiAob2JqW25hbWVdID09IG51bGwpIHRocm93IG1pc3NpbmdGaWVsZEVycm9yKG5hbWUsIGJhc2UsIGluZGV4KTtcbiAgaWYgKCFjaGVjayhvYmpbbmFtZV0pKSB0aHJvdyBpbnZhbGlkRmllbGRFcnJvcihuYW1lLCBiYXNlLCBpbmRleCk7XG59O1xuY29uc3QgcHJpbnRGaWVsZE5hbWUgPSAoZmllbGQsIGJhc2UsIGluZGV4KSA9PiB7XG4gIGlmICghIWJhc2UpIHJldHVybiBpbmRleCA9PSBudWxsID8gYCR7YmFzZX0uJHtmaWVsZH1gIDogYCR7YmFzZX0uJHtpbmRleH0uJHtmaWVsZH1gO1xuICByZXR1cm4gZmllbGQ7XG59O1xuY29uc3QgbWlzc2luZ0ZpZWxkRXJyb3IgPSAoZmllbGQsIGJhc2UsIGluZGV4KSA9PiBuZXcgRXJyb3IoYE1pc3NpbmcgZmllbGQgJHtwcmludEZpZWxkTmFtZShmaWVsZCwgYmFzZSwgaW5kZXgpfWApO1xuY29uc3QgaW52YWxpZEZpZWxkRXJyb3IgPSAoZmllbGQsIGJhc2UsIGluZGV4KSA9PiBuZXcgRXJyb3IoYEludmFsaWQgZmllbGQgJHtwcmludEZpZWxkTmFtZShmaWVsZCwgYmFzZSwgaW5kZXgpfWApO1xuXG5mdW5jdGlvbiBmaW5kSW5zaWRlU2lnbmVycyhpeCkge1xuICAvLyBJbnNpZGUgU2lnbmVycyBBcmU6IChhdXRob3JpemVycyArIHByb3Bvc2VyKSAtIHBheWVyXG4gIGxldCBpbnNpZGUgPSBuZXcgU2V0KGl4LmF1dGhvcml6YXRpb25zKTtcbiAgaW5zaWRlLmFkZChpeC5wcm9wb3Nlcik7XG4gIGlmIChBcnJheS5pc0FycmF5KGl4LnBheWVyKSkge1xuICAgIGl4LnBheWVyLmZvckVhY2gocCA9PiBpbnNpZGUuZGVsZXRlKHApKTtcbiAgfSBlbHNlIHtcbiAgICBpbnNpZGUuZGVsZXRlKGl4LnBheWVyKTtcbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShpbnNpZGUpO1xufVxuZnVuY3Rpb24gZmluZE91dHNpZGVTaWduZXJzKGl4KSB7XG4gIC8vIE91dHNpZGUgU2lnbmVycyBBcmU6IChwYXllcilcbiAgbGV0IG91dHNpZGUgPSBuZXcgU2V0KEFycmF5LmlzQXJyYXkoaXgucGF5ZXIpID8gaXgucGF5ZXIgOiBbaXgucGF5ZXJdKTtcbiAgcmV0dXJuIEFycmF5LmZyb20ob3V0c2lkZSk7XG59XG5jb25zdCBjcmVhdGVTaWduYWJsZVZvdWNoZXIgPSBpeCA9PiB7XG4gIGNvbnN0IGJ1aWxkQXV0aG9yaXplcnMgPSAoKSA9PiB7XG4gICAgY29uc3QgYXV0aG9yaXphdGlvbnMgPSBpeC5hdXRob3JpemF0aW9ucy5tYXAoY2lkID0+IHdpdGhQcmVmaXgoaXguYWNjb3VudHNbY2lkXS5hZGRyKSkucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiB7XG4gICAgICByZXR1cm4gcHJldi5maW5kKGl0ZW0gPT4gaXRlbSA9PT0gY3VycmVudCkgPyBwcmV2IDogWy4uLnByZXYsIGN1cnJlbnRdO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4gYXV0aG9yaXphdGlvbnNbMF0gPyBhdXRob3JpemF0aW9ucyA6IFtdO1xuICB9O1xuICBjb25zdCBidWlsZEluc2lkZVNpZ25lcnMgPSAoKSA9PiBmaW5kSW5zaWRlU2lnbmVycyhpeCkubWFwKGlkID0+ICh7XG4gICAgYWRkcmVzczogd2l0aFByZWZpeChpeC5hY2NvdW50c1tpZF0uYWRkciksXG4gICAga2V5SWQ6IGl4LmFjY291bnRzW2lkXS5rZXlJZCxcbiAgICBzaWc6IGl4LmFjY291bnRzW2lkXS5zaWduYXR1cmVcbiAgfSkpO1xuICBjb25zdCBidWlsZE91dHNpZGVTaWduZXJzID0gKCkgPT4gZmluZE91dHNpZGVTaWduZXJzKGl4KS5tYXAoaWQgPT4gKHtcbiAgICBhZGRyZXNzOiB3aXRoUHJlZml4KGl4LmFjY291bnRzW2lkXS5hZGRyKSxcbiAgICBrZXlJZDogaXguYWNjb3VudHNbaWRdLmtleUlkLFxuICAgIHNpZzogaXguYWNjb3VudHNbaWRdLnNpZ25hdHVyZVxuICB9KSk7XG4gIHJldHVybiB7XG4gICAgY2FkZW5jZTogaXgubWVzc2FnZS5jYWRlbmNlLFxuICAgIHJlZkJsb2NrOiBpeC5tZXNzYWdlLnJlZkJsb2NrIHx8IG51bGwsXG4gICAgY29tcHV0ZUxpbWl0OiBpeC5tZXNzYWdlLmNvbXB1dGVMaW1pdCxcbiAgICBhcmd1bWVudHM6IGl4Lm1lc3NhZ2UuYXJndW1lbnRzLm1hcChpZCA9PiBpeC5hcmd1bWVudHNbaWRdLmFzQXJndW1lbnQpLFxuICAgIHByb3Bvc2FsS2V5OiB7XG4gICAgICBhZGRyZXNzOiB3aXRoUHJlZml4KGl4LmFjY291bnRzW2l4LnByb3Bvc2VyXS5hZGRyKSxcbiAgICAgIGtleUlkOiBpeC5hY2NvdW50c1tpeC5wcm9wb3Nlcl0ua2V5SWQsXG4gICAgICBzZXF1ZW5jZU51bTogaXguYWNjb3VudHNbaXgucHJvcG9zZXJdLnNlcXVlbmNlTnVtXG4gICAgfSxcbiAgICBwYXllcjogd2l0aFByZWZpeChpeC5hY2NvdW50c1tBcnJheS5pc0FycmF5KGl4LnBheWVyKSA/IGl4LnBheWVyWzBdIDogaXgucGF5ZXJdLmFkZHIpLFxuICAgIGF1dGhvcml6ZXJzOiBidWlsZEF1dGhvcml6ZXJzKCksXG4gICAgcGF5bG9hZFNpZ3M6IGJ1aWxkSW5zaWRlU2lnbmVycygpLFxuICAgIGVudmVsb3BlU2lnczogYnVpbGRPdXRzaWRlU2lnbmVycygpXG4gIH07XG59O1xuY29uc3Qgdm91Y2hlclRvVHhJZCA9IHZvdWNoZXIgPT4ge1xuICByZXR1cm4gZW5jb2RlVHhJZEZyb21Wb3VjaGVyKHZvdWNoZXIpO1xufTtcblxuY29uc3QgaWRvZiQxID0gYWNjdCA9PiBgJHt3aXRoUHJlZml4KGFjY3QuYWRkcil9LSR7YWNjdC5rZXlJZH1gO1xuY29uc3QgaXNGbiA9IHYgPT4gdHlwZW9mIHYgPT09IFwiZnVuY3Rpb25cIjtcbmZ1bmN0aW9uIGJ1aWxkUHJlU2lnbmFibGUoYWNjdCwgaXgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4ge1xuICAgICAgZl90eXBlOiBcIlByZVNpZ25hYmxlXCIsXG4gICAgICBmX3ZzbjogXCIxLjAuMVwiLFxuICAgICAgcm9sZXM6IGFjY3Qucm9sZSxcbiAgICAgIGNhZGVuY2U6IGl4Lm1lc3NhZ2UuY2FkZW5jZSxcbiAgICAgIGFyZ3M6IGl4Lm1lc3NhZ2UuYXJndW1lbnRzLm1hcChkID0+IGl4LmFyZ3VtZW50c1tkXS5hc0FyZ3VtZW50KSxcbiAgICAgIGRhdGE6IHt9LFxuICAgICAgaW50ZXJhY3Rpb246IGl4LFxuICAgICAgdm91Y2hlcjogY3JlYXRlU2lnbmFibGVWb3VjaGVyKGl4KVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcImJ1aWxkUHJlU2lnbmFibGVcIiwgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiBjb2xsZWN0QWNjb3VudHMoaXgsIGFjY291bnRzLCBsYXN0KSB7XG4gIGxldCBkZXB0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMztcbiAgaW52YXJpYW50JDEoZGVwdGgsIFwiQWNjb3VudCBSZXNvbHZlIFJlY3Vyc2lvbiBMaW1pdCBFeGNlZWRlZFwiLCB7XG4gICAgaXgsXG4gICAgYWNjb3VudHNcbiAgfSk7XG4gIGxldCBhdXRob3JpemF0aW9ucyA9IFtdO1xuICBmb3IgKGxldCBheCBvZiBhY2NvdW50cykge1xuICAgIGxldCByZXNvbHZlID0gYXgucmVzb2x2ZTtcbiAgICBheC5yZXNvbHZlID0gbnVsbDtcbiAgICB2YXIgb2xkID0gbGFzdCB8fCBheDtcbiAgICBpZiAoaXNGbihyZXNvbHZlKSkgYXggPSBhd2FpdCByZXNvbHZlKGF4LCBidWlsZFByZVNpZ25hYmxlKGF4LCBpeCkpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGF4KSkge1xuICAgICAgYXdhaXQgY29sbGVjdEFjY291bnRzKGl4LCBheCwgb2xkLCBkZXB0aCAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXguYWRkcikge1xuICAgICAgICBheC5hZGRyID0gc2Fuc1ByZWZpeChheC5hZGRyKTtcbiAgICAgIH1cbiAgICAgIGlmIChheC5hZGRyICE9IG51bGwgJiYgYXgua2V5SWQgIT0gbnVsbCkge1xuICAgICAgICBheC50ZW1wSWQgPSBpZG9mJDEoYXgpO1xuICAgICAgfVxuICAgICAgaXguYWNjb3VudHNbYXgudGVtcElkXSA9IGl4LmFjY291bnRzW2F4LnRlbXBJZF0gfHwgYXg7XG4gICAgICBpeC5hY2NvdW50c1theC50ZW1wSWRdLnJvbGUucHJvcG9zZXIgPSBpeC5hY2NvdW50c1theC50ZW1wSWRdLnJvbGUucHJvcG9zZXIgfHwgYXgucm9sZS5wcm9wb3NlcjtcbiAgICAgIGl4LmFjY291bnRzW2F4LnRlbXBJZF0ucm9sZS5wYXllciA9IGl4LmFjY291bnRzW2F4LnRlbXBJZF0ucm9sZS5wYXllciB8fCBheC5yb2xlLnBheWVyO1xuICAgICAgaXguYWNjb3VudHNbYXgudGVtcElkXS5yb2xlLmF1dGhvcml6ZXIgPSBpeC5hY2NvdW50c1theC50ZW1wSWRdLnJvbGUuYXV0aG9yaXplciB8fCBheC5yb2xlLmF1dGhvcml6ZXI7XG4gICAgICBpZiAoaXguYWNjb3VudHNbYXgudGVtcElkXS5yb2xlLnByb3Bvc2VyICYmIGl4LnByb3Bvc2VyID09PSBvbGQudGVtcElkKSB7XG4gICAgICAgIGl4LnByb3Bvc2VyID0gYXgudGVtcElkO1xuICAgICAgfVxuICAgICAgaWYgKGl4LmFjY291bnRzW2F4LnRlbXBJZF0ucm9sZS5wYXllcikge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpeC5wYXllcikpIHtcbiAgICAgICAgICBpeC5wYXllciA9IEFycmF5LmZyb20obmV3IFNldChbLi4uaXgucGF5ZXIsIGF4LnRlbXBJZF0ubWFwKGQgPT4gZCA9PT0gb2xkLnRlbXBJZCA/IGF4LnRlbXBJZCA6IGQpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXgucGF5ZXIgPSBBcnJheS5mcm9tKG5ldyBTZXQoW2l4LnBheWVyLCBheC50ZW1wSWRdLm1hcChkID0+IGQgPT09IG9sZC50ZW1wSWQgPyBheC50ZW1wSWQgOiBkKSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpeC5wYXllci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIHBheWVyIGR1cHMgYmFzZWQgb24gYWRkciBhbmQga2V5SWRcbiAgICAgICAgICBjb25zdCBkdXBMaXN0ID0gW107XG4gICAgICAgICAgY29uc3QgcGF5ZXJBY2N0cyA9IFtdO1xuICAgICAgICAgIGl4LnBheWVyID0gaXgucGF5ZXIucmVkdWNlKChnLCB0ZW1wSWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgYWRkclxuICAgICAgICAgICAgfSA9IGl4LmFjY291bnRzW3RlbXBJZF07XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBpZG9mJDEoaXguYWNjb3VudHNbdGVtcElkXSk7XG4gICAgICAgICAgICBwYXllckFjY3RzLnB1c2goYWRkcik7XG4gICAgICAgICAgICBpZiAoZHVwTGlzdC5pbmNsdWRlcyhrZXkpKSByZXR1cm4gZztcbiAgICAgICAgICAgIGR1cExpc3QucHVzaChrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIFsuLi5nLCB0ZW1wSWRdO1xuICAgICAgICAgIH0sIFtdKTtcbiAgICAgICAgICBjb25zdCBtdWx0aUFjY3RzID0gQXJyYXkuZnJvbShuZXcgU2V0KHBheWVyQWNjdHMpKTtcbiAgICAgICAgICBpZiAobXVsdGlBY2N0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXllciBjYW4gbm90IGJlIGRpZmZlcmVudCBhY2NvdW50c1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpeC5hY2NvdW50c1theC50ZW1wSWRdLnJvbGUuYXV0aG9yaXplcikge1xuICAgICAgICBpZiAobGFzdCkge1xuICAgICAgICAgIC8vIGRvIGdyb3VwIHJlcGxhY2VtZW50XG4gICAgICAgICAgYXV0aG9yaXphdGlvbnMgPSBBcnJheS5mcm9tKG5ldyBTZXQoWy4uLmF1dGhvcml6YXRpb25zLCBheC50ZW1wSWRdKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZG8gMS0xIHJlcGxhY2VtZW50XG4gICAgICAgICAgaXguYXV0aG9yaXphdGlvbnMgPSBpeC5hdXRob3JpemF0aW9ucy5tYXAoZCA9PiBkID09PSBvbGQudGVtcElkID8gYXgudGVtcElkIDogZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZC50ZW1wSWQgIT0gYXgudGVtcElkKSBkZWxldGUgaXguYWNjb3VudHNbb2xkLnRlbXBJZF07XG4gIH1cbiAgaWYgKGxhc3QpIHtcbiAgICAvLyBjb21wbGV0ZSAoZmxhdG1hcCkgZ3JvdXAgcmVwbGFjZW1lbnRcbiAgICBpeC5hdXRob3JpemF0aW9ucyA9IGl4LmF1dGhvcml6YXRpb25zLm1hcChkID0+IGQgPT09IGxhc3QudGVtcElkID8gYXV0aG9yaXphdGlvbnMgOiBkKS5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IEFycmF5LmlzQXJyYXkoY3VycikgPyBbLi4ucHJldiwgLi4uY3Vycl0gOiBbLi4ucHJldiwgY3Vycl0sIFtdKTtcbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUFjY291bnRzKGl4KSB7XG4gIGlmIChpc1RyYW5zYWN0aW9uKGl4KSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpeC5wYXllcikpIHtcbiAgICAgIGxvZy5kZXByZWNhdGUoe1xuICAgICAgICBwa2c6IFwiRkNMXCIsXG4gICAgICAgIHN1YmplY3Q6ICdcIml4LnBheWVyXCIgbXVzdCBiZSBhbiBhcnJheS4gU3VwcG9ydCBmb3IgaXgucGF5ZXIgYXMgYSBzaW5ndWxhcicsXG4gICAgICAgIG1lc3NhZ2U6IFwiU2VlIGNoYW5nZWxvZyBmb3IgbW9yZSBpbmZvLlwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGNvbGxlY3RBY2NvdW50cyhpeCwgT2JqZWN0LnZhbHVlcyhpeC5hY2NvdW50cykpO1xuICAgICAgYXdhaXQgY29sbGVjdEFjY291bnRzKGl4LCBPYmplY3QudmFsdWVzKGl4LmFjY291bnRzKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCI9PT0gU0FEIFBBTkRBID09PVxcblxcblwiLCBlcnJvciwgXCJcXG5cXG49PT0gU0FEIFBBTkRBID09PVwiKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaXg7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVTaWduYXR1cmVzKGl4KSB7XG4gIGlmIChpc1RyYW5zYWN0aW9uKGl4KSkge1xuICAgIHRyeSB7XG4gICAgICBsZXQgaW5zaWRlU2lnbmVycyA9IGZpbmRJbnNpZGVTaWduZXJzKGl4KTtcbiAgICAgIGNvbnN0IGluc2lkZVBheWxvYWQgPSBlbmNvZGVUcmFuc2FjdGlvblBheWxvYWQocHJlcEZvckVuY29kaW5nKGl4KSk7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChpbnNpZGVTaWduZXJzLm1hcChmZXRjaFNpZ25hdHVyZShpeCwgaW5zaWRlUGF5bG9hZCkpKTtcbiAgICAgIGxldCBvdXRzaWRlU2lnbmVycyA9IGZpbmRPdXRzaWRlU2lnbmVycyhpeCk7XG4gICAgICBjb25zdCBvdXRzaWRlUGF5bG9hZCA9IGVuY29kZVRyYW5zYWN0aW9uRW52ZWxvcGUoe1xuICAgICAgICAuLi5wcmVwRm9yRW5jb2RpbmcoaXgpLFxuICAgICAgICBwYXlsb2FkU2lnczogaW5zaWRlU2lnbmVycy5tYXAoaWQgPT4gKHtcbiAgICAgICAgICBhZGRyZXNzOiBpeC5hY2NvdW50c1tpZF0uYWRkcixcbiAgICAgICAgICBrZXlJZDogaXguYWNjb3VudHNbaWRdLmtleUlkLFxuICAgICAgICAgIHNpZzogaXguYWNjb3VudHNbaWRdLnNpZ25hdHVyZVxuICAgICAgICB9KSlcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwob3V0c2lkZVNpZ25lcnMubWFwKGZldGNoU2lnbmF0dXJlKGl4LCBvdXRzaWRlUGF5bG9hZCkpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIlNpZ25hdHVyZXNcIiwgZXJyb3IsIHtcbiAgICAgICAgaXhcbiAgICAgIH0pO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG4gIHJldHVybiBpeDtcbn1cbmZ1bmN0aW9uIGZldGNoU2lnbmF0dXJlKGl4LCBwYXlsb2FkKSB7XG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiBpbm5lckZldGNoU2lnbmF0dXJlKGlkKSB7XG4gICAgY29uc3QgYWNjdCA9IGl4LmFjY291bnRzW2lkXTtcbiAgICBpZiAoYWNjdC5zaWduYXR1cmUgIT0gbnVsbCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHNpZ25hdHVyZVxuICAgIH0gPSBhd2FpdCBhY2N0LnNpZ25pbmdGdW5jdGlvbihidWlsZFNpZ25hYmxlKGFjY3QsIHBheWxvYWQsIGl4KSk7XG4gICAgaXguYWNjb3VudHNbaWRdLnNpZ25hdHVyZSA9IHNpZ25hdHVyZTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkU2lnbmFibGUoYWNjdCwgbWVzc2FnZSwgaXgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4ge1xuICAgICAgZl90eXBlOiBcIlNpZ25hYmxlXCIsXG4gICAgICBmX3ZzbjogXCIxLjAuMVwiLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIGFkZHI6IHNhbnNQcmVmaXgoYWNjdC5hZGRyKSxcbiAgICAgIGtleUlkOiBhY2N0LmtleUlkLFxuICAgICAgcm9sZXM6IGFjY3Qucm9sZSxcbiAgICAgIGNhZGVuY2U6IGl4Lm1lc3NhZ2UuY2FkZW5jZSxcbiAgICAgIGFyZ3M6IGl4Lm1lc3NhZ2UuYXJndW1lbnRzLm1hcChkID0+IGl4LmFyZ3VtZW50c1tkXS5hc0FyZ3VtZW50KSxcbiAgICAgIGRhdGE6IHt9LFxuICAgICAgaW50ZXJhY3Rpb246IGl4LFxuICAgICAgdm91Y2hlcjogY3JlYXRlU2lnbmFibGVWb3VjaGVyKGl4KVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcImJ1aWxkU2lnbmFibGVcIiwgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5mdW5jdGlvbiBwcmVwRm9yRW5jb2RpbmcoaXgpIHtcbiAgY29uc3QgcGF5ZXJBZGRyZXNzID0gc2Fuc1ByZWZpeCgoQXJyYXkuaXNBcnJheShpeC5wYXllcikgPyBpeC5hY2NvdW50c1tpeC5wYXllclswXV0gOiBpeC5hY2NvdW50c1tpeC5wYXllcl0pLmFkZHIpO1xuICByZXR1cm4ge1xuICAgIGNhZGVuY2U6IGl4Lm1lc3NhZ2UuY2FkZW5jZSxcbiAgICByZWZCbG9jazogaXgubWVzc2FnZS5yZWZCbG9jayB8fCBudWxsLFxuICAgIGNvbXB1dGVMaW1pdDogaXgubWVzc2FnZS5jb21wdXRlTGltaXQsXG4gICAgYXJndW1lbnRzOiBpeC5tZXNzYWdlLmFyZ3VtZW50cy5tYXAoaWQgPT4gaXguYXJndW1lbnRzW2lkXS5hc0FyZ3VtZW50KSxcbiAgICBwcm9wb3NhbEtleToge1xuICAgICAgYWRkcmVzczogc2Fuc1ByZWZpeChpeC5hY2NvdW50c1tpeC5wcm9wb3Nlcl0uYWRkciksXG4gICAgICBrZXlJZDogaXguYWNjb3VudHNbaXgucHJvcG9zZXJdLmtleUlkLFxuICAgICAgc2VxdWVuY2VOdW06IGl4LmFjY291bnRzW2l4LnByb3Bvc2VyXS5zZXF1ZW5jZU51bVxuICAgIH0sXG4gICAgcGF5ZXI6IHBheWVyQWRkcmVzcyxcbiAgICBhdXRob3JpemVyczogaXguYXV0aG9yaXphdGlvbnMubWFwKGNpZCA9PiBzYW5zUHJlZml4KGl4LmFjY291bnRzW2NpZF0uYWRkcikpLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4ge1xuICAgICAgcmV0dXJuIHByZXYuZmluZChpdGVtID0+IGl0ZW0gPT09IGN1cnJlbnQpID8gcHJldiA6IFsuLi5wcmV2LCBjdXJyZW50XTtcbiAgICB9LCBbXSlcbiAgfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZVZhbGlkYXRvcnMoaXgpIHtcbiAgY29uc3QgdmFsaWRhdG9ycyA9IGdldChpeCwgXCJpeC52YWxpZGF0b3JzXCIsIFtdKTtcbiAgcmV0dXJuIHBpcGUoaXgsIHZhbGlkYXRvcnMubWFwKGNiID0+IGl4ID0+IGNiKGl4LCB7XG4gICAgT2ssXG4gICAgQmFkXG4gIH0pKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVGaW5hbE5vcm1hbGl6YXRpb24oaXgpIHtcbiAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKGl4LmFjY291bnRzKSkge1xuICAgIGl4LmFjY291bnRzW2tleV0uYWRkciA9IHNhbnNQcmVmaXgoaXguYWNjb3VudHNba2V5XS5hZGRyKTtcbiAgfVxuICByZXR1cm4gaXg7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVWb3VjaGVySW50ZXJjZXB0KGl4KSB7XG4gIGNvbnN0IGZuID0gZ2V0KGl4LCBcIml4LnZvdWNoZXItaW50ZXJjZXB0XCIpO1xuICBpZiAoaXNGbiQzKGZuKSkge1xuICAgIGF3YWl0IGZuKGNyZWF0ZVNpZ25hYmxlVm91Y2hlcihpeCkpO1xuICB9XG4gIHJldHVybiBpeDtcbn1cblxuY29uc3QgREVGQVVMVF9DT01QVVRFX0xJTUlUID0gMTAwO1xuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUNvbXB1dGVMaW1pdChpeCkge1xuICBpZiAoaXNUcmFuc2FjdGlvbihpeCkpIHtcbiAgICBpeC5tZXNzYWdlLmNvbXB1dGVMaW1pdCA9IGl4Lm1lc3NhZ2UuY29tcHV0ZUxpbWl0IHx8IChhd2FpdCBjb25maWcuZ2V0KFwiZmNsLmxpbWl0XCIpKTtcbiAgICBpZiAoIWl4Lm1lc3NhZ2UuY29tcHV0ZUxpbWl0KSB7XG4gICAgICBsb2dnZXIubG9nLmRlcHJlY2F0ZSh7XG4gICAgICAgIHBrZzogXCJGQ0wvU0RLXCIsXG4gICAgICAgIHN1YmplY3Q6IFwiVGhlIGJ1aWx0LWluIGRlZmF1bHQgY29tcHV0ZSBsaW1pdCAoREVGQVVMVF9DT01QVVRFX0xJTUlUPTEwKVwiLFxuICAgICAgICB0cmFuc2l0aW9uOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9vbmZsb3cvZmxvdy1qcy1zZGsvYmxvYi9tYXN0ZXIvcGFja2FnZXMvc2RrL1RSQU5TSVRJT05TLm1kIzAwMDktZGVwcmVjYXRlLWRlZmF1bHQtY29tcHV0ZS1saW1pdFwiXG4gICAgICB9KTtcbiAgICAgIGl4Lm1lc3NhZ2UuY29tcHV0ZUxpbWl0ID0gREVGQVVMVF9DT01QVVRFX0xJTUlUO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaXg7XG59XG5cbmNvbnN0IG5vb3AgPSB2ID0+IHY7XG5jb25zdCBkZWJ1ZyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgbGV0IGZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBub29wO1xuICByZXR1cm4gYXN5bmMgaXggPT4ge1xuICAgIGNvbnN0IGFjY3RzID0gaXggPT4gW1wiXFxuQWNjb3VudHM6XCIsIHtcbiAgICAgIHByb3Bvc2VyOiBpeC5wcm9wb3NlcixcbiAgICAgIGF1dGhvcml6YXRpb25zOiBpeC5hdXRob3JpemF0aW9ucyxcbiAgICAgIHBheWVyOiBpeC5wYXllclxuICAgIH0sIFwiXFxuXFxuRGV0YWlsczpcIiwgaXguYWNjb3VudHNdLmZpbHRlcihCb29sZWFuKTtcbiAgICBjb25zdCBsb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbXNnID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBtc2dbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhgZGVidWdbJHtrZXl9XSAtLS1cXG5gLCAuLi5tc2csIFwiXFxuXFxuXFxuLS0tXCIpO1xuICAgIH07XG4gICAgaWYgKGF3YWl0IGNvbmZpZy5nZXQoYGRlYnVnLiR7a2V5fWApKSBhd2FpdCBmbihpeCwgbG9nLCBhY2N0cyk7XG4gICAgcmV0dXJuIGl4O1xuICB9O1xufTtcbmNvbnN0IHJlc29sdmUgPSBwaXBlKFtyZXNvbHZlQ2FkZW5jZSwgZGVidWcoXCJjYWRlbmNlXCIsIChpeCwgbG9nKSA9PiBsb2coaXgubWVzc2FnZS5jYWRlbmNlKSksIHJlc29sdmVDb21wdXRlTGltaXQsIGRlYnVnKFwiY29tcHV0ZSBsaW1pdFwiLCAoaXgsIGxvZykgPT4gbG9nKGl4Lm1lc3NhZ2UuY29tcHV0ZUxpbWl0KSksIHJlc29sdmVBcmd1bWVudHMsIGRlYnVnKFwiYXJndW1lbnRzXCIsIChpeCwgbG9nKSA9PiBsb2coaXgubWVzc2FnZS5hcmd1bWVudHMsIGl4Lm1lc3NhZ2UpKSwgcmVzb2x2ZUFjY291bnRzLCBkZWJ1ZyhcImFjY291bnRzXCIsIChpeCwgbG9nLCBhY2N0cykgPT4gbG9nKC4uLmFjY3RzKGl4KSkpLCAvKiBzcGVjaWFsICovZXhlY0ZldGNoUmVmLCAvKiBzcGVjaWFsICovZXhlY0ZldGNoU2VxdWVuY2VOdW1iZXIsIHJlc29sdmVTaWduYXR1cmVzLCBkZWJ1ZyhcInNpZ25hdHVyZXNcIiwgKGl4LCBsb2csIGFjY3RzKSA9PiBsb2coLi4uYWNjdHMoaXgpKSksIHJlc29sdmVGaW5hbE5vcm1hbGl6YXRpb24sIHJlc29sdmVWYWxpZGF0b3JzLCByZXNvbHZlVm91Y2hlckludGVyY2VwdCwgZGVidWcoXCJyZXNvbHZlZFwiLCAoaXgsIGxvZykgPT4gbG9nKGl4KSldKTtcbmFzeW5jIGZ1bmN0aW9uIGV4ZWNGZXRjaFJlZihpeCkge1xuICBpZiAoaXNUcmFuc2FjdGlvbihpeCkgJiYgaXgubWVzc2FnZS5yZWZCbG9jayA9PSBudWxsKSB7XG4gICAgY29uc3Qgbm9kZSA9IGF3YWl0IGNvbmZpZygpLmdldChcImFjY2Vzc05vZGUuYXBpXCIpO1xuICAgIGNvbnN0IHNlbmRGbiA9IGF3YWl0IGNvbmZpZy5maXJzdChbXCJzZGsudHJhbnNwb3J0XCIsIFwic2RrLnNlbmRcIl0sIHNlbmQkMSk7XG4gICAgaW52YXJpYW50JDEoc2VuZEZuLCBgUmVxdWlyZWQgdmFsdWUgZm9yIHNkay50cmFuc3BvcnQgaXMgbm90IGRlZmluZWQgaW4gY29uZmlnLiBTZWU6ICR7XCJodHRwczovL2dpdGh1Yi5jb20vb25mbG93L2ZjbC1qcy9ibG9iL21hc3Rlci9wYWNrYWdlcy9zZGsvQ0hBTkdFTE9HLm1kIzAwNTctYWxwaGExLS0tLTIwMjItMDEtMjFcIn1gKTtcbiAgICBpeC5tZXNzYWdlLnJlZkJsb2NrID0gKGF3YWl0IHNlbmRGbihidWlsZChbZ2V0QmxvY2soKV0pLCB7XG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZSxcbiAgICAgIEJ1ZmZlcixcbiAgICAgIGl4OiBpeE1vZHVsZVxuICAgIH0sIHtcbiAgICAgIG5vZGVcbiAgICB9KS50aGVuKGRlY29kZVJlc3BvbnNlKSkuaWQ7XG4gIH1cbiAgcmV0dXJuIGl4O1xufVxuYXN5bmMgZnVuY3Rpb24gZXhlY0ZldGNoU2VxdWVuY2VOdW1iZXIoaXgpIHtcbiAgaWYgKGlzVHJhbnNhY3Rpb24oaXgpKSB7XG4gICAgdmFyIGFjY3QgPSBPYmplY3QudmFsdWVzKGl4LmFjY291bnRzKS5maW5kKGEgPT4gYS5yb2xlLnByb3Bvc2VyKTtcbiAgICBpbnZhcmlhbnQkMShhY2N0LCBgVHJhbnNhY3Rpb25zIHJlcXVpcmUgYSBwcm9wb3NlcmApO1xuICAgIGlmIChhY2N0LnNlcXVlbmNlTnVtID09IG51bGwpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBhd2FpdCBjb25maWcoKS5nZXQoXCJhY2Nlc3NOb2RlLmFwaVwiKTtcbiAgICAgIGNvbnN0IHNlbmRGbiA9IGF3YWl0IGNvbmZpZy5maXJzdChbXCJzZGsudHJhbnNwb3J0XCIsIFwic2RrLnNlbmRcIl0sIHNlbmQkMSk7XG4gICAgICBpbnZhcmlhbnQkMShzZW5kRm4sIGBSZXF1aXJlZCB2YWx1ZSBmb3Igc2RrLnRyYW5zcG9ydCBpcyBub3QgZGVmaW5lZCBpbiBjb25maWcuIFNlZTogJHtcImh0dHBzOi8vZ2l0aHViLmNvbS9vbmZsb3cvZmNsLWpzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3Nkay9DSEFOR0VMT0cubWQjMDA1Ny1hbHBoYTEtLS0tMjAyMi0wMS0yMVwifWApO1xuICAgICAgaXguYWNjb3VudHNbYWNjdC50ZW1wSWRdLnNlcXVlbmNlTnVtID0gYXdhaXQgc2VuZEZuKGF3YWl0IGJ1aWxkKFtnZXRBY2NvdW50KGFjY3QuYWRkcildKSwge1xuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlc3BvbnNlLFxuICAgICAgICBCdWZmZXIsXG4gICAgICAgIGl4OiBpeE1vZHVsZVxuICAgICAgfSwge1xuICAgICAgICBub2RlXG4gICAgICB9KS50aGVuKGRlY29kZVJlc3BvbnNlKS50aGVuKGFjY3QgPT4gYWNjdC5rZXlzKS50aGVuKGtleXMgPT4ga2V5cy5maW5kKGtleSA9PiBrZXkuaW5kZXggPT09IGFjY3Qua2V5SWQpKS50aGVuKGtleSA9PiBrZXkuc2VxdWVuY2VOdW1iZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaXg7XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudCgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuICBpZiAoYXJncy5sZW5ndGggPiAxKSB7XG4gICAgY29uc3QgW3ByZWRpY2F0ZSwgbWVzc2FnZV0gPSBhcmdzO1xuICAgIHJldHVybiBpbnZhcmlhbnQoKGl4LCBfcmVmKSA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBPayxcbiAgICAgICAgQmFkXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIHJldHVybiBwcmVkaWNhdGUgPyBPayhpeCkgOiBCYWQoaXgsIG1lc3NhZ2UpO1xuICAgIH0pO1xuICB9XG4gIGNvbnN0IFtmbl0gPSBhcmdzO1xuICByZXR1cm4gaXggPT4gZm4oaXgsIHtcbiAgICBPayxcbiAgICBCYWRcbiAgfSk7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIC0gU2VuZHMgYXJiaXRyYXJ5IHNjcmlwdHMsIHRyYW5zYWN0aW9ucywgYW5kIHJlcXVlc3RzIHRvIEZsb3dcbiAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gYXJncyAtIEFuIGFycmF5IG9mIGZ1bmN0aW9ucyB0aGF0IHRha2UgaW50ZXJhY3Rpb24gYW5kIHJldHVybiBpbnRlcmFjdGlvblxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gKiBAcmV0dXJucyB7UHJvbWlzZTwqPn0gLSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIHJlc3BvbnNlXG4gKi9cbmNvbnN0IHNlbmQgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxldCBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICBjb25zdCBzZW5kRm4gPSBhd2FpdCBjb25maWcuZmlyc3QoW1wic2RrLnRyYW5zcG9ydFwiLCBcInNkay5zZW5kXCJdLCBvcHRzLnNlbmQgfHwgc2VuZCQxKTtcbiAgaW52YXJpYW50KHNlbmRGbiwgYFJlcXVpcmVkIHZhbHVlIGZvciBzZGsudHJhbnNwb3J0IGlzIG5vdCBkZWZpbmVkIGluIGNvbmZpZy4gU2VlOiAke1wiaHR0cHM6Ly9naXRodWIuY29tL29uZmxvdy9mY2wtanMvYmxvYi9tYXN0ZXIvcGFja2FnZXMvc2RrL0NIQU5HRUxPRy5tZCMwMDU3LWFscGhhMS0tLS0yMDIyLTAxLTIxXCJ9YCk7XG4gIGNvbnN0IHJlc29sdmVGbiA9IGF3YWl0IGNvbmZpZy5maXJzdChbXCJzZGsucmVzb2x2ZVwiXSwgb3B0cy5yZXNvbHZlIHx8IHJlc29sdmUpO1xuICBvcHRzLm5vZGUgPSBvcHRzLm5vZGUgfHwgKGF3YWl0IGNvbmZpZygpLmdldChcImFjY2Vzc05vZGUuYXBpXCIpKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJncykpIGFyZ3MgPSBwaXBlKGludGVyYWN0aW9uKCksIGFyZ3MpO1xuICByZXR1cm4gc2VuZEZuKGF3YWl0IHJlc29sdmVGbihhcmdzKSwge1xuICAgIGNvbmZpZyxcbiAgICByZXNwb25zZSxcbiAgICBpeDogaXhNb2R1bGUsXG4gICAgQnVmZmVyXG4gIH0sIG9wdHMpO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZGVjb2RlKHJlc3BvbnNlKSB7XG4gIGNvbnN0IGRlY29kZXJzRnJvbUNvbmZpZyA9IGF3YWl0IGNvbmZpZygpLndoZXJlKC9eZGVjb2RlclxcLi8pO1xuICBjb25zdCBkZWNvZGVycyA9IE9iamVjdC5lbnRyaWVzKGRlY29kZXJzRnJvbUNvbmZpZykubWFwKF9yZWYgPT4ge1xuICAgIGxldCBbcGF0dGVybiwgeGZvcm1dID0gX3JlZjtcbiAgICBwYXR0ZXJuID0gYC8ke3BhdHRlcm4ucmVwbGFjZSgvXmRlY29kZXJcXC4vLCBcIlwiKX0kL2A7XG4gICAgcmV0dXJuIFtwYXR0ZXJuLCB4Zm9ybV07XG4gIH0pO1xuICByZXR1cm4gZGVjb2RlUmVzcG9uc2UocmVzcG9uc2UsIE9iamVjdC5mcm9tRW50cmllcyhkZWNvZGVycykpO1xufVxuXG5jb25zdCBmaW5kUGF5bG9hZFNpZ25lcnMgPSB2b3VjaGVyID0+IHtcbiAgLy8gUGF5bG9hZCBTaWduZXJzIEFyZTogKGF1dGhvcml6ZXJzICsgcHJvcG9zZXIpIC0gcGF5ZXJcbiAgbGV0IHBheWxvYWQgPSBuZXcgU2V0KHZvdWNoZXIuYXV0aG9yaXplcnMpO1xuICBwYXlsb2FkLmFkZCh2b3VjaGVyLnByb3Bvc2FsS2V5LmFkZHJlc3MpO1xuICBwYXlsb2FkLmRlbGV0ZSh2b3VjaGVyLnBheWVyKTtcbiAgcmV0dXJuIEFycmF5LmZyb20ocGF5bG9hZCkubWFwKHdpdGhQcmVmaXgpO1xufTtcbmNvbnN0IGZpbmRFbnZlbG9wZVNpZ25lcnMgPSB2b3VjaGVyID0+IHtcbiAgLy8gRW52ZWxvcGUgU2lnbmVycyBBcmU6IChwYXllcilcbiAgbGV0IGVudmVsb3BlID0gbmV3IFNldChbdm91Y2hlci5wYXllcl0pO1xuICByZXR1cm4gQXJyYXkuZnJvbShlbnZlbG9wZSkubWFwKHdpdGhQcmVmaXgpO1xufTtcbmNsYXNzIFVuYWJsZVRvRGV0ZXJtaW5lTWVzc2FnZUVuY29kaW5nVHlwZUZvclNpZ25lckFkZHJlc3MgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHNpZ25lckFkZHJlc3MpIHtcbiAgICBjb25zdCBtc2cgPSBgXG4gICAgICAgIEVuY29kZSBNZXNzYWdlIEZyb20gU2lnbmFibGUgRXJyb3I6IFVuYWJsZSB0byBkZXRlcm1pbmUgbWVzc2FnZSBlbmNvZGluZyBmb3Igc2lnbmVyIGFkZHJlc3NzOiAke3NpZ25lckFkZHJlc3N9LiBcbiAgICAgICAgUGxlYXNlIGVuc3VyZSB0aGUgYWRkcmVzczogJHtzaWduZXJBZGRyZXNzfSBpcyBpbnRlbmRlZCB0byBzaWduIHRoZSBnaXZlbiB0cmFuc2FjdGlvbiBhcyBzcGVjaWZpZWQgYnkgdGhlIHRyYW5zYWN0aW9uIHNpZ25hYmxlLlxuICAgICAgYC50cmltKCk7XG4gICAgc3VwZXIobXNnKTtcbiAgICB0aGlzLm5hbWUgPSBcIlVuYWJsZSBUbyBEZXRlcm1pbmUgTWVzc2FnZSBFbmNvZGluZyBGb3IgU2lnbmVyIEFkZHJlc3NzXCI7XG4gIH1cbn1cbmNvbnN0IGVuY29kZU1lc3NhZ2VGcm9tU2lnbmFibGUgPSAoc2lnbmFibGUsIHNpZ25lckFkZHJlc3MpID0+IHtcbiAgbGV0IHBheWxvYWRTaWduZXJzID0gZmluZFBheWxvYWRTaWduZXJzKHNpZ25hYmxlLnZvdWNoZXIpO1xuICBsZXQgZW52ZWxvcGVTaWduZXJzID0gZmluZEVudmVsb3BlU2lnbmVycyhzaWduYWJsZS52b3VjaGVyKTtcbiAgY29uc3QgaXNQYXlsb2FkU2lnbmVyID0gcGF5bG9hZFNpZ25lcnMuaW5jbHVkZXMod2l0aFByZWZpeChzaWduZXJBZGRyZXNzKSk7XG4gIGNvbnN0IGlzRW52ZWxvcGVTaWduZXIgPSBlbnZlbG9wZVNpZ25lcnMuaW5jbHVkZXMod2l0aFByZWZpeChzaWduZXJBZGRyZXNzKSk7XG4gIGlmICghaXNQYXlsb2FkU2lnbmVyICYmICFpc0VudmVsb3BlU2lnbmVyKSB7XG4gICAgdGhyb3cgbmV3IFVuYWJsZVRvRGV0ZXJtaW5lTWVzc2FnZUVuY29kaW5nVHlwZUZvclNpZ25lckFkZHJlc3Moc2lnbmVyQWRkcmVzcyk7XG4gIH1cbiAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICBjYWRlbmNlOiBzaWduYWJsZS52b3VjaGVyLmNhZGVuY2UsXG4gICAgcmVmQmxvY2s6IHNpZ25hYmxlLnZvdWNoZXIucmVmQmxvY2ssXG4gICAgY29tcHV0ZUxpbWl0OiBzaWduYWJsZS52b3VjaGVyLmNvbXB1dGVMaW1pdCxcbiAgICBhcmd1bWVudHM6IHNpZ25hYmxlLnZvdWNoZXIuYXJndW1lbnRzLFxuICAgIHByb3Bvc2FsS2V5OiB7XG4gICAgICAuLi5zaWduYWJsZS52b3VjaGVyLnByb3Bvc2FsS2V5LFxuICAgICAgYWRkcmVzczogc2Fuc1ByZWZpeChzaWduYWJsZS52b3VjaGVyLnByb3Bvc2FsS2V5LmFkZHJlc3MpXG4gICAgfSxcbiAgICBwYXllcjogc2Fuc1ByZWZpeChzaWduYWJsZS52b3VjaGVyLnBheWVyKSxcbiAgICBhdXRob3JpemVyczogc2lnbmFibGUudm91Y2hlci5hdXRob3JpemVycy5tYXAoc2Fuc1ByZWZpeCksXG4gICAgcGF5bG9hZFNpZ3M6IHNpZ25hYmxlLnZvdWNoZXIucGF5bG9hZFNpZ3MubWFwKHBzID0+ICh7XG4gICAgICAuLi5wcyxcbiAgICAgIGFkZHJlc3M6IHNhbnNQcmVmaXgocHMuYWRkcmVzcylcbiAgICB9KSlcbiAgfTtcbiAgcmV0dXJuIGlzUGF5bG9hZFNpZ25lciA/IGVuY29kZVRyYW5zYWN0aW9uUGF5bG9hZChtZXNzYWdlKSA6IGVuY29kZVRyYW5zYWN0aW9uRW52ZWxvcGUobWVzc2FnZSk7XG59O1xuXG5mdW5jdGlvbiB2YWxpZGF0b3IoY2IpIHtcbiAgcmV0dXJuIHVwZGF0ZShcIml4LnZhbGlkYXRvcnNcIiwgdmFsaWRhdG9ycyA9PiBBcnJheS5pc0FycmF5KHZhbGlkYXRvcnMpID8gdmFsaWRhdG9ycy5wdXNoKGNiKSA6IFtjYl0pO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiAtIEEgYnVpbGRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBwYXJ0aWFsIGludGVyYWN0aW9uIHRvIGEgYmxvY2sgYXQgYSBzcGVjaWZpYyBoZWlnaHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSBibG9jayB0byBnZXRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gLSBBIHBhcnRpYWwgaW50ZXJhY3Rpb24gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGF0QmxvY2tIZWlnaHQoaGVpZ2h0KSB7XG4gIHJldHVybiBwaXBlKFtpeCA9PiB7XG4gICAgaXguYmxvY2suaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHJldHVybiBpeDtcbiAgfSwgdmFsaWRhdG9yKGl4ID0+IHtcbiAgICBpZiAodHlwZW9mIGl4LmJsb2NrLmlzU2VhbGVkID09PSBcImJvb2xlYW5cIikgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIHNwZWNpZnkgYm90aCBibG9jayBoZWlnaHQgYW5kIGlzU2VhbGVkLlwiKTtcbiAgICBpZiAoaXguYmxvY2suaWQpIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBzcGVjaWZ5IGJvdGggYmxvY2sgaGVpZ2h0IGFuZCBibG9jayBpZC5cIik7XG4gICAgcmV0dXJuIGl4O1xuICB9KV0pO1xufVxuXG5mdW5jdGlvbiBhdEJsb2NrSWQoaWQpIHtcbiAgcmV0dXJuIHBpcGUoW2l4ID0+IHtcbiAgICBpeC5ibG9jay5pZCA9IGlkO1xuICAgIHJldHVybiBPayhpeCk7XG4gIH0sIHZhbGlkYXRvcigoaXgsIF9yZWYpID0+IHtcbiAgICBsZXQge1xuICAgICAgT2ssXG4gICAgICBCYWRcbiAgICB9ID0gX3JlZjtcbiAgICBpZiAoaXNHZXRBY2NvdW50KGl4KSkgcmV0dXJuIEJhZChpeCwgXCJVbmFibGUgdG8gc3BlY2lmeSBhIGJsb2NrIGlkIHdpdGggYSBHZXQgQWNjb3VudCBpbnRlcmFjdGlvbi5cIik7XG4gICAgaWYgKHR5cGVvZiBpeC5ibG9jay5pc1NlYWxlZCA9PT0gXCJib29sZWFuXCIpIHJldHVybiBCYWQoaXgsIFwiVW5hYmxlIHRvIHNwZWNpZnkgYm90aCBibG9jayBpZCBhbmQgaXNTZWFsZWQuXCIpO1xuICAgIGlmIChpeC5ibG9jay5oZWlnaHQpIHJldHVybiBCYWQoaXgsIFwiVW5hYmxlIHRvIHNwZWNpZnkgYm90aCBibG9jayBpZCBhbmQgYmxvY2sgaGVpZ2h0LlwiKTtcbiAgICByZXR1cm4gT2soaXgpO1xuICB9KV0pO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoXCJAb25mbG93L3R5cGVkZWZzXCIpLkFjY291bnR9IEFjY291bnRcbiAqL1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiAgUmV0dXJucyB0aGUgZGV0YWlscyBvZiBhbiBhY2NvdW50IGZyb20gdGhlaXIgcHVibGljIGFkZHJlc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gQWRkcmVzcyBvZiB0aGUgYWNjb3VudFxuICogQHBhcmFtIHtvYmplY3R9IFtxdWVyeU9wdGlvbnNdIC0gUXVlcnkgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtudW1iZXJ9IFtxdWVyeU9wdGlvbnMuaGVpZ2h0XSAtIEJsb2NrIGhlaWdodCB0byBxdWVyeVxuICogQHBhcmFtIHtzdHJpbmd9IFtxdWVyeU9wdGlvbnMuaWRdIC0gQmxvY2sgSUQgdG8gcXVlcnlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxBY2NvdW50Pn0gLSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhY2NvdW50IHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFjY291bnQoYWRkcmVzcykge1xuICBsZXQge1xuICAgIGhlaWdodCxcbiAgICBpZFxuICB9ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgaW52YXJpYW50JDEoIShpZCAmJiBoZWlnaHQpLCBgTWV0aG9kOiBhY2NvdW50IC0tIENhbm5vdCBwYXNzIFwiaWRcIiBhbmQgXCJoZWlnaHRcIiBzaW11bHRhbmVvdXNseWApO1xuXG4gIC8vIEdldCBhY2NvdW50IGJ5IElEXG4gIGlmIChpZCkgcmV0dXJuIHNlbmQoW2dldEFjY291bnQoYWRkcmVzcyksIGF0QmxvY2tJZChpZCldLCBvcHRzKS50aGVuKGRlY29kZVJlc3BvbnNlKTtcblxuICAvLyBHZXQgYWNjb3VudCBieSBoZWlnaHRcbiAgaWYgKGhlaWdodCkgcmV0dXJuIHNlbmQoW2dldEFjY291bnQoYWRkcmVzcyksIGF0QmxvY2tIZWlnaHQoaGVpZ2h0KV0sIG9wdHMpLnRoZW4oZGVjb2RlUmVzcG9uc2UpO1xuICByZXR1cm4gc2VuZChbZ2V0QWNjb3VudChhZGRyZXNzKV0sIG9wdHMpLnRoZW4oZGVjb2RlUmVzcG9uc2UpO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoXCJAb25mbG93L3R5cGVkZWZzXCIpLkJsb2NrfSBCbG9ja1xuICovXG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIFJldHVybnMgdGhlIGxhdGVzdCBibG9jayAob3B0aW9uYWxseSBzZWFsZWQgb3Igbm90KSwgYnkgaWQsIG9yIGJ5IGhlaWdodFxuICogQHBhcmFtIHtvYmplY3R9IFtxdWVyeU9wdGlvbnNdIC0gUXVlcnkgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtib29sZWFufSBbcXVlcnlPcHRpb25zLnNlYWxlZD1mYWxzZV0gLSBXaGV0aGVyIHRvIHF1ZXJ5IGZvciBhIHNlYWxlZCBibG9ja1xuICogQHBhcmFtIHtudW1iZXJ9IFtxdWVyeU9wdGlvbnMuaGVpZ2h0XSAtIEJsb2NrIGhlaWdodCB0byBxdWVyeVxuICogQHBhcmFtIHtzdHJpbmd9IFtxdWVyeU9wdGlvbnMuaWRdIC0gQmxvY2sgSUQgdG8gcXVlcnlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxCbG9jaz59IC0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBibG9jayByZXNwb25zZVxuICovXG5mdW5jdGlvbiBibG9jaygpIHtcbiAgbGV0IHtcbiAgICBzZWFsZWQgPSBmYWxzZSxcbiAgICBpZCxcbiAgICBoZWlnaHRcbiAgfSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIGxldCBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgaW52YXJpYW50JDEoIShzZWFsZWQgJiYgaWQgfHwgc2VhbGVkICYmIGhlaWdodCksIGBNZXRob2Q6IGJsb2NrIC0tIENhbm5vdCBwYXNzIFwic2VhbGVkXCIgd2l0aCBcImlkXCIgb3IgXCJoZWlnaHRcImApO1xuICBpbnZhcmlhbnQkMSghKGlkICYmIGhlaWdodCksIGBNZXRob2Q6IGJsb2NrIC0tIENhbm5vdCBwYXNzIFwiaWRcIiBhbmQgXCJoZWlnaHRcIiBzaW11bHRhbmVvdXNseWApO1xuXG4gIC8vIEdldCBibG9jayBieSBJRFxuICBpZiAoaWQpIHJldHVybiBzZW5kKFtnZXRCbG9jaygpLCBhdEJsb2NrSWQoaWQpXSwgb3B0cykudGhlbihkZWNvZGVSZXNwb25zZSk7XG5cbiAgLy8gR2V0IGJsb2NrIGJ5IGhlaWdodFxuICBpZiAoaGVpZ2h0KSByZXR1cm4gc2VuZChbZ2V0QmxvY2soKSwgYXRCbG9ja0hlaWdodChoZWlnaHQpXSwgb3B0cykudGhlbihkZWNvZGVSZXNwb25zZSk7XG5cbiAgLy8gR2V0IGxhdGVzdCBibG9ja1xuICByZXR1cm4gc2VuZChbZ2V0QmxvY2soc2VhbGVkKV0sIG9wdHMpLnRoZW4oZGVjb2RlUmVzcG9uc2UpO1xufVxuXG5mdW5jdGlvbiBhdXRob3JpemF0aW9ucygpIHtcbiAgbGV0IGF4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgcmV0dXJuIHBpcGUoYXgubWFwKGF1dGh6ID0+IHtcbiAgICByZXR1cm4gcHJlcEFjY291bnQoYXV0aHosIHtcbiAgICAgIHJvbGU6IEFVVEhPUklaRVJcbiAgICB9KTtcbiAgfSkpO1xufVxuZnVuY3Rpb24gYXV0aG9yaXphdGlvbihhZGRyLCBzaWduaW5nRnVuY3Rpb24sIGtleUlkLCBzZXF1ZW5jZU51bSkge1xuICByZXR1cm4ge1xuICAgIGFkZHIsXG4gICAgc2lnbmluZ0Z1bmN0aW9uLFxuICAgIGtleUlkLFxuICAgIHNlcXVlbmNlTnVtXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50cyhldmVudFR5cGUsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHR5cGVvZiBzdGFydCAhPT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgZW5kICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgbG9nZ2VyLmxvZy5kZXByZWNhdGUoe1xuICAgICAgcGtnOiBcIkZDTC9TREtcIixcbiAgICAgIHN1YmplY3Q6IFwiUGFzc2luZyBhIHN0YXJ0IGFuZCBlbmQgaW50byBnZXRFdmVudHNcIixcbiAgICAgIHRyYW5zaXRpb246IFwiaHR0cHM6Ly9naXRodWIuY29tL29uZmxvdy9mbG93LWpzLXNkay9ibG9iL21hc3Rlci9wYWNrYWdlcy9zZGsvVFJBTlNJVElPTlMubWQjMDAwNS1kZXByZWNhdGUtc3RhcnQtZW5kLWdldC1ldmVudHMtYnVpbGRlclwiXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBpcGUoW21ha2VHZXRFdmVudHMsIGl4ID0+IHtcbiAgICBpeC5ldmVudHMuZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xuICAgIGl4LmV2ZW50cy5zdGFydCA9IHN0YXJ0O1xuICAgIGl4LmV2ZW50cy5lbmQgPSBlbmQ7XG4gICAgcmV0dXJuIE9rKGl4KTtcbiAgfV0pO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiAtIEEgYnVpbGRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYWxsIGluc3RhbmNlcyBvZiBhIHBhcnRpY3VsYXIgZXZlbnQgKGJ5IG5hbWUpIHdpdGhpbiBhIGhlaWdodCByYW5nZVxuICogTk9URTpcbiAqIC0gVGhlIGJsb2NrIHJhbmdlIHByb3ZpZGVkIG11c3QgYmUgZnJvbSB0aGUgY3VycmVudCBzcG9yay5cbiAqIC0gVGhlIGJsb2NrIHJhbmdlIHByb3ZpZGVkIG11c3QgYmUgMjUwIGJsb2NrcyBvciBsb3dlciBwZXIgcmVxdWVzdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gZ2V0XG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUJsb2NrSGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgYmxvY2sgdG8gc3RhcnQgbG9va2luZyBmb3IgZXZlbnRzIChpbmNsdXNpdmUpXG4gKiBAcGFyYW0ge251bWJlcn0gdG9CbG9ja0hlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIGJsb2NrIHRvIHN0b3AgbG9va2luZyBmb3IgZXZlbnRzIChpbmNsdXNpdmUpXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IC0gQW4gaW50ZXJhY3Rpb24gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50c0F0QmxvY2tIZWlnaHRSYW5nZShldmVudE5hbWUsIGZyb21CbG9ja0hlaWdodCwgdG9CbG9ja0hlaWdodCkge1xuICByZXR1cm4gcGlwZShbbWFrZUdldEV2ZW50cywgaXggPT4ge1xuICAgIGl4LmV2ZW50cy5ldmVudFR5cGUgPSBldmVudE5hbWU7XG4gICAgaXguZXZlbnRzLnN0YXJ0ID0gZnJvbUJsb2NrSGVpZ2h0O1xuICAgIGl4LmV2ZW50cy5lbmQgPSB0b0Jsb2NrSGVpZ2h0O1xuICAgIHJldHVybiBPayhpeCk7XG4gIH1dKTtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gLSBBIGJ1aWxkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFsbCBpbnN0YW5jZXMgb2YgYSBwYXJ0aWN1bGFyIGV2ZW50IChieSBuYW1lKSB3aXRoaW4gYSBzZXQgb2YgYmxvY2tzLCBzcGVjaWZpZWQgYnkgYmxvY2sgaWRzXG4gKiBOT1RFOlxuICogLSBUaGUgYmxvY2sgcmFuZ2UgcHJvdmlkZWQgbXVzdCBiZSBmcm9tIHRoZSBjdXJyZW50IHNwb3JrLlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBnZXRcbiAqIEBwYXJhbSB7bnVtYmVyW119IGJsb2NrSWRzIC0gVGhlIGlkcyBvZiB0aGUgYmxvY2tzIHRvIGxvb2sgZm9yIGV2ZW50c1xuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIEFuIGludGVyYWN0aW9uIG9iamVjdFxuICovXG5mdW5jdGlvbiBnZXRFdmVudHNBdEJsb2NrSWRzKGV2ZW50TmFtZSkge1xuICBsZXQgYmxvY2tJZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuICByZXR1cm4gcGlwZShbbWFrZUdldEV2ZW50cywgaXggPT4ge1xuICAgIGl4LmV2ZW50cy5ldmVudFR5cGUgPSBldmVudE5hbWU7XG4gICAgaXguZXZlbnRzLmJsb2NrSWRzID0gYmxvY2tJZHM7XG4gICAgcmV0dXJuIE9rKGl4KTtcbiAgfV0pO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiAtIEEgYnVpbGRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGludGVyYWN0aW9uIHRvIGdldCBhIGJsb2NrIGhlYWRlclxuICogQHBhcmFtIHtib29sZWFufSBbaXNTZWFsZWRdIC0gV2hldGhlciBvciBub3QgdGhlIGJsb2NrIHNob3VsZCBiZSBzZWFsZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gLSBBbiBpbnRlcmFjdGlvbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZ2V0QmxvY2tIZWFkZXIoKSB7XG4gIGxldCBpc1NlYWxlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgcmV0dXJuIHBpcGUoW21ha2VHZXRCbG9ja0hlYWRlciwgaXggPT4ge1xuICAgIGl4LmJsb2NrLmlzU2VhbGVkID0gaXNTZWFsZWQ7XG4gICAgcmV0dXJuIE9rKGl4KTtcbiAgfV0pO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiAtIEEgYnVpbGRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYWxsIGEgY29sbGVjdGlvbiBjb250YWluaW5nIGEgbGlzdCBvZiB0cmFuc2FjdGlvbiBpZHMgYnkgaXRzIGNvbGxlY3Rpb24gaWRcbiAqIE5PVEU6XG4gKiAtIFRoZSBibG9jayByYW5nZSBwcm92aWRlZCBtdXN0IGJlIGZyb20gdGhlIGN1cnJlbnQgc3BvcmsuIEFsbCBldmVudHMgZW1pdHRlZCBkdXJpbmcgcGFzdCBzcG9ya3MgaXMgY3VycmVudCB1bmF2YWlsYWJsZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbaWRdIC0gVGhlIGlkIG9mIHRoZSBjb2xsZWN0aW9uIHRvIGdldFxuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIEFuIGludGVyYWN0aW9uIG9iamVjdFxuICovXG5mdW5jdGlvbiBnZXRDb2xsZWN0aW9uKCkge1xuICBsZXQgaWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7XG4gIHJldHVybiBwaXBlKFttYWtlR2V0Q29sbGVjdGlvbiwgaXggPT4ge1xuICAgIGl4LmNvbGxlY3Rpb24uaWQgPSBpZDtcbiAgICByZXR1cm4gaXg7XG4gIH1dKTtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gLSBBIGJ1aWxkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBzdGF0dXMgb2YgdHJhbnNhY3Rpb25cbiAqIE5PVEU6IFRoZSB0cmFuc2FjdGlvbklEIHByb3ZpZGVkIG11c3QgYmUgZnJvbSB0aGUgY3VycmVudCBzcG9yay5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0cmFuc2FjdGlvbklkIC0gVGhlIGlkIG9mIHRoZSB0cmFuc2FjdGlvbiB0byBnZXQgc3RhdHVzXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IC0gQW4gaW50ZXJhY3Rpb24gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uU3RhdHVzKHRyYW5zYWN0aW9uSWQpIHtcbiAgcmV0dXJuIHBpcGUoW21ha2VHZXRUcmFuc2FjdGlvblN0YXR1cywgaXggPT4ge1xuICAgIGl4LnRyYW5zYWN0aW9uLmlkID0gdHJhbnNhY3Rpb25JZDtcbiAgICByZXR1cm4gT2soaXgpO1xuICB9XSk7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIC0gQSBidWlsZGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHRyYW5zYWN0aW9uXG4gKiBOT1RFOiBUaGUgdHJhbnNhY3Rpb25JRCBwcm92aWRlZCBtdXN0IGJlIGZyb20gdGhlIGN1cnJlbnQgc3BvcmsuXG4gKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNhY3Rpb25JZCAtIFRoZSBpZCBvZiB0aGUgdHJhbnNhY3Rpb24gdG8gZ2V0XG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IC0gQW4gaW50ZXJhY3Rpb24gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSWQpIHtcbiAgcmV0dXJuIHBpcGUoW21ha2VHZXRUcmFuc2FjdGlvbiwgaXggPT4ge1xuICAgIGl4LnRyYW5zYWN0aW9uLmlkID0gdHJhbnNhY3Rpb25JZDtcbiAgICByZXR1cm4gT2soaXgpO1xuICB9XSk7XG59XG5cbmZ1bmN0aW9uIGdldE5ldHdvcmtQYXJhbWV0ZXJzKCkge1xuICByZXR1cm4gcGlwZShbbWFrZUdldE5ldHdvcmtQYXJhbWV0ZXJzLCBpeCA9PiB7XG4gICAgcmV0dXJuIE9rKGl4KTtcbiAgfV0pO1xufVxuXG5mdW5jdGlvbiBsaW1pdChjb21wdXRlTGltaXQpIHtcbiAgcmV0dXJuIGl4ID0+IHtcbiAgICBpeC5tZXNzYWdlLmNvbXB1dGVMaW1pdCA9IGNvbXB1dGVMaW1pdDtcbiAgICByZXR1cm4gaXg7XG4gIH07XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIC0gQSB1dGlsaXR5IGJ1aWxkZXIgdG8gYmUgdXNlZCB3aXRoIG90aGVyIGJ1aWxkZXJzIHRvIHBhc3MgaW4gYXJndW1lbnRzIHdpdGggYSB2YWx1ZSBhbmQgc3VwcG9ydGVkIHR5cGVcbiAqIEBwYXJhbSB7QXJyYXkuPCo+fSBheCAtIEFuIGFycmF5IG9mIGFyZ3VtZW50c1xuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIEFuIGludGVyYWN0aW9uIG9iamVjdFxuICovXG5mdW5jdGlvbiBhcmdzKCkge1xuICBsZXQgYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICByZXR1cm4gcGlwZShheC5tYXAobWFrZUFyZ3VtZW50KSk7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIC0gQSB1dGlsaXR5IGJ1aWxkZXIgdG8gYmUgdXNlZCB3aXRoIGZjbC5hcmdzWy4uLl0gdG8gY3JlYXRlIEZDTCBzdXBwb3J0ZWQgYXJndW1lbnRzIGZvciBpbnRlcmFjdGlvbnNcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgYXJndW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHhmb3JtIC0gQSBmdW5jdGlvbiB0byB0cmFuc2Zvcm0gdGhlIHZhbHVlXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEFuIGFyZ3VtZW50IG9iamVjdFxuICovXG5mdW5jdGlvbiBhcmcodmFsdWUsIHhmb3JtKSB7XG4gIHJldHVybiB7XG4gICAgdmFsdWUsXG4gICAgeGZvcm1cbiAgfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcHJvcG9zZXIoYXV0aHopIHtcbiAgcmV0dXJuIHByZXBBY2NvdW50KGF1dGh6LCB7XG4gICAgcm9sZTogUFJPUE9TRVJcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHBheWVyKGF1dGh6KSB7XG4gIHJldHVybiBwcmVwQWNjb3VudChhdXRoeiwge1xuICAgIHJvbGU6IFBBWUVSXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwaW5nKCkge1xuICByZXR1cm4gbWFrZVBpbmc7XG59XG5cbmZ1bmN0aW9uIHJlZihyZWZCbG9jaykge1xuICByZXR1cm4gcGlwZShbaXggPT4ge1xuICAgIGl4Lm1lc3NhZ2UucmVmQmxvY2sgPSByZWZCbG9jaztcbiAgICByZXR1cm4gT2soaXgpO1xuICB9XSk7XG59XG5cbmZ1bmN0aW9uIHNjcmlwdCgpIHtcbiAgcmV0dXJuIHBpcGUoW21ha2VTY3JpcHQsIHB1dChcIml4LmNhZGVuY2VcIiwgdGVtcGxhdGUoLi4uYXJndW1lbnRzKSldKTtcbn1cblxuY29uc3QgREVGQVVMVF9TQ1JJUFRfQUNDT1VOVFMgPSBbXTtcbmNvbnN0IERFRlVBTFRfUkVGID0gbnVsbDtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb24gLSBBIHRlbXBsYXRlIGJ1aWxkZXIgdG8gdXNlIGEgQ2FkZW5jZSB0cmFuc2FjdGlvbiBmb3IgYW4gaW50ZXJhY3Rpb25cbiAqIEBwYXJhbSB7Li4uKn0gYXJncyAtIFRoZSBhcmd1bWVudHMgdG8gcGFzc1xuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIEFuIGludGVyYWN0aW9uIG9iamVjdFxuICovXG5mdW5jdGlvbiB0cmFuc2FjdGlvbigpIHtcbiAgcmV0dXJuIHBpcGUoW21ha2VUcmFuc2FjdGlvbiwgcHV0KFwiaXguY2FkZW5jZVwiLCB0ZW1wbGF0ZSguLi5hcmd1bWVudHMpKSwgaXggPT4ge1xuICAgIGl4Lm1lc3NhZ2UucmVmQmxvY2sgPSBpeC5tZXNzYWdlLnJlZkJsb2NrIHx8IERFRlVBTFRfUkVGO1xuICAgIGl4LmF1dGhvcml6YXRpb25zID0gaXguYXV0aG9yaXphdGlvbnMgfHwgREVGQVVMVF9TQ1JJUFRfQUNDT1VOVFM7XG4gICAgcmV0dXJuIE9rKGl4KTtcbiAgfV0pO1xufVxuXG5mdW5jdGlvbiB2b3VjaGVySW50ZXJjZXB0KGZuKSB7XG4gIHJldHVybiBwdXQoXCJpeC52b3VjaGVyLWludGVyY2VwdFwiLCBmbik7XG59XG5cbmNvbnN0IHJlc29sdmVQcm9wb3NlclNlcXVlbmNlTnVtYmVyID0gX3JlZiA9PiB7XG4gIGxldCB7XG4gICAgbm9kZVxuICB9ID0gX3JlZjtcbiAgcmV0dXJuIGFzeW5jIGl4ID0+IHtcbiAgICBpZiAoIWlzVHJhbnNhY3Rpb24oaXgpKSByZXR1cm4gT2soaXgpO1xuICAgIGlmIChpeC5hY2NvdW50c1tpeC5wcm9wb3Nlcl0uc2VxdWVuY2VOdW0pIHJldHVybiBPayhpeCk7XG4gICAgY29uc3Qgc2VuZEZuID0gYXdhaXQgY29uZmlnLmZpcnN0KFtcInNkay50cmFuc3BvcnRcIiwgXCJzZGsuc2VuZFwiXSwgc2VuZCQxKTtcbiAgICBpbnZhcmlhbnQkMShzZW5kRm4sIGBSZXF1aXJlZCB2YWx1ZSBmb3Igc2RrLnRyYW5zcG9ydCBpcyBub3QgZGVmaW5lZCBpbiBjb25maWcuIFNlZTogJHtcImh0dHBzOi8vZ2l0aHViLmNvbS9vbmZsb3cvZmNsLWpzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3Nkay9DSEFOR0VMT0cubWQjMDA1Ny1hbHBoYTEtLS0tMjAyMi0wMS0yMVwifWApO1xuICAgIGNvbnN0IHJlc3BvbnNlJDEgPSBhd2FpdCBzZW5kRm4oYXdhaXQgYnVpbGQoW2dldEFjY291bnQoaXguYWNjb3VudHNbaXgucHJvcG9zZXJdLmFkZHIpXSksIHtcbiAgICAgIGNvbmZpZyxcbiAgICAgIHJlc3BvbnNlOiByZXNwb25zZSxcbiAgICAgIEJ1ZmZlcixcbiAgICAgIGl4OiBpeE1vZHVsZVxuICAgIH0sIHtcbiAgICAgIG5vZGVcbiAgICB9KTtcbiAgICBjb25zdCBkZWNvZGVkID0gYXdhaXQgZGVjb2RlUmVzcG9uc2UocmVzcG9uc2UkMSk7XG4gICAgaXguYWNjb3VudHNbaXgucHJvcG9zZXJdLnNlcXVlbmNlTnVtID0gZGVjb2RlZC5rZXlzW2l4LmFjY291bnRzW2l4LnByb3Bvc2VyXS5rZXlJZF0uc2VxdWVuY2VOdW1iZXI7XG4gICAgcmV0dXJuIE9rKGl4KTtcbiAgfTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFJlZklkKG9wdHMpIHtcbiAgY29uc3Qgbm9kZSA9IGF3YWl0IGNvbmZpZygpLmdldChcImFjY2Vzc05vZGUuYXBpXCIpO1xuICBjb25zdCBzZW5kRm4gPSBhd2FpdCBjb25maWcuZmlyc3QoW1wic2RrLnRyYW5zcG9ydFwiLCBcInNkay5zZW5kXCJdLCBzZW5kJDEpO1xuICBpbnZhcmlhbnQkMShzZW5kRm4sIGBSZXF1aXJlZCB2YWx1ZSBmb3Igc2RrLnRyYW5zcG9ydCBpcyBub3QgZGVmaW5lZCBpbiBjb25maWcuIFNlZTogJHtcImh0dHBzOi8vZ2l0aHViLmNvbS9vbmZsb3cvZmNsLWpzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3Nkay9DSEFOR0VMT0cubWQjMDA1Ny1hbHBoYTEtLS0tMjAyMi0wMS0yMVwifWApO1xuICB2YXIgaXg7XG4gIGl4ID0gYXdhaXQgcGlwZShpbnRlcmFjdGlvbigpLCBbZ2V0QmxvY2soKV0pO1xuICBpeCA9IGF3YWl0IHNlbmRGbihpeCwge1xuICAgIGNvbmZpZyxcbiAgICByZXNwb25zZSxcbiAgICBCdWZmZXIsXG4gICAgaXg6IGl4TW9kdWxlXG4gIH0sIHtcbiAgICBub2RlXG4gIH0pO1xuICBpeCA9IGF3YWl0IGRlY29kZVJlc3BvbnNlKGl4KTtcbiAgcmV0dXJuIGl4LmlkO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVJlZkJsb2NrSWQob3B0cykge1xuICByZXR1cm4gYXN5bmMgaXggPT4ge1xuICAgIGlmICghaXNUcmFuc2FjdGlvbihpeCkpIHJldHVybiBPayhpeCk7XG4gICAgaWYgKGl4Lm1lc3NhZ2UucmVmQmxvY2spIHJldHVybiBPayhpeCk7XG4gICAgaXgubWVzc2FnZS5yZWZCbG9jayA9IGF3YWl0IGdldFJlZklkKCk7XG4gICAgcmV0dXJuIE9rKGl4KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbW9ja0FjY291bnRSZXNwb25zZShpeCkge1xuICBsZXQgbnVtYmVyT2ZLZXlzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA1O1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgaW52YXJpYW50JDEoaXguYWNjb3VudCwgXCJtb2NrQWNjb3VudFJlc3BvbnNlKGl4KSAtLSBpeC5hY2NvdW50IGlzIG1pc3NpbmdcIiwgaXgpO1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgaW52YXJpYW50JDEoaXguYWNjb3VudC5hZGRyLCBcIm1vY2tBY2NvdW50UmVzcG9uc2UoaXgpIC0tIGl4LmFjY291bnQuYWRkciBpcyBtaXNzaW5nXCIsIGl4KTtcbiAgY29uc3QgYWRkcmVzcyA9IGl4LmFjY291bnQuYWRkcjtcbiAgcmV0dXJuIHtcbiAgICBhY2NvdW50OiB7XG4gICAgICBhZGRyOiBhZGRyZXNzLFxuICAgICAga2V5czogQXJyYXkuZnJvbSh7XG4gICAgICAgIGxlbmd0aDogbnVtYmVyT2ZLZXlzXG4gICAgICB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgaW5kZXg6IGksXG4gICAgICAgIHNlcXVlbmNlTnVtYmVyOiA0MlxuICAgICAgfSkpXG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gbW9ja0dldEJsb2NrUmVzcG9uc2UoaXgpIHtcbiAgcmV0dXJuIHtcbiAgICB0YWc6IFwiR0VUX0JMT0NLXCIsXG4gICAgYmxvY2s6IHtcbiAgICAgIGlkOiBcIjMyXCJcbiAgICB9XG4gIH07XG59XG5jb25zdCBpZGVudGl0eSA9IHYgPT4gdjtcbmZ1bmN0aW9uIG1vY2tTZW5kKCkge1xuICBsZXQgZmFsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGlkZW50aXR5O1xuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gZXhlY1NlbmQoaXgpIHtcbiAgICBpeCA9IGF3YWl0IGl4O1xuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgY2FzZSBpc0dldEFjY291bnQoaXgpOlxuICAgICAgICByZXR1cm4gbW9ja0FjY291bnRSZXNwb25zZShpeCk7XG4gICAgICBjYXNlIGlzR2V0QmxvY2soaXgpOlxuICAgICAgICByZXR1cm4gbW9ja0dldEJsb2NrUmVzcG9uc2UoKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxsYmFjayhpeCk7XG4gICAgfVxuICB9O1xufVxuXG5jb25zdCBpZG9mID0gYWNjdCA9PiBgJHt3aXRoUHJlZml4KGFjY3QuYWRkcil9LSR7YWNjdC5rZXlJZH1gO1xuZnVuY3Rpb24gc2lnKG9wdHMpIHtcbiAgcmV0dXJuIFtcIlNJR05BVFVSRVwiLCBvcHRzLmFkZHIsIG9wdHMua2V5SWRdLmpvaW4oXCIuXCIpO1xufVxuZnVuY3Rpb24gYXV0aHpGbigpIHtcbiAgbGV0IG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFjY291bnQpIHtcbiAgICBjb25zdCBhY2N0ID0ge1xuICAgICAgLi4uYWNjb3VudCxcbiAgICAgIC4uLm9wdHMsXG4gICAgICBzaWduaW5nRnVuY3Rpb246IG9wdHMuc2lnbmluZ0Z1bmN0aW9uIHx8IGFjY291bnQuc2lnbmluZ0Z1bmN0aW9uIHx8IGZhbGxiYWNrU2lnbmluZ0Z1bmN0aW9uXG4gICAgfTtcbiAgICByZXR1cm4gYWNjdDtcbiAgICBmdW5jdGlvbiBmYWxsYmFja1NpZ25pbmdGdW5jdGlvbihzaWduYWJsZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWRkcjogYWNjdC5hZGRyLFxuICAgICAgICBrZXlJZDogYWNjdC5rZXlJZCxcbiAgICAgICAgc2lnbmF0dXJlOiBzaWcoYWNjdClcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gYXV0aHpSZXNvbHZlKCkge1xuICBsZXQgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHJldHVybiBmdW5jdGlvbiAoYWNjb3VudCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHRlbXBJZCxcbiAgICAgIC4uLnJlc3RcbiAgICB9ID0gb3B0cztcbiAgICByZXR1cm4ge1xuICAgICAgLi4uYWNjb3VudCxcbiAgICAgIHRlbXBJZDogdGVtcElkIHx8IFwiV0lUSF9SRVNPTFZFXCIsXG4gICAgICByZXNvbHZlOiBhdXRoekZuKHJlc3QpXG4gICAgfTtcbiAgfTtcbn1cbmNvbnN0IFJPTEUgPSB7XG4gIHByb3Bvc2VyOiBmYWxzZSxcbiAgYXV0aG9yaXplcjogZmFsc2UsXG4gIHBheWVyOiBmYWxzZVxufTtcbmZ1bmN0aW9uIGF1dGh6UmVzb2x2ZU1hbnkoKSB7XG4gIGxldCBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhY2NvdW50KSB7XG4gICAgY29uc3QgdGVtcElkID0gb3B0cy50ZW1wSWQgfHwgXCJBVVRIWl9SRVNPTFZFX01BTllcIjtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uYWNjb3VudCxcbiAgICAgIHRlbXBJZCxcbiAgICAgIHJlc29sdmU6ICgpID0+IFtvcHRzLnByb3Bvc2VyICYmIGF1dGh6Rm4ob3B0cy5wcm9wb3Nlcikoe1xuICAgICAgICByb2xlOiB7XG4gICAgICAgICAgLi4uUk9MRSxcbiAgICAgICAgICBwcm9wb3NlcjogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KSwgLi4ub3B0cy5hdXRob3JpemF0aW9ucy5tYXAoYXV0aHpGbikubWFwKGQgPT4gZCh7XG4gICAgICAgIHJvbGU6IHtcbiAgICAgICAgICAuLi5ST0xFLFxuICAgICAgICAgIGF1dGhvcml6ZXI6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSkpLCBvcHRzLnBheWVyICYmIGF1dGh6Rm4ob3B0cy5wYXllcikoe1xuICAgICAgICByb2xlOiB7XG4gICAgICAgICAgLi4uUk9MRSxcbiAgICAgICAgICBwYXllcjogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KV0uZmlsdGVyKEJvb2xlYW4pXG4gICAgfTtcbiAgfTtcbn1cblxuY29uc3QgcnVuID0gZnVuY3Rpb24gKCkge1xuICBsZXQgZm5zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgcmV0dXJuIGJ1aWxkKFtyZWYoXCIxMjNcIiksIC4uLmZuc10pLnRoZW4ocmVzb2x2ZSk7XG59O1xuXG52YXIgaW5kZXggPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgbW9ja1NlbmQ6IG1vY2tTZW5kLFxuICBhdXRoekZuOiBhdXRoekZuLFxuICBhdXRoelJlc29sdmU6IGF1dGh6UmVzb2x2ZSxcbiAgYXV0aHpSZXNvbHZlTWFueTogYXV0aHpSZXNvbHZlTWFueSxcbiAgc2lnOiBzaWcsXG4gIGlkb2Y6IGlkb2YsXG4gIHJ1bjogcnVuXG59KTtcblxuY29uc3QgVkVSU0lPTiA9IFwiMS4yLjFcIiA7XG5cbi8vIERlcHJlY2F0ZWRcbmNvbnN0IHBhcmFtcyA9IHBhcmFtcyA9PiBsb2dnZXIubG9nLmRlcHJlY2F0ZSh7XG4gIHBrZzogXCJGQ0wvU0RLXCIsXG4gIG1lc3NhZ2U6IGBUaGUgcGFyYW1zIGJ1aWxkZXIgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBGbG93IEpTLVNESy9GQ0wuYCxcbiAgdHJhbnNpdGlvbjogXCJodHRwczovL2dpdGh1Yi5jb20vb25mbG93L2Zsb3ctanMtc2RrL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3Nkay9UUkFOU0lUSU9OUy5tZCMwMDAxLWRlcHJlY2F0ZS1wYXJhbXNcIixcbiAgbGV2ZWw6IGxvZ2dlci5MRVZFTFMuZXJyb3Jcbn0pO1xuY29uc3QgcGFyYW0gPSBwYXJhbXMgPT4gbG9nZ2VyLmxvZy5kZXByZWNhdGUoe1xuICBwa2c6IFwiRkNML1NES1wiLFxuICBtZXNzYWdlOiBgVGhlIHBhcmFtIGJ1aWxkZXIgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBGbG93IEpTLVNESy9GQ0wuYCxcbiAgdHJhbnNpdGlvbjogXCJodHRwczovL2dpdGh1Yi5jb20vb25mbG93L2Zsb3ctanMtc2RrL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3Nkay9UUkFOU0lUSU9OUy5tZCMwMDAxLWRlcHJlY2F0ZS1wYXJhbXNcIixcbiAgbGV2ZWw6IGxvZ2dlci5MRVZFTFMuZXJyb3Jcbn0pO1xuXG5leHBvcnQgeyBpbmRleCBhcyBUZXN0VXRpbHMsIFZFUlNJT04sIGFjY291bnQsIGFyZywgYXJncywgYXRCbG9ja0hlaWdodCwgYXRCbG9ja0lkLCBhdXRob3JpemF0aW9uLCBhdXRob3JpemF0aW9ucywgYmxvY2ssIGJ1aWxkLCBjcmVhdGVTaWduYWJsZVZvdWNoZXIsIGRlY29kZSwgZGVzdHJveSwgZW5jb2RlTWVzc2FnZUZyb21TaWduYWJsZSwgZW5jb2RlVHJhbnNhY3Rpb25FbnZlbG9wZSwgZW5jb2RlVHJhbnNhY3Rpb25QYXlsb2FkLCBlbmNvZGVUeElkRnJvbVZvdWNoZXIsIGdldCwgZ2V0QWNjb3VudCwgZ2V0QmxvY2ssIGdldEJsb2NrSGVhZGVyLCBnZXRDb2xsZWN0aW9uLCBnZXRFdmVudHMsIGdldEV2ZW50c0F0QmxvY2tIZWlnaHRSYW5nZSwgZ2V0RXZlbnRzQXRCbG9ja0lkcywgZ2V0TmV0d29ya1BhcmFtZXRlcnMsIGdldFRyYW5zYWN0aW9uLCBnZXRUcmFuc2FjdGlvblN0YXR1cywgaW50ZXJhY3Rpb24sIGludmFyaWFudCwgaXNCYWQsIGlzR2V0QWNjb3VudCwgaXNHZXRCbG9jaywgaXNHZXRCbG9ja0hlYWRlciwgaXNHZXRDb2xsZWN0aW9uLCBpc0dldEV2ZW50cywgaXNHZXROZXR3b3JrUGFyYW1ldGVycywgaXNHZXRUcmFuc2FjdGlvbiwgaXNHZXRUcmFuc2FjdGlvblN0YXR1cywgaXNPaywgaXNQaW5nLCBpc1NjcmlwdCwgaXNUcmFuc2FjdGlvbiwgaXNVbmtub3duLCBsaW1pdCwgcGFyYW0sIHBhcmFtcywgcGF5ZXIsIHBpbmcsIHBpcGUsIHByb3Bvc2VyLCBwdXQsIHJlZiwgcmVzb2x2ZSwgcmVzb2x2ZUFjY291bnRzLCByZXNvbHZlQXJndW1lbnRzLCByZXNvbHZlQ2FkZW5jZSwgcmVzb2x2ZUZpbmFsTm9ybWFsaXphdGlvbiwgcmVzb2x2ZVByb3Bvc2VyU2VxdWVuY2VOdW1iZXIsIHJlc29sdmVSZWZCbG9ja0lkLCByZXNvbHZlU2lnbmF0dXJlcywgcmVzb2x2ZVZhbGlkYXRvcnMsIHJlc29sdmVWb3VjaGVySW50ZXJjZXB0LCByZXNwb25zZSwgc2NyaXB0LCBzZW5kLCB0cmFuc2FjdGlvbiwgdXBkYXRlLCB2YWxpZGF0b3IsIHZvdWNoZXJJbnRlcmNlcHQsIHZvdWNoZXJUb1R4SWQsIHdoeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLm1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@onflow/sdk/dist/sdk.module.js\n"));

/***/ }),

/***/ "./node_modules/@onflow/transport-http/dist/sdk-send-http.module.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@onflow/transport-http/dist/sdk-send-http.module.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"send\": function() { return /* binding */ send; },\n/* harmony export */   \"sendExecuteScript\": function() { return /* binding */ sendExecuteScript; },\n/* harmony export */   \"sendGetAccount\": function() { return /* binding */ sendGetAccount; },\n/* harmony export */   \"sendGetBlock\": function() { return /* binding */ sendGetBlock; },\n/* harmony export */   \"sendGetBlockHeader\": function() { return /* binding */ sendGetBlockHeader; },\n/* harmony export */   \"sendGetCollection\": function() { return /* binding */ sendGetCollection; },\n/* harmony export */   \"sendGetEvents\": function() { return /* binding */ sendGetEvents; },\n/* harmony export */   \"sendGetNetworkParameters\": function() { return /* binding */ sendGetNetworkParameters; },\n/* harmony export */   \"sendGetTransaction\": function() { return /* binding */ sendGetTransaction; },\n/* harmony export */   \"sendGetTransactionStatus\": function() { return /* binding */ sendGetTransactionStatus; },\n/* harmony export */   \"sendPing\": function() { return /* binding */ sendPing; },\n/* harmony export */   \"sendTransaction\": function() { return /* binding */ sendTransaction; }\n/* harmony export */ });\n/* harmony import */ var _onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/util-invariant */ \"./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\");\n/* harmony import */ var _onflow_rlp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/rlp */ \"./node_modules/@onflow/rlp/dist/rlp.module.js\");\n/* harmony import */ var _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @onflow/util-logger */ \"./node_modules/@onflow/util-logger/dist/util-logger.module.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _onflow_util_address__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @onflow/util-address */ \"./node_modules/@onflow/util-address/dist/util-address.module.js\");\n\n\n\n\n\n\nconst AbortController = globalThis.AbortController || __webpack_require__(/*! abort-controller */ \"./node_modules/abort-controller/browser.js\");\nclass HTTPRequestError extends Error {\n  constructor(_ref) {\n    let {\n      error,\n      hostname,\n      path,\n      method,\n      requestBody,\n      responseBody,\n      responseStatusText,\n      statusCode\n    } = _ref;\n    const msg = `\n      HTTP Request Error: An error occurred when interacting with the Access API.\n      ${error ? `error=${error}` : \"\"}\n      ${hostname ? `hostname=${hostname}` : \"\"}\n      ${path ? `path=${path}` : \"\"}\n      ${method ? `method=${method}` : \"\"}\n      ${requestBody ? `requestBody=${requestBody}` : \"\"}\n      ${responseBody ? `responseBody=${responseBody}` : \"\"}\n      ${responseStatusText ? `responseStatusText=${responseStatusText}` : \"\"}\n      ${statusCode ? `statusCode=${statusCode}` : \"\"}\n    `;\n    super(msg);\n    this.name = \"HTTP Request Error\";\n    this.statusCode = statusCode;\n    this.errorMessage = error;\n  }\n}\n\n/**\n * Creates an HTTP Request to be sent to a REST Access API via Fetch API.\n *\n * @param {object} options - Options for the HTTP Request\n * @param {String} options.hostname - Access API Hostname\n * @param {String} options.path - Path to the resource on the Access API\n * @param {String} options.method - HTTP Method\n * @param {object} options.body - HTTP Request Body\n * @param {object} [options.headers] - HTTP Request Headers\n * @param {boolean} [options.enableRequestLogging=true] - Enable/Disable request logging\n * @param {number} [options.retryLimit=5] - Number of times to retry request\n * @param {number} [options.retryIntervalMs=1000] - Time in milliseconds to wait before retrying request\n * @param {number} [options.timeoutLimit=30000] - Time in milliseconds to wait before timing out request\n *\n * @returns JSON object response from Access API.\n */\nasync function httpRequest(_ref2) {\n  let {\n    hostname,\n    path,\n    method,\n    body,\n    headers,\n    retryLimit = 5,\n    retryIntervalMs = 1000,\n    timeoutLimit = 30000,\n    enableRequestLogging = true\n  } = _ref2;\n  const bodyJSON = body ? JSON.stringify(body) : null;\n  function makeRequest() {\n    const controller = new AbortController();\n    const fetchTimeout = setTimeout(() => {\n      controller.abort();\n    }, timeoutLimit);\n    return cross_fetch__WEBPACK_IMPORTED_MODULE_3___default()(`${hostname}${path}`, {\n      method: method,\n      body: bodyJSON,\n      headers,\n      signal: controller.signal\n    }).then(async res => {\n      if (res.ok) {\n        return res.json();\n      }\n      const responseText = res.body ? await res.text() : null;\n      const response = safeParseJSON(responseText);\n      throw new HTTPRequestError({\n        error: response?.message,\n        hostname,\n        path,\n        method,\n        requestBody: bodyJSON,\n        responseBody: responseText,\n        responseStatusText: res.statusText,\n        statusCode: res.status\n      });\n    }).catch(async e => {\n      if (e instanceof HTTPRequestError) {\n        throw e;\n      }\n      if (e.name === \"AbortError\") {\n        throw e;\n      }\n\n      // Show AN error for all network errors\n      if (enableRequestLogging) {\n        await _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.log({\n          title: \"Access Node Error\",\n          message: `The provided access node ${hostname} does not appear to be a valid REST/HTTP access node.\n  Please verify that you are not unintentionally using a GRPC access node.\n  See more here: https://docs.onflow.org/fcl/reference/sdk-guidelines/#connect`,\n          level: _onflow_util_logger__WEBPACK_IMPORTED_MODULE_2__.LEVELS.error\n        });\n      }\n      throw new HTTPRequestError({\n        error: e?.message,\n        hostname,\n        path,\n        method,\n        requestBody: bodyJSON\n      });\n    }).finally(() => {\n      clearTimeout(fetchTimeout);\n    });\n  }\n  async function requestLoop() {\n    let retryAttempt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    try {\n      const resp = await makeRequest();\n      return resp;\n    } catch (error) {\n      const retryStatusCodes = [408, 429, 500, 502, 503, 504];\n      if (error.name === \"AbortError\" || retryStatusCodes.includes(error.statusCode)) {\n        return await new Promise((resolve, reject) => {\n          if (retryAttempt < retryLimit) {\n            if (enableRequestLogging) {\n              console.warn(`Access node unavailable, retrying in ${retryIntervalMs} ms...`);\n            }\n            setTimeout(() => {\n              resolve(requestLoop(retryAttempt + 1));\n            }, retryIntervalMs);\n          } else {\n            reject(error);\n          }\n        });\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  // Keep retrying request until server available or max attempts exceeded\n  return await requestLoop();\n}\nfunction safeParseJSON(data) {\n  try {\n    return JSON.parse(data);\n  } catch {\n    return null;\n  }\n}\n\nasync function sendExecuteScriptAtBlockIDRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/scripts?block_id=${ix.block.id}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))\n    }\n  });\n  return constructResponse$4(ix, context, res);\n}\nasync function sendExecuteScriptAtBlockHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/scripts?block_height=${ix.block.height}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))\n    }\n  });\n  return constructResponse$4(ix, context, res);\n}\nasync function sendExecuteScriptAtLatestBlockRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/scripts?block_height=sealed`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))\n    }\n  });\n  return constructResponse$4(ix, context, res);\n}\nfunction constructResponse$4(ix, context, res) {\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.encodedData = JSON.parse(context.Buffer.from(res, \"base64\").toString());\n  return ret;\n}\nasync function sendExecuteScript(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Execute Script Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Execute Script Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Execute Script Error: context.Buffer must be defined.`);\n  ix = await ix;\n  if (ix.block.id) {\n    return await sendExecuteScriptAtBlockIDRequest(ix, context, opts);\n  } else if (ix.block.height) {\n    return await sendExecuteScriptAtBlockHeightRequest(ix, context, opts);\n  } else {\n    return await sendExecuteScriptAtLatestBlockRequest(ix, context, opts);\n  }\n}\n\nconst HashAlgorithmIDs = {\n  SHA2_256: 1,\n  SHA2_384: 2,\n  SHA3_256: 3,\n  SHA3_384: 4,\n  KMAC128_BLS_BLS12_381: 5\n};\nconst SignatureAlgorithmIDs = {\n  ECDSA_P256: 1,\n  ECDSA_secp256k1: 2,\n  BLS_BLS12_381: 3\n};\nasync function sendGetAccountAtBlockHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/accounts/${ix.account.addr}?block_height=${ix.block.height}&expand=contracts,keys`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$3(ix, context, res);\n}\nasync function sendGetAccountAtLatestBlockRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/accounts/${ix.account.addr}?block_height=sealed&expand=contracts,keys`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$3(ix, context, res);\n}\nfunction constructResponse$3(ix, context, res) {\n  let ret = context.response();\n  ret.tag = ix.tag;\n  const unwrapContracts = contracts => {\n    const c = {};\n    if (!contracts) return c;\n    for (let key of Object.keys(contracts)) {\n      c[key] = context.Buffer.from(contracts[key], \"base64\").toString();\n    }\n    return c;\n  };\n  ret.account = {\n    address: res.address,\n    balance: Number(res.balance),\n    code: \"\",\n    contracts: unwrapContracts(res.contracts),\n    keys: res.keys?.map(key => ({\n      index: Number(key.index),\n      publicKey: key.public_key.replace(/^0x/, \"\"),\n      signAlgo: SignatureAlgorithmIDs[key.signing_algorithm],\n      signAlgoString: key.signing_algorithm,\n      hashAlgo: HashAlgorithmIDs[key.hashing_algorithm],\n      hashAlgoString: key.hashing_algorithm,\n      sequenceNumber: Number(key.sequence_number),\n      weight: Number(key.weight),\n      revoked: key.revoked\n    })) ?? []\n  };\n  return ret;\n}\nasync function sendGetAccount(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Account Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Account Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Account Error: context.Buffer must be defined.`);\n  ix = await ix;\n  if (ix.block.height !== null) {\n    return await sendGetAccountAtBlockHeightRequest(ix, context, opts);\n  } else {\n    return await sendGetAccountAtLatestBlockRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetBlockHeaderByIDRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks/${ix.block.id}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$2(ix, context, res);\n}\nasync function sendGetBlockHeaderByHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${ix.block.height}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$2(ix, context, res);\n}\nasync function sendGetLatestBlockHeaderRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const height = ix.block?.isSealed ? \"sealed\" : \"final\";\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${height}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$2(ix, context, res);\n}\nfunction constructResponse$2(ix, context, res) {\n  const block = res.length ? res[0] : null;\n  const ret = context.response();\n  ret.tag = ix.tag;\n  ret.blockHeader = {\n    id: block.header.id,\n    parentId: block.header.parent_id,\n    height: Number(block.header.height),\n    timestamp: block.header.timestamp\n  };\n  return ret;\n}\nasync function sendGetBlockHeader(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Block Header Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Block Header Error: context.response must be defined.`);\n  ix = await ix;\n  const interactionHasBlockID = ix.block.id !== null;\n  const interactionHasBlockHeight = ix.block.height !== null;\n  if (interactionHasBlockID) {\n    return await sendGetBlockHeaderByIDRequest(ix, context, opts);\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockHeaderByHeightRequest(ix, context, opts);\n  } else {\n    return await sendGetLatestBlockHeaderRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetBlockByIDRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks/${ix.block.id}?expand=payload`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$1(ix, context, res);\n}\nasync function sendGetBlockByHeightRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${ix.block.height}&expand=payload`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$1(ix, context, res);\n}\nasync function sendGetBlockRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const height = ix.block?.isSealed ? \"sealed\" : \"final\";\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${height}&expand=payload`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse$1(ix, context, res);\n}\nfunction constructResponse$1(ix, context, res) {\n  const block = res.length ? res[0] : null;\n  const ret = context.response();\n  ret.tag = ix.tag;\n  ret.block = {\n    id: block.header.id,\n    parentId: block.header.parent_id,\n    height: Number(block.header.height),\n    timestamp: block.header.timestamp,\n    collectionGuarantees: block.payload.collection_guarantees.map(collectionGuarantee => ({\n      collectionId: collectionGuarantee.collection_id,\n      signerIds: collectionGuarantee.signer_ids\n    })),\n    blockSeals: block.payload.block_seals.map(blockSeal => ({\n      blockId: blockSeal.block_id,\n      executionReceiptId: blockSeal.result_id\n    }))\n  };\n  return ret;\n}\nasync function sendGetBlock(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Block Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Block Error: context.response must be defined.`);\n  ix = await ix;\n  const interactionHasBlockID = ix.block.id !== null;\n  const interactionHasBlockHeight = ix.block.height !== null;\n  if (interactionHasBlockID) {\n    return await sendGetBlockByIDRequest(ix, context, opts);\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockByHeightRequest(ix, context, opts);\n  } else {\n    return await sendGetBlockRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetCollection(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Collection Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Collection Error: context.response must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/collections/${ix.collection.id}?expand=transactions`,\n    method: \"GET\",\n    body: null\n  });\n  const ret = context.response();\n  ret.tag = ix.tag;\n  ret.collection = {\n    id: res.id,\n    transactionIds: res.transactions.map(transaction => transaction.id)\n  };\n  return ret;\n}\n\nasync function sendGetEventsForHeightRangeRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/events?type=${ix.events.eventType}&start_height=${ix.events.start}&end_height=${ix.events.end}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse(ix, context, res);\n}\nasync function sendGetEventsForBlockIDsRequest(ix, context, opts) {\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/events?type=${ix.events.eventType}&block_ids=${ix.events.blockIds.join(\",\")}`,\n    method: \"GET\",\n    body: null\n  });\n  return constructResponse(ix, context, res);\n}\nfunction constructResponse(ix, context, res) {\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.events = [];\n  res.forEach(block => block.events ? block.events.forEach(event => ret.events.push({\n    blockId: block.block_id,\n    blockHeight: Number(block.block_height),\n    blockTimestamp: block.block_timestamp,\n    type: event.type,\n    transactionId: event.transaction_id,\n    transactionIndex: Number(event.transaction_index),\n    eventIndex: Number(event.event_index),\n    payload: JSON.parse(context.Buffer.from(event.payload, \"base64\").toString())\n  })) : null);\n  return ret;\n}\nasync function sendGetEvents(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Events Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Events Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Events Error: context.Buffer must be defined.`);\n  ix = await ix;\n  const interactionContainsBlockHeightRange = ix.events.start !== null;\n  const interactionContainsBlockIDsList = Array.isArray(ix.events.blockIds) && ix.events.blockIds.length > 0;\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(interactionContainsBlockHeightRange || interactionContainsBlockIDsList, \"SendGetEventsError: Unable to determine which get events request to send. Either a block height range, or block IDs must be specified.\");\n  if (interactionContainsBlockHeightRange) {\n    return await sendGetEventsForHeightRangeRequest(ix, context, opts);\n  } else {\n    return await sendGetEventsForBlockIDsRequest(ix, context, opts);\n  }\n}\n\nasync function sendGetTransaction(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Transaction Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Transaction Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Transaction Error: context.Buffer must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/transactions/${ix.transaction.id}`,\n    method: \"GET\",\n    body: null\n  });\n  const unwrapKey = key => ({\n    address: key.address,\n    keyId: Number(key.key_id),\n    sequenceNumber: Number(key.sequence_number)\n  });\n  const unwrapSignature = sig => ({\n    address: sig.address,\n    keyId: Number(sig.key_index),\n    signature: sig.signature\n  });\n  const unwrapArg = arg => JSON.parse(context.Buffer.from(arg, \"base64\").toString());\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.transaction = {\n    script: context.Buffer.from(res.script, \"base64\").toString(),\n    args: [...res.arguments.map(unwrapArg)],\n    referenceBlockId: res.reference_block_id,\n    gasLimit: Number(res.gas_limit),\n    payer: res.payer,\n    proposalKey: res.proposal_key ? unwrapKey(res.proposal_key) : res.proposal_key,\n    authorizers: res.authorizers,\n    payloadSignatures: [...res.payload_signatures.map(unwrapSignature)],\n    envelopeSignatures: [...res.envelope_signatures.map(unwrapSignature)]\n  };\n  return ret;\n}\n\nconst STATUS_MAP = {\n  UNKNOWN: 0,\n  PENDING: 1,\n  FINALIZED: 2,\n  EXECUTED: 3,\n  SEALED: 4,\n  EXPIRED: 5\n};\nasync function sendGetTransactionStatus(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Transaction Status Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Transaction Status Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Get Transaction Status Error: context.Buffer must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/transaction_results/${ix.transaction.id}`,\n    method: \"GET\",\n    body: null\n  });\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.transactionStatus = {\n    blockId: res.block_id,\n    status: STATUS_MAP[res.status.toUpperCase()] || \"\",\n    statusString: res.status.toUpperCase(),\n    statusCode: res.status_code,\n    errorMessage: res.error_message,\n    events: res.events.map(event => ({\n      type: event.type,\n      transactionId: event.transaction_id,\n      transactionIndex: Number(event.transaction_index),\n      eventIndex: Number(event.event_index),\n      payload: JSON.parse(context.Buffer.from(event.payload, \"base64\").toString())\n    }))\n  };\n  return ret;\n}\n\nasync function sendPing(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Ping Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Ping Error: context.response must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  await httpRequest$1({\n    hostname: opts.node,\n    path: \"/v1/blocks?height=sealed\",\n    method: \"GET\",\n    body: null\n  });\n  let ret = context.response();\n  ret.tag = ix.tag;\n  return ret;\n}\n\nconst idof = acct => `${withPrefix(acct.addr)}-${acct.keyId}`;\nasync function sendTransaction(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Transaction Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Transaction Error: context.response must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.Buffer, `SDK Send Transaction Error: context.Buffer must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n\n  // Apply Non Payer Signatures to Payload Signatures\n  let payloadSignatures = [];\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (!acct.role.payer && acct.signature != null) {\n        payloadSignatures.push({\n          address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(acct.addr),\n          key_index: String(acct.keyId),\n          signature: context.Buffer.from(acct.signature, \"hex\").toString(\"base64\")\n        });\n      }\n    } catch (error) {\n      console.error(\"SDK HTTP Send Error: Trouble applying payload signature\", {\n        acct,\n        ix\n      });\n      throw error;\n    }\n  }\n\n  // Apply Payer Signatures to Envelope Signatures\n  let envelopeSignatures = {};\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (acct.role.payer && acct.signature != null) {\n        let id = acct.tempId || idof(acct);\n        envelopeSignatures[id] = envelopeSignatures[id] || {\n          address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(acct.addr),\n          key_index: String(acct.keyId),\n          signature: context.Buffer.from(acct.signature, \"hex\").toString(\"base64\")\n        };\n      }\n    } catch (error) {\n      console.error(\"SDK HTTP Send Error: Trouble applying envelope signature\", {\n        acct,\n        ix\n      });\n      throw error;\n    }\n  }\n  envelopeSignatures = Object.values(envelopeSignatures);\n  var t1 = Date.now();\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/transactions`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: [...ix.message.arguments.map(arg => context.Buffer.from(JSON.stringify(ix.arguments[arg].asArgument)).toString(\"base64\"))],\n      reference_block_id: ix.message.refBlock ? ix.message.refBlock : null,\n      gas_limit: String(ix.message.computeLimit),\n      payer: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr),\n      proposal_key: {\n        address: (0,_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix)(ix.accounts[ix.proposer].addr),\n        key_index: String(ix.accounts[ix.proposer].keyId),\n        sequence_number: String(ix.accounts[ix.proposer].sequenceNum)\n      },\n      authorizers: ix.authorizations.map(tempId => ix.accounts[tempId].addr).reduce((prev, current) => {\n        return prev.find(item => item === current) ? prev : [...prev, current];\n      }, []).map(_onflow_util_address__WEBPACK_IMPORTED_MODULE_4__.sansPrefix),\n      payload_signatures: payloadSignatures,\n      envelope_signatures: envelopeSignatures\n    }\n  });\n  var t2 = Date.now();\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.transactionId = res.id;\n  if (typeof window !== \"undefined\" && typeof CustomEvent !== \"undefined\") {\n    window.dispatchEvent(new CustomEvent(\"FLOW::TX\", {\n      detail: {\n        txId: ret.transactionId,\n        delta: t2 - t1\n      }\n    }));\n  }\n  return ret;\n}\n\nasync function sendGetNetworkParameters(ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Get Network Parameters Error: opts.node must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.response, `SDK Send Get Network Parameters Error: context.response must be defined.`);\n  const httpRequest$1 = opts.httpRequest || httpRequest;\n  ix = await ix;\n  const res = await httpRequest$1({\n    hostname: opts.node,\n    path: `/v1/network/parameters`,\n    method: \"GET\",\n    body: null,\n    enableRequestLogging: opts.enableRequestLogging ?? true\n  });\n  let ret = context.response();\n  ret.tag = ix.tag;\n  ret.networkParameters = {\n    chainId: res.chain_id\n  };\n  return ret;\n}\n\nconst send = async function (ix) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(opts.node, `SDK Send Error: Either opts.node or \"accessNode.api\" in config must be defined.`);\n  (0,_onflow_util_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(context.ix, `SDK Send Error: context.ix must be defined.`);\n  ix = await ix;\n\n  // prettier-ignore\n  switch (true) {\n    case context.ix.isTransaction(ix):\n      return opts.sendTransaction ? opts.sendTransaction(ix, context, opts) : sendTransaction(ix, context, opts);\n    case context.ix.isGetTransactionStatus(ix):\n      return opts.sendGetTransactionStatus ? opts.sendGetTransactionStatus(ix, context, opts) : sendGetTransactionStatus(ix, context, opts);\n    case context.ix.isGetTransaction(ix):\n      return opts.sendGetTransaction ? opts.sendGetTransaction(ix, context, opts) : sendGetTransaction(ix, context, opts);\n    case context.ix.isScript(ix):\n      return opts.sendExecuteScript ? opts.sendExecuteScript(ix, context, opts) : sendExecuteScript(ix, context, opts);\n    case context.ix.isGetAccount(ix):\n      return opts.sendGetAccount ? opts.sendGetAccount(ix, context, opts) : sendGetAccount(ix, context, opts);\n    case context.ix.isGetEvents(ix):\n      return opts.sendGetEvents ? opts.sendGetEvents(ix, context, opts) : sendGetEvents(ix, context, opts);\n    case context.ix.isGetBlock(ix):\n      return opts.sendGetBlock ? opts.sendGetBlock(ix, context, opts) : sendGetBlock(ix, context, opts);\n    case context.ix.isGetBlockHeader(ix):\n      return opts.sendGetBlockHeader ? opts.sendGetBlockHeader(ix, context, opts) : sendGetBlockHeader(ix, context, opts);\n    case context.ix.isGetCollection(ix):\n      return opts.sendGetCollection ? opts.sendGetCollection(ix, context, opts) : sendGetCollection(ix, context, opts);\n    case context.ix.isPing(ix):\n      return opts.sendPing ? opts.sendPing(ix, context, opts) : sendPing(ix, context, opts);\n    case context.ix.isGetNetworkParameters(ix):\n      return opts.sendGetNetworkParameters ? opts.sendGetNetworkParameters(ix, context, opts) : sendGetNetworkParameters(ix, context, opts);\n    default:\n      return ix;\n  }\n};\n\n\n//# sourceMappingURL=sdk-send-http.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@onflow/transport-http/dist/sdk-send-http.module.js\n"));

/***/ }),

/***/ "./node_modules/@onflow/types/dist/types.module.js":
/*!*********************************************************!*\
  !*** ./node_modules/@onflow/types/dist/types.module.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Address\": function() { return /* binding */ Address; },\n/* harmony export */   \"Array\": function() { return /* binding */ _Array; },\n/* harmony export */   \"Bool\": function() { return /* binding */ Bool; },\n/* harmony export */   \"Character\": function() { return /* binding */ Character; },\n/* harmony export */   \"Dictionary\": function() { return /* binding */ Dictionary; },\n/* harmony export */   \"Enum\": function() { return /* binding */ Enum; },\n/* harmony export */   \"Event\": function() { return /* binding */ Event; },\n/* harmony export */   \"Fix64\": function() { return /* binding */ Fix64; },\n/* harmony export */   \"Identity\": function() { return /* binding */ Identity; },\n/* harmony export */   \"Int\": function() { return /* binding */ Int; },\n/* harmony export */   \"Int128\": function() { return /* binding */ Int128; },\n/* harmony export */   \"Int16\": function() { return /* binding */ Int16; },\n/* harmony export */   \"Int256\": function() { return /* binding */ Int256; },\n/* harmony export */   \"Int32\": function() { return /* binding */ Int32; },\n/* harmony export */   \"Int64\": function() { return /* binding */ Int64; },\n/* harmony export */   \"Int8\": function() { return /* binding */ Int8; },\n/* harmony export */   \"Optional\": function() { return /* binding */ Optional; },\n/* harmony export */   \"Path\": function() { return /* binding */ Path; },\n/* harmony export */   \"Reference\": function() { return /* binding */ Reference; },\n/* harmony export */   \"Resource\": function() { return /* binding */ Resource; },\n/* harmony export */   \"String\": function() { return /* binding */ String; },\n/* harmony export */   \"Struct\": function() { return /* binding */ Struct; },\n/* harmony export */   \"UFix64\": function() { return /* binding */ UFix64; },\n/* harmony export */   \"UInt\": function() { return /* binding */ UInt; },\n/* harmony export */   \"UInt128\": function() { return /* binding */ UInt128; },\n/* harmony export */   \"UInt16\": function() { return /* binding */ UInt16; },\n/* harmony export */   \"UInt256\": function() { return /* binding */ UInt256; },\n/* harmony export */   \"UInt32\": function() { return /* binding */ UInt32; },\n/* harmony export */   \"UInt64\": function() { return /* binding */ UInt64; },\n/* harmony export */   \"UInt8\": function() { return /* binding */ UInt8; },\n/* harmony export */   \"Void\": function() { return /* binding */ Void; },\n/* harmony export */   \"Word16\": function() { return /* binding */ Word16; },\n/* harmony export */   \"Word32\": function() { return /* binding */ Word32; },\n/* harmony export */   \"Word64\": function() { return /* binding */ Word64; },\n/* harmony export */   \"Word8\": function() { return /* binding */ Word8; },\n/* harmony export */   \"_Array\": function() { return /* binding */ _Array; }\n/* harmony export */ });\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\n/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise;\nvar queueMicrotask_1 = typeof queueMicrotask === 'function' ? queueMicrotask.bind(typeof window !== 'undefined' ? window : commonjsGlobal)\n// reuse resolved promise, and allocate it lazily\n: cb => (promise || (promise = Promise.resolve())).then(cb).catch(err => setTimeout(() => {\n  throw err;\n}, 0));\n\nconst mailbox = () => {\n  const queue = [];\n  var next;\n  return {\n    async deliver(msg) {\n      queue.push(msg);\n      if (next) {\n        next(queue.shift());\n        next = undefined;\n      }\n    },\n    receive() {\n      return new Promise(function innerReceive(resolve) {\n        const msg = queue.shift();\n        if (msg) return resolve(msg);\n        next = resolve;\n      });\n    }\n  };\n};\nconst INIT = \"INIT\";\nconst SUBSCRIBE = \"SUBSCRIBE\";\nconst UNSUBSCRIBE = \"UNSUBSCRIBE\";\nconst UPDATED$1 = \"UPDATED\";\nconst EXIT = \"EXIT\";\nconst TERMINATE = \"TERMINATE\";\nconst root = typeof self === \"object\" && self.self === self && self || typeof __webpack_require__.g === \"object\" && __webpack_require__.g.global === __webpack_require__.g && __webpack_require__.g || typeof window === \"object\" && window.window === window && window;\nroot.FCL_REGISTRY = root.FCL_REGISTRY == null ? {} : root.FCL_REGISTRY;\nvar pid = 0b0;\nconst DEFAULT_TIMEOUT = 5000;\nconst send = function (addr, tag, data) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return new Promise((reply, reject) => {\n    const expectReply = opts.expectReply || false;\n    const timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT;\n    if (expectReply && timeout) {\n      setTimeout(() => reject(new Error(`Timeout: ${timeout}ms passed without a response.`)), timeout);\n    }\n    const payload = {\n      to: addr,\n      from: opts.from,\n      tag,\n      data,\n      timeout,\n      reply,\n      reject\n    };\n    try {\n      root.FCL_REGISTRY[addr] && root.FCL_REGISTRY[addr].mailbox.deliver(payload);\n      if (!expectReply) reply(true);\n    } catch (error) {\n      console.error(\"FCL.Actor -- Could Not Deliver Message\", payload, root.FCL_REGISTRY[addr], error);\n    }\n  });\n};\nconst kill = addr => {\n  delete root.FCL_REGISTRY[addr];\n};\nconst fromHandlers = function () {\n  let handlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return async ctx => {\n    if (typeof handlers[INIT] === \"function\") await handlers[INIT](ctx);\n    __loop: while (1) {\n      const letter = await ctx.receive();\n      try {\n        if (letter.tag === EXIT) {\n          if (typeof handlers[TERMINATE] === \"function\") {\n            await handlers[TERMINATE](ctx, letter, letter.data || {});\n          }\n          break __loop;\n        }\n        await handlers[letter.tag](ctx, letter, letter.data || {});\n      } catch (error) {\n        console.error(`${ctx.self()} Error`, letter, error);\n      } finally {\n        continue __loop;\n      }\n    }\n  };\n};\nconst spawn = function (fn) {\n  let addr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (addr == null) addr = ++pid;\n  if (root.FCL_REGISTRY[addr] != null) return addr;\n  root.FCL_REGISTRY[addr] = {\n    addr,\n    mailbox: mailbox(),\n    subs: new Set(),\n    kvs: {},\n    error: null\n  };\n  const ctx = {\n    self: () => addr,\n    receive: () => root.FCL_REGISTRY[addr].mailbox.receive(),\n    send: function (to, tag, data) {\n      let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      opts.from = addr;\n      return send(to, tag, data, opts);\n    },\n    sendSelf: (tag, data, opts) => {\n      if (root.FCL_REGISTRY[addr]) send(addr, tag, data, opts);\n    },\n    broadcast: function (tag, data) {\n      let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      opts.from = addr;\n      for (let to of root.FCL_REGISTRY[addr].subs) send(to, tag, data, opts);\n    },\n    subscribe: sub => sub != null && root.FCL_REGISTRY[addr].subs.add(sub),\n    unsubscribe: sub => sub != null && root.FCL_REGISTRY[addr].subs.delete(sub),\n    subscriberCount: () => root.FCL_REGISTRY[addr].subs.size,\n    hasSubs: () => !!root.FCL_REGISTRY[addr].subs.size,\n    put: (key, value) => {\n      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = value;\n    },\n    get: (key, fallback) => {\n      const value = root.FCL_REGISTRY[addr].kvs[key];\n      return value == null ? fallback : value;\n    },\n    delete: key => {\n      delete root.FCL_REGISTRY[addr].kvs[key];\n    },\n    update: (key, fn) => {\n      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = fn(root.FCL_REGISTRY[addr].kvs[key]);\n    },\n    keys: () => {\n      return Object.keys(root.FCL_REGISTRY[addr].kvs);\n    },\n    all: () => {\n      return root.FCL_REGISTRY[addr].kvs;\n    },\n    where: pattern => {\n      return Object.keys(root.FCL_REGISTRY[addr].kvs).reduce((acc, key) => {\n        return pattern.test(key) ? {\n          ...acc,\n          [key]: root.FCL_REGISTRY[addr].kvs[key]\n        } : acc;\n      }, {});\n    },\n    merge: function () {\n      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      Object.keys(data).forEach(key => root.FCL_REGISTRY[addr].kvs[key] = data[key]);\n    },\n    fatalError: error => {\n      root.FCL_REGISTRY[addr].error = error;\n      for (let to of root.FCL_REGISTRY[addr].subs) send(to, UPDATED$1);\n    }\n  };\n  if (typeof fn === \"object\") fn = fromHandlers(fn);\n  queueMicrotask_1(async () => {\n    await fn(ctx);\n    kill(addr);\n  });\n  return addr;\n};\n\n// Returns an unsubscribe function\n// A SUBSCRIBE handler will need to be created to handle the subscription event\n//\n//  [SUBSCRIBE]: (ctx, letter) => {\n//    ctx.subscribe(letter.from)\n//    ctx.send(letter.from, UPDATED, ctx.all())\n//  }\n//\nfunction subscriber(address, spawnFn, callback) {\n  spawnFn(address);\n  const EXIT = \"@EXIT\";\n  const self = spawn(async ctx => {\n    ctx.send(address, SUBSCRIBE);\n    while (1) {\n      const letter = await ctx.receive();\n      const error = root.FCL_REGISTRY[address].error;\n      if (letter.tag === EXIT) {\n        ctx.send(address, UNSUBSCRIBE);\n        return;\n      }\n      if (error) {\n        callback(null, error);\n        ctx.send(address, UNSUBSCRIBE);\n        return;\n      }\n      callback(letter.data, null);\n    }\n  });\n  return () => send(self, EXIT);\n}\n\n/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param {boolean} fact\n * @param {string} msg\n * @param {Array} rest\n * @returns {void}\n */\nfunction invariant(fact, msg) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`);\n    error.stack = error.stack.split(\"\\n\").filter(d => !/at invariant/.test(d)).join(\"\\n\");\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\");\n    throw error;\n  }\n}\nconst pipe = function () {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return func(res);\n    }, v);\n  };\n};\n\n/***\n * Merge multiple functions returning objects into one object.\n * @param {...function(*): object} funcs - Functions to merge\n * @return {object} - Merged object\n */\nconst mergePipe = function () {\n  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    funcs[_key2] = arguments[_key2];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return {\n        ...res,\n        ...func(v)\n      };\n    }, {});\n  };\n};\n\n/**\n * @description Object check\n * @param {*} value - Value to check\n * @returns {boolean} - Is object status\n */\nconst isObject = value => value && typeof value === \"object\" && !Array.isArray(value);\n\n/**\n * @description Deep merge multiple objects.\n * @param {object} target - Target object\n * @param {...object[]} sources - Source objects\n * @returns {object} - Merged object\n */\nconst mergeDeep = function (target) {\n  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    sources[_key3 - 1] = arguments[_key3];\n  }\n  if (!sources.length) return target;\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, {\n          [key]: {}\n        });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  return mergeDeep(target, ...sources);\n};\n\n/**\n * @description Deep merge multiple Flow JSON.\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {object} - Merged Flow JSON\n */\nconst mergeFlowJSONs = value => Array.isArray(value) ? mergeDeep({}, ...value) : value;\n\n/**\n * @description Filter out contracts section of flow.json.\n * @param {object|object[]} obj - Flow JSON or array of Flow JSONs\n * @returns {object} - Contracts section of Flow JSON\n */\nconst filterContracts = obj => obj.contracts ? obj.contracts : {};\n\n/**\n * @description Gathers contract addresses by network\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapContractAliasesToNetworkAddress = network => contracts => {\n  return Object.entries(contracts).reduce((c, _ref) => {\n    let [key, value] = _ref;\n    const networkContractAlias = value?.aliases?.[network];\n    if (networkContractAlias) {\n      c[key] = networkContractAlias;\n    }\n    return c;\n  }, {});\n};\nconst mapDeploymentsToNetworkAddress = network => _ref2 => {\n  let {\n    deployments = {},\n    accounts = {}\n  } = _ref2;\n  const networkDeployment = deployments?.[network];\n  if (!networkDeployment) return {};\n  return Object.entries(networkDeployment).reduce((c, _ref3) => {\n    let [key, value] = _ref3;\n    // Resolve account address\n    const accountAddress = accounts[key]?.address;\n    if (!accountAddress) return c;\n\n    // Create an object assigning the address to the contract name.\n    return value.reduce((c, contract) => {\n      return {\n        ...c,\n        [contract]: accountAddress\n      };\n    }, {});\n  }, {});\n};\n\n/**\n * @description Take in flow.json files and return contract to address mapping by network\n * @param {object|object[]} jsons - Flow JSON or array of Flow JSONs\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst getContracts = (jsons, network) => {\n  return pipe(mergeFlowJSONs, mergePipe(mapDeploymentsToNetworkAddress(network), pipe(filterContracts, mapContractAliasesToNetworkAddress(network))))(jsons);\n};\n\n/**\n * @description Checks if string is hexidecimal\n * @param {string} str - String to check\n * @returns {boolean} - Is hexidecimal status\n */\nconst isHexidecimal = str => {\n  // Check that it is a string\n  if (typeof str !== \"string\") return false;\n  return /^[0-9A-Fa-f]+$/.test(str);\n};\n\n/**\n * @description Checks flow.json file for private keys\n * @param {object} flowJSON - Flow JSON\n * @returns {boolean} - Has private keys status\n */\nconst hasPrivateKeys = flowJSON => {\n  return Object.entries(flowJSON?.accounts).reduce((hasPrivateKey, _ref4) => {\n    let [key, value] = _ref4;\n    if (hasPrivateKey) return true;\n    return value?.hasOwnProperty(\"key\") && isHexidecimal(value?.key);\n  }, false);\n};\n\n/**\n * @description Take in flow.json or array of flow.json files and checks for private keys\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {boolean} - Has private keys status\n */\nconst anyHasPrivateKeys = value => {\n  if (isObject(value)) return hasPrivateKeys(value);\n  return value.some(hasPrivateKeys);\n};\n\n/**\n * @description Format network to always be 'emulator', 'testnet', or 'mainnet'\n * @param {string} network - Network to format\n * @returns {string} - Formatted network name (either 'emulator', 'testnet', or 'mainnet')\n */\nconst cleanNetwork = network => network?.toLowerCase() === \"local\" ? \"emulator\" : network?.toLowerCase();\nconst NAME = \"config\";\nconst PUT = \"PUT_CONFIG\";\nconst GET = \"GET_CONFIG\";\nconst GET_ALL = \"GET_ALL_CONFIG\";\nconst UPDATE = \"UPDATE_CONFIG\";\nconst DELETE = \"DELETE_CONFIG\";\nconst CLEAR = \"CLEAR_CONFIG\";\nconst WHERE = \"WHERE_CONFIG\";\nconst UPDATED = \"CONFIG/UPDATED\";\nconst identity = v => v;\nconst HANDLERS = {\n  [PUT]: (ctx, _letter, _ref) => {\n    let {\n      key,\n      value\n    } = _ref;\n    if (key == null) throw new Error(\"Missing 'key' for config/put.\");\n    ctx.put(key, value);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [GET]: (ctx, letter, _ref2) => {\n    let {\n      key,\n      fallback\n    } = _ref2;\n    if (key == null) throw new Error(\"Missing 'key' for config/get\");\n    letter.reply(ctx.get(key, fallback));\n  },\n  [GET_ALL]: (ctx, letter) => {\n    letter.reply({\n      ...ctx.all()\n    });\n  },\n  [UPDATE]: (ctx, letter, _ref3) => {\n    let {\n      key,\n      fn\n    } = _ref3;\n    if (key == null) throw new Error(\"Missing 'key' for config/update\");\n    ctx.update(key, fn || identity);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [DELETE]: (ctx, letter, _ref4) => {\n    let {\n      key\n    } = _ref4;\n    if (key == null) throw new Error(\"Missing 'key' for config/delete\");\n    ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [CLEAR]: (ctx, letter) => {\n    let keys = Object.keys(ctx.all());\n    for (let key of keys) ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [WHERE]: (ctx, letter, _ref5) => {\n    let {\n      pattern\n    } = _ref5;\n    if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\");\n    letter.reply(ctx.where(pattern));\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n  }\n};\nspawn(HANDLERS, NAME);\n\n/**\n * @description Adds a key-value pair to the config\n * @param {string} key - The key to add\n * @param {*} value - The value to add\n * @returns {Promise<object>} - The current config\n */\nfunction put(key, value) {\n  send(NAME, PUT, {\n    key,\n    value\n  });\n  return config();\n}\n\n/**\n * @description Gets a key-value pair with a fallback from the config\n * @param {string} key - The key to add\n * @param {*} [fallback] - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nfunction get(key, fallback) {\n  return send(NAME, GET, {\n    key,\n    fallback\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Returns the first non null config value or the fallback\n * @param {string[]} wants - The keys to search for\n * @param {*} fallback - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nasync function first() {\n  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let fallback = arguments.length > 1 ? arguments[1] : undefined;\n  if (!wants.length) return fallback;\n  const [head, ...rest] = wants;\n  const ret = await get(head);\n  if (ret == null) return first(rest, fallback);\n  return ret;\n}\n\n/**\n * @description Returns the current config\n * @returns {Promise<object>} - The current config\n */\nfunction all() {\n  return send(NAME, GET_ALL, null, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Updates a key-value pair in the config\n * @param {string} key - The key to update\n * @param {Function} fn - The function to update the value with\n * @returns {Promise<object>} - The current config\n */\nfunction update(key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;\n  send(NAME, UPDATE, {\n    key,\n    fn\n  });\n  return config();\n}\n\n/**\n * @description Deletes a key-value pair from the config\n * @param {string} key - The key to delete\n * @returns {Promise<object>} - The current config\n */\nfunction _delete(key) {\n  send(NAME, DELETE, {\n    key\n  });\n  return config();\n}\n\n/**\n * @description Returns a subset of the config based on a pattern\n * @param {string} pattern - The pattern to match keys against\n * @returns {Promise<object>} - The subset of the config\n */\nfunction where(pattern) {\n  return send(NAME, WHERE, {\n    pattern\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Subscribes to config updates\n * @param {Function} callback - The callback to call when config is updated\n * @returns {Function} - The unsubscribe function\n */\nfunction subscribe(callback) {\n  return subscriber(NAME, () => spawn(HANDLERS, NAME), callback);\n}\n\n/**\n * @description Clears the config\n * @returns {void}\n */\nfunction clearConfig() {\n  return send(NAME, CLEAR);\n}\n\n/**\n * @description Resets the config to a previous state\n * @param {object} oldConfig - The previous config state\n * @returns {Promise<object>} - The current config\n */\nfunction resetConfig(oldConfig) {\n  return clearConfig().then(config(oldConfig));\n}\n\n/**\n * @description Takes in flow.json or array of flow.json files and creates contract placeholders\n * @param {object|object[]} data - The flow.json or array of flow.json files\n * @returns {void}\n */\nasync function load(data) {\n  const network = await get(\"flow.network\");\n  const cleanedNetwork = cleanNetwork(network);\n  const {\n    flowJSON\n  } = data;\n  invariant(Boolean(flowJSON), \"config.load -- 'flowJSON' must be defined\");\n  invariant(cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define \"flow.network\" to \"emulator\", \"local\", \"testnet\", or \"mainnet\" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);\n  if (anyHasPrivateKeys(flowJSON)) {\n    const isEmulator = cleanedNetwork === \"emulator\";\n    log({\n      title: \"Private Keys Detected\",\n      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,\n      level: isEmulator ? LEVELS.warn : LEVELS.error\n    });\n    if (!isEmulator) return;\n  }\n  for (const [key, value] of Object.entries(getContracts(flowJSON, cleanedNetwork))) {\n    const contractConfigKey = `0x${key}`;\n    const existingContractConfigKey = await get(contractConfigKey);\n    if (existingContractConfigKey && existingContractConfigKey !== value) {\n      log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: LEVELS.warn\n      });\n    } else {\n      put(contractConfigKey, value);\n    }\n    const systemContractConfigKey = `system.contracts.${key}`;\n    const systemExistingContractConfigKeyValue = await get(systemContractConfigKey);\n    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value) {\n      log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: LEVELS.warn\n      });\n    } else {\n      put(systemContractConfigKey, value);\n    }\n  }\n}\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @description Sets the config\n * @param {object} [values] - The values to set\n */\nfunction config(values) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(d => put(d, values[d]));\n  }\n  return {\n    put,\n    get,\n    all,\n    first,\n    update,\n    delete: _delete,\n    where,\n    subscribe,\n    overload,\n    load\n  };\n}\nconfig.put = put;\nconfig.get = get;\nconfig.all = all;\nconfig.first = first;\nconfig.update = update;\nconfig.delete = _delete;\nconfig.where = where;\nconfig.subscribe = subscribe;\nconfig.overload = overload;\nconfig.load = load;\nconst noop = v => v;\nfunction overload() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  return new Promise(async (resolve, reject) => {\n    const oldConfig = await all();\n    try {\n      config(opts);\n      var result = await callback(await all());\n      await resetConfig(oldConfig);\n      resolve(result);\n    } catch (error) {\n      await resetConfig(oldConfig);\n      reject(error);\n    }\n  });\n}\n\n/**\n * The levels of the logger\n * \n * @typedef {Object} LEVELS\n * @property {number} debug - The debug level\n * @property {number} info - The info level\n * @property {number} log - The log level\n * @property {number} warn - The warn level\n * @property {number} error - The error level\n * \n */\nconst LEVELS = Object.freeze({\n  debug: 5,\n  info: 4,\n  log: 3,\n  warn: 2,\n  error: 1\n});\n\n/**\n * Builds a message formatted for the logger\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @returns {Array<string>} - The message formatted for the logger\n * \n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = _ref => {\n  let {\n    title,\n    message\n  } = _ref;\n  return [`\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `.replace(/\\n[^\\S\\r\\n]+/g, \"\\n\").trim(),, \"font-weight:bold;font-family:monospace;\"];\n};\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @param {number} options.level - The level of the log\n * @param {boolean} options.always - Whether to always show the log\n * @returns {Promise<void>}\n * \n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n * \n */\nconst log = async _ref2 => {\n  let {\n    title,\n    message,\n    level,\n    always = false\n  } = _ref2;\n  const configLoggerLevel = await config.get(\"logger.level\", LEVELS.warn);\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return;\n  const loggerMessageArgs = buildLoggerMessageArgs({\n    title,\n    message\n  });\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs);\n      break;\n    case LEVELS.info:\n      console.info(...loggerMessageArgs);\n      break;\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs);\n      break;\n    case LEVELS.error:\n      console.error(...loggerMessageArgs);\n      break;\n    default:\n      console.log(...loggerMessageArgs);\n  }\n};\n\n/**\n * Logs a deprecation notice\n * \n * @param {Object} options - The options for the log\n * @param {string} options.pkg - The package that is being deprecated\n * @param {string} options.subject - The subject of the deprecation\n * @param {string} options.transition - The transition path for the deprecation\n * @param {number} options.level - The level of the log\n * @param {string} options.message - The message of the log\n * @param {Function} options.callback - A callback to run after the log\n * @returns {Promise<void>}\n * \n * @example\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * \n */\nlog.deprecate = _ref3 => {\n  let {\n    pkg,\n    subject,\n    transition,\n    level = LEVELS.warn,\n    message = \"\",\n    callback = null\n  } = _ref3;\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  const logMessage = () => log({\n    title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n    message: `\n      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? \" of \" + pkg : \"\"}.` : \"\"}${message ? \"\\n\" + message : \"\"}${transition ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}` : \"\"}\n    `.trim(),\n    level\n  });\n  if (typeof callback === \"function\") {\n    return async function () {\n      await logMessage();\n      return await callback(...arguments);\n    };\n  }\n  return logMessage();\n};\n\nconst type = (label, asArgument, asInjection) => ({\n  label,\n  asArgument,\n  asInjection\n});\nconst isArray = d => Array.isArray(d);\nconst isObj = d => typeof d === \"object\";\nconst isNull = d => d == null;\nconst isBoolean = d => typeof d === \"boolean\";\nconst isNumber = d => typeof d === \"number\";\nconst isInteger = d => Number.isInteger(d);\nconst isString = d => typeof d === \"string\";\nconst throwTypeError = msg => {\n  throw new Error(\"Type Error: \" + msg);\n};\nconst numberValuesDeprecationNotice = type => {\n  log.deprecate({\n    pkg: \"@onflow/types\",\n    subject: `Passing in Number as value for ${type}`,\n    message: `Going forward, use String as value for ${type}.`,\n    transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0002-[U]Int*-and-Word*-as-Number\"\n  });\n};\nconst Identity = type(\"Identity\", v => v, v => v);\nconst UInt = type(\"UInt\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt\");\n    return {\n      type: \"UInt\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected Positive Integer for type Unsigned Int\");\n}, v => v);\nconst Int = type(\"Int\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int\");\n    return {\n      type: \"Int\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected Integer for type Int\");\n}, v => v);\nconst UInt8 = type(\"UInt8\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt8\");\n    return {\n      type: \"UInt8\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt8\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected integer for UInt8\");\n}, v => v);\nconst Int8 = type(\"Int8\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int8\");\n    return {\n      type: \"Int8\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int8\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected positive integer for Int8\");\n}, v => v);\nconst UInt16 = type(\"UInt16\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt16\");\n    return {\n      type: \"UInt16\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt16\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected integer for UInt16\");\n}, v => v);\nconst Int16 = type(\"Int16\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int16\");\n    return {\n      type: \"Int16\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int16\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected positive integer for Int16\");\n}, v => v);\nconst UInt32 = type(\"UInt32\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt32\");\n    return {\n      type: \"UInt32\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt32\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected integer for UInt32\");\n}, v => v);\nconst Int32 = type(\"Int32\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int32\");\n    return {\n      type: \"Int32\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int32\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected positive integer for Int32\");\n}, v => v);\nconst UInt64 = type(\"UInt64\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt64\");\n    return {\n      type: \"UInt64\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt64\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected integer for UInt64\");\n}, v => v);\nconst Int64 = type(\"Int64\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int64\");\n    return {\n      type: \"Int64\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int64\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected positive integer for Int64\");\n}, v => v);\nconst UInt128 = type(\"UInt128\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt128\");\n    return {\n      type: \"UInt128\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt128\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected integer for UInt128\");\n}, v => v);\nconst Int128 = type(\"Int128\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int128\");\n    return {\n      type: \"Int128\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int128\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected positive integer for Int128\");\n}, v => v);\nconst UInt256 = type(\"UInt256\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"UInt256\");\n    return {\n      type: \"UInt256\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"UInt256\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected integer for UInt256\");\n}, v => v);\nconst Int256 = type(\"Int256\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Int256\");\n    return {\n      type: \"Int256\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Int256\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected integer for Int256\");\n}, v => v);\nconst Word8 = type(\"Word8\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word8\");\n    return {\n      type: \"Word8\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word8\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected positive number for Word8\");\n}, v => v);\nconst Word16 = type(\"Word16\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word16\");\n    return {\n      type: \"Word16\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word16\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected positive number for Word16\");\n}, v => v);\nconst Word32 = type(\"Word32\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word32\");\n    return {\n      type: \"Word32\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word32\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected positive number for Word32\");\n}, v => v);\nconst Word64 = type(\"Word64\", v => {\n  if (isNumber(v) && isInteger(v)) {\n    numberValuesDeprecationNotice(\"Word64\");\n    return {\n      type: \"Word64\",\n      value: v.toString()\n    };\n  }\n  if (isString(v)) {\n    return {\n      type: \"Word64\",\n      value: v\n    };\n  }\n  throwTypeError(\"Expected positive number for Word64\");\n}, v => v);\nconst UFix64AndFix64NumberDeprecationNotice = () => {\n  log.deprecate({\n    subject: \"Passing in Numbers as values for Fix64 and UFix64 types\",\n    pkg: \"@onflow/types\",\n    transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/types/WARNINGS.md#0001-[U]Fix64-as-Number\"\n  });\n};\nconst UFix64 = type(\"UFix64\", v => {\n  if (isString(v)) {\n    const vParts = v.split(\".\");\n    if (vParts.length !== 2) {\n      throwTypeError(`Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n    if (vParts[1].length == 0 || vParts[1].length > 8) {\n      throwTypeError(`Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n\n    // make sure the number is extended to 8 decimal places so it matches cadence encoding of UFix values\n    vParts[1] = vParts[1].padEnd(8, \"0\");\n    v = vParts.join(\".\");\n    return {\n      type: \"UFix64\",\n      value: v\n    };\n  } else if (isNumber(v)) {\n    UFix64AndFix64NumberDeprecationNotice();\n    return {\n      type: \"UFix64\",\n      value: v.toString()\n    };\n  }\n  throwTypeError(\"Expected String for UFix64\");\n}, v => v);\nconst Fix64 = type(\"Fix64\", v => {\n  if (isString(v)) {\n    const vParts = v.split(\".\");\n    if (vParts.length !== 2) {\n      throwTypeError(`Expected one decimal but found ${vParts.length} in the [U]Fix64 value. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n    if (vParts[1].length == 0 || vParts[1].length > 8) {\n      throwTypeError(`Expected at least one digit, and at most 8 digits following the decimal of the [U]Fix64 value but found ${vParts[1].length} digits. Find out more about [U]Fix64 types here: https://docs.onflow.org/cadence/json-cadence-spec/#fixed-point-numbers`);\n    }\n\n    // make sure the number is extended to 8 decimal places so it matches cadence encoding of Fix64 values\n    vParts[1] = vParts[1].padEnd(8, \"0\");\n    v = vParts.join(\".\");\n    return {\n      type: \"Fix64\",\n      value: v\n    };\n  } else if (isNumber(v)) {\n    UFix64AndFix64NumberDeprecationNotice();\n    return {\n      type: \"Fix64\",\n      value: v.toString()\n    };\n  }\n  throwTypeError(\"Expected String for Fix64\");\n}, v => v);\nconst String = type(\"String\", v => {\n  if (isString(v)) return {\n    type: \"String\",\n    value: v\n  };\n  throwTypeError(\"Expected String for type String\");\n}, v => v);\nconst Character = type(\"Character\", v => {\n  if (isString(v)) return {\n    type: \"Character\",\n    value: v\n  };\n  throwTypeError(\"Expected Character for type Character\");\n}, v => v);\nconst Bool = type(\"Bool\", v => {\n  if (isBoolean(v)) return {\n    type: \"Bool\",\n    value: v\n  };\n  throwTypeError(\"Expected Boolean for type Bool\");\n}, v => v);\nconst Address = type(\"Address\", v => {\n  if (isString(v)) return {\n    type: \"Address\",\n    value: v\n  };\n  throwTypeError(\"Expected Address for type Address\");\n}, v => v);\nconst Void = type(\"Void\", v => {\n  if (!v || isNull(v)) return {\n    type: \"Void\"\n  };\n  throwTypeError(\"Expected Void for type Void\");\n}, v => v);\nconst Optional = children => type(\"Optional\", v => ({\n  type: \"Optional\",\n  value: isNull(v) ? null : children.asArgument(v)\n}), v => v);\nconst Reference = type(\"Reference\", v => {\n  if (isObj(v)) return {\n    type: \"Reference\",\n    value: v\n  };\n  throwTypeError(\"Expected Object for type Reference\");\n}, v => v);\nconst _Array = function () {\n  let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return type(\"Array\", v => {\n    return {\n      type: \"Array\",\n      value: isArray(children) ? children.map((c, i) => c.asArgument(v[i])) : v.map(x => children.asArgument(x))\n    };\n  }, v => v);\n};\nconst Dictionary = function () {\n  let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return type(\"Dictionary\", v => {\n    if (isObj(v)) return {\n      type: \"Dictionary\",\n      value: isArray(children) ? children.map((c, i) => ({\n        key: c.key.asArgument(v[i].key),\n        value: c.value.asArgument(v[i].value)\n      })) : isArray(v) ? v.map(x => ({\n        key: children.key.asArgument(x.key),\n        value: children.value.asArgument(x.value)\n      })) : [{\n        key: children.key.asArgument(v.key),\n        value: children.value.asArgument(v.value)\n      }]\n    };\n    throwTypeError(\"Expected Object for type Dictionary\");\n  }, v => v);\n};\nconst Event = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return type(\"Event\", v => {\n    if (isObj(v)) return {\n      type: \"Event\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    throwTypeError(\"Expected Object for type Event\");\n  }, v => v);\n};\nconst Resource = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return type(\"Resource\", v => {\n    if (isObj(v)) return {\n      type: \"Resource\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    throwTypeError(\"Expected Object for type Resource\");\n  }, v => v);\n};\nconst Struct = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return type(\"Struct\", v => {\n    if (isObj(v)) return {\n      type: \"Struct\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    throwTypeError(\"Expected Object for type Struct\");\n  }, v => v);\n};\nconst Enum = function (id) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return type(\"Enum\", v => {\n    if (isObj(v)) return {\n      type: \"Enum\",\n      value: {\n        id: id,\n        fields: isArray(fields) ? fields.map((c, i) => ({\n          name: v.fields[i].name,\n          value: c.value.asArgument(v.fields[i].value)\n        })) : v.fields.map(x => ({\n          name: x.name,\n          value: fields.value.asArgument(x.value)\n        }))\n      }\n    };\n    throwTypeError(\"Expected Object for type Enum\");\n  }, v => v);\n};\nconst Path = type(\"Path\", v => {\n  if (isObj(v)) {\n    if (!isString(v.domain)) {\n      throwTypeError(`Expected a string for the Path domain but found ${v.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);\n    }\n    if (!(v.domain === \"storage\" || v.domain === \"private\" || v.domain === \"public\")) {\n      throwTypeError(`Expected either \"storage\", \"private\" or \"public\" as the Path domain but found ${v.domain}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);\n    }\n    if (!isString(v.identifier)) {\n      throwTypeError(`Expected a string for the Path identifier but found ${v.identifier}. Find out more about the Path type here: https://docs.onflow.org/cadence/json-cadence-spec/#path`);\n    }\n    return {\n      type: \"Path\",\n      value: {\n        domain: v.domain,\n        identifier: v.identifier\n      }\n    };\n  }\n  throwTypeError(\"Expected Object for type Path\");\n}, v => v);\n\n\n//# sourceMappingURL=types.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@onflow/types/dist/types.module.js\n"));

/***/ }),

/***/ "./node_modules/@onflow/util-actor/dist/actor.module.js":
/*!**************************************************************!*\
  !*** ./node_modules/@onflow/util-actor/dist/actor.module.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EXIT\": function() { return /* binding */ EXIT; },\n/* harmony export */   \"INIT\": function() { return /* binding */ INIT; },\n/* harmony export */   \"SNAPSHOT\": function() { return /* binding */ SNAPSHOT; },\n/* harmony export */   \"SUBSCRIBE\": function() { return /* binding */ SUBSCRIBE; },\n/* harmony export */   \"TERMINATE\": function() { return /* binding */ TERMINATE; },\n/* harmony export */   \"UNSUBSCRIBE\": function() { return /* binding */ UNSUBSCRIBE; },\n/* harmony export */   \"UPDATED\": function() { return /* binding */ UPDATED; },\n/* harmony export */   \"kill\": function() { return /* binding */ kill; },\n/* harmony export */   \"send\": function() { return /* binding */ send; },\n/* harmony export */   \"snapshoter\": function() { return /* binding */ snapshoter; },\n/* harmony export */   \"spawn\": function() { return /* binding */ spawn; },\n/* harmony export */   \"subscriber\": function() { return /* binding */ subscriber; }\n/* harmony export */ });\n/* harmony import */ var queue_microtask__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! queue-microtask */ \"./node_modules/queue-microtask/index.js\");\n/* harmony import */ var queue_microtask__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(queue_microtask__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst mailbox = () => {\n  const queue = [];\n  var next;\n  return {\n    async deliver(msg) {\n      queue.push(msg);\n      if (next) {\n        next(queue.shift());\n        next = undefined;\n      }\n    },\n    receive() {\n      return new Promise(function innerReceive(resolve) {\n        const msg = queue.shift();\n        if (msg) return resolve(msg);\n        next = resolve;\n      });\n    }\n  };\n};\n\nconst INIT = \"INIT\";\nconst SUBSCRIBE = \"SUBSCRIBE\";\nconst UNSUBSCRIBE = \"UNSUBSCRIBE\";\nconst UPDATED = \"UPDATED\";\nconst SNAPSHOT = \"SNAPSHOT\";\nconst EXIT = \"EXIT\";\nconst TERMINATE = \"TERMINATE\";\nconst root = typeof self === \"object\" && self.self === self && self || typeof __webpack_require__.g === \"object\" && __webpack_require__.g.global === __webpack_require__.g && __webpack_require__.g || typeof window === \"object\" && window.window === window && window;\nroot.FCL_REGISTRY = root.FCL_REGISTRY == null ? {} : root.FCL_REGISTRY;\nvar pid = 0b0;\nconst DEFAULT_TIMEOUT = 5000;\nconst send = function (addr, tag, data) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return new Promise((reply, reject) => {\n    const expectReply = opts.expectReply || false;\n    const timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT;\n    if (expectReply && timeout) {\n      setTimeout(() => reject(new Error(`Timeout: ${timeout}ms passed without a response.`)), timeout);\n    }\n    const payload = {\n      to: addr,\n      from: opts.from,\n      tag,\n      data,\n      timeout,\n      reply,\n      reject\n    };\n    try {\n      root.FCL_REGISTRY[addr] && root.FCL_REGISTRY[addr].mailbox.deliver(payload);\n      if (!expectReply) reply(true);\n    } catch (error) {\n      console.error(\"FCL.Actor -- Could Not Deliver Message\", payload, root.FCL_REGISTRY[addr], error);\n    }\n  });\n};\nconst kill = addr => {\n  delete root.FCL_REGISTRY[addr];\n};\nconst fromHandlers = function () {\n  let handlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return async ctx => {\n    if (typeof handlers[INIT] === \"function\") await handlers[INIT](ctx);\n    __loop: while (1) {\n      const letter = await ctx.receive();\n      try {\n        if (letter.tag === EXIT) {\n          if (typeof handlers[TERMINATE] === \"function\") {\n            await handlers[TERMINATE](ctx, letter, letter.data || {});\n          }\n          break __loop;\n        }\n        await handlers[letter.tag](ctx, letter, letter.data || {});\n      } catch (error) {\n        console.error(`${ctx.self()} Error`, letter, error);\n      } finally {\n        continue __loop;\n      }\n    }\n  };\n};\nconst spawn = function (fn) {\n  let addr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (addr == null) addr = ++pid;\n  if (root.FCL_REGISTRY[addr] != null) return addr;\n  root.FCL_REGISTRY[addr] = {\n    addr,\n    mailbox: mailbox(),\n    subs: new Set(),\n    kvs: {},\n    error: null\n  };\n  const ctx = {\n    self: () => addr,\n    receive: () => root.FCL_REGISTRY[addr].mailbox.receive(),\n    send: function (to, tag, data) {\n      let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      opts.from = addr;\n      return send(to, tag, data, opts);\n    },\n    sendSelf: (tag, data, opts) => {\n      if (root.FCL_REGISTRY[addr]) send(addr, tag, data, opts);\n    },\n    broadcast: function (tag, data) {\n      let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      opts.from = addr;\n      for (let to of root.FCL_REGISTRY[addr].subs) send(to, tag, data, opts);\n    },\n    subscribe: sub => sub != null && root.FCL_REGISTRY[addr].subs.add(sub),\n    unsubscribe: sub => sub != null && root.FCL_REGISTRY[addr].subs.delete(sub),\n    subscriberCount: () => root.FCL_REGISTRY[addr].subs.size,\n    hasSubs: () => !!root.FCL_REGISTRY[addr].subs.size,\n    put: (key, value) => {\n      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = value;\n    },\n    get: (key, fallback) => {\n      const value = root.FCL_REGISTRY[addr].kvs[key];\n      return value == null ? fallback : value;\n    },\n    delete: key => {\n      delete root.FCL_REGISTRY[addr].kvs[key];\n    },\n    update: (key, fn) => {\n      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = fn(root.FCL_REGISTRY[addr].kvs[key]);\n    },\n    keys: () => {\n      return Object.keys(root.FCL_REGISTRY[addr].kvs);\n    },\n    all: () => {\n      return root.FCL_REGISTRY[addr].kvs;\n    },\n    where: pattern => {\n      return Object.keys(root.FCL_REGISTRY[addr].kvs).reduce((acc, key) => {\n        return pattern.test(key) ? {\n          ...acc,\n          [key]: root.FCL_REGISTRY[addr].kvs[key]\n        } : acc;\n      }, {});\n    },\n    merge: function () {\n      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      Object.keys(data).forEach(key => root.FCL_REGISTRY[addr].kvs[key] = data[key]);\n    },\n    fatalError: error => {\n      root.FCL_REGISTRY[addr].error = error;\n      for (let to of root.FCL_REGISTRY[addr].subs) send(to, UPDATED);\n    }\n  };\n  if (typeof fn === \"object\") fn = fromHandlers(fn);\n  queue_microtask__WEBPACK_IMPORTED_MODULE_0___default()(async () => {\n    await fn(ctx);\n    kill(addr);\n  });\n  return addr;\n};\n\n// Returns an unsubscribe function\n// A SUBSCRIBE handler will need to be created to handle the subscription event\n//\n//  [SUBSCRIBE]: (ctx, letter) => {\n//    ctx.subscribe(letter.from)\n//    ctx.send(letter.from, UPDATED, ctx.all())\n//  }\n//\nfunction subscriber(address, spawnFn, callback) {\n  spawnFn(address);\n  const EXIT = \"@EXIT\";\n  const self = spawn(async ctx => {\n    ctx.send(address, SUBSCRIBE);\n    while (1) {\n      const letter = await ctx.receive();\n      const error = root.FCL_REGISTRY[address].error;\n      if (letter.tag === EXIT) {\n        ctx.send(address, UNSUBSCRIBE);\n        return;\n      }\n      if (error) {\n        callback(null, error);\n        ctx.send(address, UNSUBSCRIBE);\n        return;\n      }\n      callback(letter.data, null);\n    }\n  });\n  return () => send(self, EXIT);\n}\n\n// Returns a promise that returns a result\n// A SNAPSHOT handler will need to be created to handle the snapshot event\n//\n//  [SNAPSHOT]: (ctx, letter) => {\n//    letter.reply(ctx.all())\n//  }\n//\nfunction snapshoter(address, spawnFn) {\n  spawnFn(address);\n  return send(address, SNAPSHOT, null, {\n    expectReply: true,\n    timeout: 0\n  });\n}\n\n\n//# sourceMappingURL=actor.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@onflow/util-actor/dist/actor.module.js\n"));

/***/ }),

/***/ "./node_modules/@onflow/util-address/dist/util-address.module.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@onflow/util-address/dist/util-address.module.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"display\": function() { return /* binding */ display; },\n/* harmony export */   \"sansPrefix\": function() { return /* binding */ sansPrefix; },\n/* harmony export */   \"withPrefix\": function() { return /* binding */ withPrefix; }\n/* harmony export */ });\n/**\n * @description Removes 0x from address if present\n * @param {string} address - Flow address\n * @returns {string} - Flow address without 0x prefix\n */\nfunction sansPrefix(address) {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\").replace(/^Fx/, \"\");\n}\n\n/**\n * @description Adds 0x to address if not already present\n * @param {string} address - Flow address\n * @returns {string} - Flow address with 0x prefix\n */\nfunction withPrefix(address) {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n}\n\n/**\n * @description Adds 0x to address if not already present\n * @param {string} address - Flow address\n * @returns {string} - Flow address with 0x prefix\n */\nfunction display(address) {\n  return withPrefix(address);\n}\n\n\n//# sourceMappingURL=util-address.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLWFkZHJlc3MvZGlzdC91dGlsLWFkZHJlc3MubW9kdWxlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFMkM7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvdXRpbC1hZGRyZXNzL2Rpc3QvdXRpbC1hZGRyZXNzLm1vZHVsZS5qcz9kOTM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgMHggZnJvbSBhZGRyZXNzIGlmIHByZXNlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gRmxvdyBhZGRyZXNzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIEZsb3cgYWRkcmVzcyB3aXRob3V0IDB4IHByZWZpeFxuICovXG5mdW5jdGlvbiBzYW5zUHJlZml4KGFkZHJlc3MpIHtcbiAgaWYgKGFkZHJlc3MgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBhZGRyZXNzLnJlcGxhY2UoL14weC8sIFwiXCIpLnJlcGxhY2UoL15GeC8sIFwiXCIpO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBBZGRzIDB4IHRvIGFkZHJlc3MgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3MgLSBGbG93IGFkZHJlc3NcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gRmxvdyBhZGRyZXNzIHdpdGggMHggcHJlZml4XG4gKi9cbmZ1bmN0aW9uIHdpdGhQcmVmaXgoYWRkcmVzcykge1xuICBpZiAoYWRkcmVzcyA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIFwiMHhcIiArIHNhbnNQcmVmaXgoYWRkcmVzcyk7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIEFkZHMgMHggdG8gYWRkcmVzcyBpZiBub3QgYWxyZWFkeSBwcmVzZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzcyAtIEZsb3cgYWRkcmVzc1xuICogQHJldHVybnMge3N0cmluZ30gLSBGbG93IGFkZHJlc3Mgd2l0aCAweCBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gZGlzcGxheShhZGRyZXNzKSB7XG4gIHJldHVybiB3aXRoUHJlZml4KGFkZHJlc3MpO1xufVxuXG5leHBvcnQgeyBkaXNwbGF5LCBzYW5zUHJlZml4LCB3aXRoUHJlZml4IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLWFkZHJlc3MubW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@onflow/util-address/dist/util-address.module.js\n"));

/***/ }),

/***/ "./node_modules/@onflow/util-invariant/dist/util-invariant.module.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@onflow/util-invariant/dist/util-invariant.module.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"invariant\": function() { return /* binding */ invariant; }\n/* harmony export */ });\n/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param {boolean} fact\n * @param {string} msg\n * @param {Array} rest\n * @returns {void}\n */\nfunction invariant(fact, msg) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`);\n    error.stack = error.stack.split(\"\\n\").filter(d => !/at invariant/.test(d)).join(\"\\n\");\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\");\n    throw error;\n  }\n}\n\n\n//# sourceMappingURL=util-invariant.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLWludmFyaWFudC9kaXN0L3V0aWwtaW52YXJpYW50Lm1vZHVsZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsSUFBSTtBQUM3QztBQUNBLDJGQUEyRixhQUFhO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvbmZsb3cvdXRpbC1pbnZhcmlhbnQvZGlzdC91dGlsLWludmFyaWFudC5tb2R1bGUuanM/OTQ0OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFzc2VydHMgZmFjdCBpcyB0cnVlLCBvdGhlcndpc2UgdGhyb3cgYW4gZXJyb3Igd2l0aCBpbnZhcmlhbnQgbWVzc2FnZVxuICogQHBhcmFtIHtib29sZWFufSBmYWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gbXNnXG4gKiBAcGFyYW0ge0FycmF5fSByZXN0XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gaW52YXJpYW50KGZhY3QsIG1zZykge1xuICBpZiAoIWZhY3QpIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgSU5WQVJJQU5UICR7bXNnfWApO1xuICAgIGVycm9yLnN0YWNrID0gZXJyb3Iuc3RhY2suc3BsaXQoXCJcXG5cIikuZmlsdGVyKGQgPT4gIS9hdCBpbnZhcmlhbnQvLnRlc3QoZCkpLmpvaW4oXCJcXG5cIik7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcmVzdFtfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIGNvbnNvbGUuZXJyb3IoXCJcXG5cXG4tLS1cXG5cXG5cIiwgZXJyb3IsIFwiXFxuXFxuXCIsIC4uLnJlc3QsIFwiXFxuXFxuLS0tXFxuXFxuXCIpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmV4cG9ydCB7IGludmFyaWFudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC1pbnZhcmlhbnQubW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@onflow/util-invariant/dist/util-invariant.module.js\n"));

/***/ }),

/***/ "./node_modules/@onflow/util-logger/dist/util-logger.module.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@onflow/util-logger/dist/util-logger.module.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LEVELS\": function() { return /* binding */ LEVELS; },\n/* harmony export */   \"log\": function() { return /* binding */ log; }\n/* harmony export */ });\n/* harmony import */ var _onflow_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/config */ \"./node_modules/@onflow/config/dist/config.module.js\");\n\n\n/**\n * The levels of the logger\n * \n * @typedef {Object} LEVELS\n * @property {number} debug - The debug level\n * @property {number} info - The info level\n * @property {number} log - The log level\n * @property {number} warn - The warn level\n * @property {number} error - The error level\n * \n */\nconst LEVELS = Object.freeze({\n  debug: 5,\n  info: 4,\n  log: 3,\n  warn: 2,\n  error: 1\n});\n\n/**\n * Builds a message formatted for the logger\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @returns {Array<string>} - The message formatted for the logger\n * \n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = _ref => {\n  let {\n    title,\n    message\n  } = _ref;\n  return [`\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `.replace(/\\n[^\\S\\r\\n]+/g, \"\\n\").trim(),, \"font-weight:bold;font-family:monospace;\"];\n};\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @param {number} options.level - The level of the log\n * @param {boolean} options.always - Whether to always show the log\n * @returns {Promise<void>}\n * \n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n * \n */\nconst log = async _ref2 => {\n  let {\n    title,\n    message,\n    level,\n    always = false\n  } = _ref2;\n  const configLoggerLevel = await _onflow_config__WEBPACK_IMPORTED_MODULE_0__.config.get(\"logger.level\", LEVELS.warn);\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return;\n  const loggerMessageArgs = buildLoggerMessageArgs({\n    title,\n    message\n  });\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs);\n      break;\n    case LEVELS.info:\n      console.info(...loggerMessageArgs);\n      break;\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs);\n      break;\n    case LEVELS.error:\n      console.error(...loggerMessageArgs);\n      break;\n    default:\n      console.log(...loggerMessageArgs);\n  }\n};\n\n/**\n * Logs a deprecation notice\n * \n * @param {Object} options - The options for the log\n * @param {string} options.pkg - The package that is being deprecated\n * @param {string} options.subject - The subject of the deprecation\n * @param {string} options.transition - The transition path for the deprecation\n * @param {number} options.level - The level of the log\n * @param {string} options.message - The message of the log\n * @param {Function} options.callback - A callback to run after the log\n * @returns {Promise<void>}\n * \n * @example\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * \n */\nlog.deprecate = _ref3 => {\n  let {\n    pkg,\n    subject,\n    transition,\n    level = LEVELS.warn,\n    message = \"\",\n    callback = null\n  } = _ref3;\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  const logMessage = () => log({\n    title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n    message: `\n      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? \" of \" + pkg : \"\"}.` : \"\"}${message ? \"\\n\" + message : \"\"}${transition ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}` : \"\"}\n    `.trim(),\n    level\n  });\n  if (typeof callback === \"function\") {\n    return async function () {\n      await logMessage();\n      return await callback(...arguments);\n    };\n  }\n  return logMessage();\n};\n\n\n//# sourceMappingURL=util-logger.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLWxvZ2dlci9kaXN0L3V0aWwtbG9nZ2VyLm1vZHVsZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0M7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0EsNEJBQTRCLDBDQUEwQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsUUFBUTtBQUNSOztBQUVBLE1BQU07O0FBRU47QUFDQSxnRUFBZ0Usc0JBQXNCO0FBQ3RGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTLDZFQUE2RTtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLGtDQUFrQyxzREFBVTs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQixhQUFhO0FBQ2I7QUFDQTtBQUNBLG1CQUFtQix1S0FBdUs7QUFDMUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFCQUFxQjtBQUNuQztBQUNBLFFBQVEsYUFBYSxnQ0FBZ0MseURBQXlELHdCQUF3QixRQUFRLEVBQUUsOEJBQThCLEVBQUUsMEZBQTBGLFdBQVc7QUFDclI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLWxvZ2dlci9kaXN0L3V0aWwtbG9nZ2VyLm1vZHVsZS5qcz83NTkyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJ0BvbmZsb3cvY29uZmlnJztcblxuLyoqXG4gKiBUaGUgbGV2ZWxzIG9mIHRoZSBsb2dnZXJcbiAqIFxuICogQHR5cGVkZWYge09iamVjdH0gTEVWRUxTXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGVidWcgLSBUaGUgZGVidWcgbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbmZvIC0gVGhlIGluZm8gbGV2ZWxcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsb2cgLSBUaGUgbG9nIGxldmVsXG4gKiBAcHJvcGVydHkge251bWJlcn0gd2FybiAtIFRoZSB3YXJuIGxldmVsXG4gKiBAcHJvcGVydHkge251bWJlcn0gZXJyb3IgLSBUaGUgZXJyb3IgbGV2ZWxcbiAqIFxuICovXG5jb25zdCBMRVZFTFMgPSBPYmplY3QuZnJlZXplKHtcbiAgZGVidWc6IDUsXG4gIGluZm86IDQsXG4gIGxvZzogMyxcbiAgd2FybjogMixcbiAgZXJyb3I6IDFcbn0pO1xuXG4vKipcbiAqIEJ1aWxkcyBhIG1lc3NhZ2UgZm9ybWF0dGVkIGZvciB0aGUgbG9nZ2VyXG4gKiBcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBsb2dcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnRpdGxlIC0gVGhlIHRpdGxlIG9mIHRoZSBsb2dcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm1lc3NhZ2UgLSBUaGUgbWVzc2FnZSBvZiB0aGUgbG9nXG4gKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gLSBUaGUgbWVzc2FnZSBmb3JtYXR0ZWQgZm9yIHRoZSBsb2dnZXJcbiAqIFxuICogQGV4YW1wbGVcbiAqIGJ1aWxkTG9nZ2VyTWVzc2FnZUFyZ3MoeyB0aXRsZTogXCJNeSBUaXRsZVwiLCBtZXNzYWdlOiBcIk15IE1lc3NhZ2VcIiB9KVxuICovXG5jb25zdCBidWlsZExvZ2dlck1lc3NhZ2VBcmdzID0gX3JlZiA9PiB7XG4gIGxldCB7XG4gICAgdGl0bGUsXG4gICAgbWVzc2FnZVxuICB9ID0gX3JlZjtcbiAgcmV0dXJuIFtgXG4gICAgJWMke3RpdGxlfVxuICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgICR7bWVzc2FnZX1cblxuICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBgLnJlcGxhY2UoL1xcblteXFxTXFxyXFxuXSsvZywgXCJcXG5cIikudHJpbSgpLCwgXCJmb250LXdlaWdodDpib2xkO2ZvbnQtZmFtaWx5Om1vbm9zcGFjZTtcIl07XG59O1xuXG4vKipcbiAqIExvZ3MgbWVzc2FnZXMgYmFzZWQgb24gdGhlIGxldmVsIG9mIHRoZSBtZXNzYWdlIGFuZCB0aGUgbGV2ZWwgc2V0IGluIHRoZSBjb25maWdcbiAqIFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGxvZ1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudGl0bGUgLSBUaGUgdGl0bGUgb2YgdGhlIGxvZ1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubWVzc2FnZSAtIFRoZSBtZXNzYWdlIG9mIHRoZSBsb2dcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLmxldmVsIC0gVGhlIGxldmVsIG9mIHRoZSBsb2dcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5hbHdheXMgLSBXaGV0aGVyIHRvIGFsd2F5cyBzaG93IHRoZSBsb2dcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICogXG4gKiBAZXhhbXBsZVxuICogbG9nKHsgdGl0bGU6IFwiTXkgVGl0bGVcIiwgbWVzc2FnZTogXCJNeSBNZXNzYWdlXCIsIGxldmVsOiBMRVZFTFMud2FybiwgYWx3YXlzOiBmYWxzZSB9KVxuICogXG4gKi9cbmNvbnN0IGxvZyA9IGFzeW5jIF9yZWYyID0+IHtcbiAgbGV0IHtcbiAgICB0aXRsZSxcbiAgICBtZXNzYWdlLFxuICAgIGxldmVsLFxuICAgIGFsd2F5cyA9IGZhbHNlXG4gIH0gPSBfcmVmMjtcbiAgY29uc3QgY29uZmlnTG9nZ2VyTGV2ZWwgPSBhd2FpdCBjb25maWcuZ2V0KFwibG9nZ2VyLmxldmVsXCIsIExFVkVMUy53YXJuKTtcblxuICAvLyBJZiBjb25maWcgbGV2ZWwgaXMgYmVsb3cgbWVzc2FnZSBsZXZlbCB0aGVuIGRvbid0IHNob3cgaXRcbiAgaWYgKCFhbHdheXMgJiYgY29uZmlnTG9nZ2VyTGV2ZWwgPCBsZXZlbCkgcmV0dXJuO1xuICBjb25zdCBsb2dnZXJNZXNzYWdlQXJncyA9IGJ1aWxkTG9nZ2VyTWVzc2FnZUFyZ3Moe1xuICAgIHRpdGxlLFxuICAgIG1lc3NhZ2VcbiAgfSk7XG4gIHN3aXRjaCAobGV2ZWwpIHtcbiAgICBjYXNlIExFVkVMUy5kZWJ1ZzpcbiAgICAgIGNvbnNvbGUuZGVidWcoLi4ubG9nZ2VyTWVzc2FnZUFyZ3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBMRVZFTFMuaW5mbzpcbiAgICAgIGNvbnNvbGUuaW5mbyguLi5sb2dnZXJNZXNzYWdlQXJncyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIExFVkVMUy53YXJuOlxuICAgICAgY29uc29sZS53YXJuKC4uLmxvZ2dlck1lc3NhZ2VBcmdzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTEVWRUxTLmVycm9yOlxuICAgICAgY29uc29sZS5lcnJvciguLi5sb2dnZXJNZXNzYWdlQXJncyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgY29uc29sZS5sb2coLi4ubG9nZ2VyTWVzc2FnZUFyZ3MpO1xuICB9XG59O1xuXG4vKipcbiAqIExvZ3MgYSBkZXByZWNhdGlvbiBub3RpY2VcbiAqIFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGxvZ1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMucGtnIC0gVGhlIHBhY2thZ2UgdGhhdCBpcyBiZWluZyBkZXByZWNhdGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5zdWJqZWN0IC0gVGhlIHN1YmplY3Qgb2YgdGhlIGRlcHJlY2F0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy50cmFuc2l0aW9uIC0gVGhlIHRyYW5zaXRpb24gcGF0aCBmb3IgdGhlIGRlcHJlY2F0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5sZXZlbCAtIFRoZSBsZXZlbCBvZiB0aGUgbG9nXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5tZXNzYWdlIC0gVGhlIG1lc3NhZ2Ugb2YgdGhlIGxvZ1xuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5jYWxsYmFjayAtIEEgY2FsbGJhY2sgdG8gcnVuIGFmdGVyIHRoZSBsb2dcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICogXG4gKiBAZXhhbXBsZVxuICogbG9nLmRlcHJlY2F0ZSh7IHBrZzogXCJAb25mbG93L2ZjbFwiLCBzdWJqZWN0OiBcIlNvbWUgaXRlbVwiLCB0cmFuc2l0aW9uOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9vbmZsb3cvZmxvdy1qcy1zZGtcIiwgbWVzc2FnZTogXCJEZXNjcmlwdGl2ZSBtZXNzYWdlXCIsIGxldmVsOiBMRVZFTFMud2FybiwgY2FsbGJhY2s6ICgpID0+IHt9IH0pXG4gKiBcbiAqL1xubG9nLmRlcHJlY2F0ZSA9IF9yZWYzID0+IHtcbiAgbGV0IHtcbiAgICBwa2csXG4gICAgc3ViamVjdCxcbiAgICB0cmFuc2l0aW9uLFxuICAgIGxldmVsID0gTEVWRUxTLndhcm4sXG4gICAgbWVzc2FnZSA9IFwiXCIsXG4gICAgY2FsbGJhY2sgPSBudWxsXG4gIH0gPSBfcmVmMztcbiAgY29uc3QgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyID0gc3RyaW5nID0+IHtcbiAgICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xuICB9O1xuICBjb25zdCBsb2dNZXNzYWdlID0gKCkgPT4gbG9nKHtcbiAgICB0aXRsZTogYCR7cGtnID8gcGtnICsgXCIgXCIgOiBcIlwifURlcHJlY2F0aW9uIE5vdGljZWAsXG4gICAgbWVzc2FnZTogYFxuICAgICAgJHtzdWJqZWN0ID8gYCR7Y2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN1YmplY3QpfSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGNlYXNlIHRvIHdvcmsgaW4gZnV0dXJlIHJlbGVhc2VzJHtwa2cgPyBcIiBvZiBcIiArIHBrZyA6IFwiXCJ9LmAgOiBcIlwifSR7bWVzc2FnZSA/IFwiXFxuXCIgKyBtZXNzYWdlIDogXCJcIn0ke3RyYW5zaXRpb24gPyBgXFxuWW91IGNhbiBsZWFybiBtb3JlIChpbmNsdWRpbmcgYSBndWlkZSBvbiBjb21tb24gdHJhbnNpdGlvbiBwYXRocykgaGVyZTogJHt0cmFuc2l0aW9ufWAgOiBcIlwifVxuICAgIGAudHJpbSgpLFxuICAgIGxldmVsXG4gIH0pO1xuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgbG9nTWVzc2FnZSgpO1xuICAgICAgcmV0dXJuIGF3YWl0IGNhbGxiYWNrKC4uLmFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gbG9nTWVzc2FnZSgpO1xufTtcblxuZXhwb3J0IHsgTEVWRUxTLCBsb2cgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwtbG9nZ2VyLm1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@onflow/util-logger/dist/util-logger.module.js\n"));

/***/ }),

/***/ "./node_modules/@onflow/util-template/dist/template.module.js":
/*!********************************************************************!*\
  !*** ./node_modules/@onflow/util-template/dist/template.module.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"interleave\": function() { return /* binding */ interleave; },\n/* harmony export */   \"template\": function() { return /* binding */ template; }\n/* harmony export */ });\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\n/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise;\nvar queueMicrotask_1 = typeof queueMicrotask === 'function' ? queueMicrotask.bind(typeof window !== 'undefined' ? window : commonjsGlobal)\n// reuse resolved promise, and allocate it lazily\n: cb => (promise || (promise = Promise.resolve())).then(cb).catch(err => setTimeout(() => {\n  throw err;\n}, 0));\n\nconst mailbox = () => {\n  const queue = [];\n  var next;\n  return {\n    async deliver(msg) {\n      queue.push(msg);\n      if (next) {\n        next(queue.shift());\n        next = undefined;\n      }\n    },\n    receive() {\n      return new Promise(function innerReceive(resolve) {\n        const msg = queue.shift();\n        if (msg) return resolve(msg);\n        next = resolve;\n      });\n    }\n  };\n};\nconst INIT = \"INIT\";\nconst SUBSCRIBE = \"SUBSCRIBE\";\nconst UNSUBSCRIBE = \"UNSUBSCRIBE\";\nconst UPDATED$2 = \"UPDATED\";\nconst EXIT = \"EXIT\";\nconst TERMINATE = \"TERMINATE\";\nconst root = typeof self === \"object\" && self.self === self && self || typeof __webpack_require__.g === \"object\" && __webpack_require__.g.global === __webpack_require__.g && __webpack_require__.g || typeof window === \"object\" && window.window === window && window;\nroot.FCL_REGISTRY = root.FCL_REGISTRY == null ? {} : root.FCL_REGISTRY;\nvar pid = 0b0;\nconst DEFAULT_TIMEOUT = 5000;\nconst send = function (addr, tag, data) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return new Promise((reply, reject) => {\n    const expectReply = opts.expectReply || false;\n    const timeout = opts.timeout != null ? opts.timeout : DEFAULT_TIMEOUT;\n    if (expectReply && timeout) {\n      setTimeout(() => reject(new Error(`Timeout: ${timeout}ms passed without a response.`)), timeout);\n    }\n    const payload = {\n      to: addr,\n      from: opts.from,\n      tag,\n      data,\n      timeout,\n      reply,\n      reject\n    };\n    try {\n      root.FCL_REGISTRY[addr] && root.FCL_REGISTRY[addr].mailbox.deliver(payload);\n      if (!expectReply) reply(true);\n    } catch (error) {\n      console.error(\"FCL.Actor -- Could Not Deliver Message\", payload, root.FCL_REGISTRY[addr], error);\n    }\n  });\n};\nconst kill = addr => {\n  delete root.FCL_REGISTRY[addr];\n};\nconst fromHandlers = function () {\n  let handlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return async ctx => {\n    if (typeof handlers[INIT] === \"function\") await handlers[INIT](ctx);\n    __loop: while (1) {\n      const letter = await ctx.receive();\n      try {\n        if (letter.tag === EXIT) {\n          if (typeof handlers[TERMINATE] === \"function\") {\n            await handlers[TERMINATE](ctx, letter, letter.data || {});\n          }\n          break __loop;\n        }\n        await handlers[letter.tag](ctx, letter, letter.data || {});\n      } catch (error) {\n        console.error(`${ctx.self()} Error`, letter, error);\n      } finally {\n        continue __loop;\n      }\n    }\n  };\n};\nconst spawn = function (fn) {\n  let addr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (addr == null) addr = ++pid;\n  if (root.FCL_REGISTRY[addr] != null) return addr;\n  root.FCL_REGISTRY[addr] = {\n    addr,\n    mailbox: mailbox(),\n    subs: new Set(),\n    kvs: {},\n    error: null\n  };\n  const ctx = {\n    self: () => addr,\n    receive: () => root.FCL_REGISTRY[addr].mailbox.receive(),\n    send: function (to, tag, data) {\n      let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      opts.from = addr;\n      return send(to, tag, data, opts);\n    },\n    sendSelf: (tag, data, opts) => {\n      if (root.FCL_REGISTRY[addr]) send(addr, tag, data, opts);\n    },\n    broadcast: function (tag, data) {\n      let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      opts.from = addr;\n      for (let to of root.FCL_REGISTRY[addr].subs) send(to, tag, data, opts);\n    },\n    subscribe: sub => sub != null && root.FCL_REGISTRY[addr].subs.add(sub),\n    unsubscribe: sub => sub != null && root.FCL_REGISTRY[addr].subs.delete(sub),\n    subscriberCount: () => root.FCL_REGISTRY[addr].subs.size,\n    hasSubs: () => !!root.FCL_REGISTRY[addr].subs.size,\n    put: (key, value) => {\n      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = value;\n    },\n    get: (key, fallback) => {\n      const value = root.FCL_REGISTRY[addr].kvs[key];\n      return value == null ? fallback : value;\n    },\n    delete: key => {\n      delete root.FCL_REGISTRY[addr].kvs[key];\n    },\n    update: (key, fn) => {\n      if (key != null) root.FCL_REGISTRY[addr].kvs[key] = fn(root.FCL_REGISTRY[addr].kvs[key]);\n    },\n    keys: () => {\n      return Object.keys(root.FCL_REGISTRY[addr].kvs);\n    },\n    all: () => {\n      return root.FCL_REGISTRY[addr].kvs;\n    },\n    where: pattern => {\n      return Object.keys(root.FCL_REGISTRY[addr].kvs).reduce((acc, key) => {\n        return pattern.test(key) ? {\n          ...acc,\n          [key]: root.FCL_REGISTRY[addr].kvs[key]\n        } : acc;\n      }, {});\n    },\n    merge: function () {\n      let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      Object.keys(data).forEach(key => root.FCL_REGISTRY[addr].kvs[key] = data[key]);\n    },\n    fatalError: error => {\n      root.FCL_REGISTRY[addr].error = error;\n      for (let to of root.FCL_REGISTRY[addr].subs) send(to, UPDATED$2);\n    }\n  };\n  if (typeof fn === \"object\") fn = fromHandlers(fn);\n  queueMicrotask_1(async () => {\n    await fn(ctx);\n    kill(addr);\n  });\n  return addr;\n};\n\n// Returns an unsubscribe function\n// A SUBSCRIBE handler will need to be created to handle the subscription event\n//\n//  [SUBSCRIBE]: (ctx, letter) => {\n//    ctx.subscribe(letter.from)\n//    ctx.send(letter.from, UPDATED, ctx.all())\n//  }\n//\nfunction subscriber(address, spawnFn, callback) {\n  spawnFn(address);\n  const EXIT = \"@EXIT\";\n  const self = spawn(async ctx => {\n    ctx.send(address, SUBSCRIBE);\n    while (1) {\n      const letter = await ctx.receive();\n      const error = root.FCL_REGISTRY[address].error;\n      if (letter.tag === EXIT) {\n        ctx.send(address, UNSUBSCRIBE);\n        return;\n      }\n      if (error) {\n        callback(null, error);\n        ctx.send(address, UNSUBSCRIBE);\n        return;\n      }\n      callback(letter.data, null);\n    }\n  });\n  return () => send(self, EXIT);\n}\n\n/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param {boolean} fact\n * @param {string} msg\n * @param {Array} rest\n * @returns {void}\n */\nfunction invariant$1(fact, msg) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`);\n    error.stack = error.stack.split(\"\\n\").filter(d => !/at invariant/.test(d)).join(\"\\n\");\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\");\n    throw error;\n  }\n}\nconst pipe$1 = function () {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return func(res);\n    }, v);\n  };\n};\n\n/***\n * Merge multiple functions returning objects into one object.\n * @param {...function(*): object} funcs - Functions to merge\n * @return {object} - Merged object\n */\nconst mergePipe$1 = function () {\n  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    funcs[_key2] = arguments[_key2];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return {\n        ...res,\n        ...func(v)\n      };\n    }, {});\n  };\n};\n\n/**\n * @description Object check\n * @param {*} value - Value to check\n * @returns {boolean} - Is object status\n */\nconst isObject$1 = value => value && typeof value === \"object\" && !Array.isArray(value);\n\n/**\n * @description Deep merge multiple objects.\n * @param {object} target - Target object\n * @param {...object[]} sources - Source objects\n * @returns {object} - Merged object\n */\nconst mergeDeep$1 = function (target) {\n  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    sources[_key3 - 1] = arguments[_key3];\n  }\n  if (!sources.length) return target;\n  const source = sources.shift();\n  if (isObject$1(target) && isObject$1(source)) {\n    for (const key in source) {\n      if (isObject$1(source[key])) {\n        if (!target[key]) Object.assign(target, {\n          [key]: {}\n        });\n        mergeDeep$1(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  return mergeDeep$1(target, ...sources);\n};\n\n/**\n * @description Deep merge multiple Flow JSON.\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {object} - Merged Flow JSON\n */\nconst mergeFlowJSONs$1 = value => Array.isArray(value) ? mergeDeep$1({}, ...value) : value;\n\n/**\n * @description Filter out contracts section of flow.json.\n * @param {object|object[]} obj - Flow JSON or array of Flow JSONs\n * @returns {object} - Contracts section of Flow JSON\n */\nconst filterContracts$1 = obj => obj.contracts ? obj.contracts : {};\n\n/**\n * @description Gathers contract addresses by network\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapContractAliasesToNetworkAddress$1 = network => contracts => {\n  return Object.entries(contracts).reduce((c, _ref) => {\n    let [key, value] = _ref;\n    const networkContractAlias = value?.aliases?.[network];\n    if (networkContractAlias) {\n      c[key] = networkContractAlias;\n    }\n    return c;\n  }, {});\n};\nconst mapDeploymentsToNetworkAddress$1 = network => _ref2 => {\n  let {\n    deployments = {},\n    accounts = {}\n  } = _ref2;\n  const networkDeployment = deployments?.[network];\n  if (!networkDeployment) return {};\n  return Object.entries(networkDeployment).reduce((c, _ref3) => {\n    let [key, value] = _ref3;\n    // Resolve account address\n    const accountAddress = accounts[key]?.address;\n    if (!accountAddress) return c;\n\n    // Create an object assigning the address to the contract name.\n    return value.reduce((c, contract) => {\n      return {\n        ...c,\n        [contract]: accountAddress\n      };\n    }, {});\n  }, {});\n};\n\n/**\n * @description Take in flow.json files and return contract to address mapping by network\n * @param {object|object[]} jsons - Flow JSON or array of Flow JSONs\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst getContracts$1 = (jsons, network) => {\n  return pipe$1(mergeFlowJSONs$1, mergePipe$1(mapDeploymentsToNetworkAddress$1(network), pipe$1(filterContracts$1, mapContractAliasesToNetworkAddress$1(network))))(jsons);\n};\n\n/**\n * @description Checks if string is hexidecimal\n * @param {string} str - String to check\n * @returns {boolean} - Is hexidecimal status\n */\nconst isHexidecimal$1 = str => {\n  // Check that it is a string\n  if (typeof str !== \"string\") return false;\n  return /^[0-9A-Fa-f]+$/.test(str);\n};\n\n/**\n * @description Checks flow.json file for private keys\n * @param {object} flowJSON - Flow JSON\n * @returns {boolean} - Has private keys status\n */\nconst hasPrivateKeys$1 = flowJSON => {\n  return Object.entries(flowJSON?.accounts).reduce((hasPrivateKey, _ref4) => {\n    let [key, value] = _ref4;\n    if (hasPrivateKey) return true;\n    return value?.hasOwnProperty(\"key\") && isHexidecimal$1(value?.key);\n  }, false);\n};\n\n/**\n * @description Take in flow.json or array of flow.json files and checks for private keys\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {boolean} - Has private keys status\n */\nconst anyHasPrivateKeys$1 = value => {\n  if (isObject$1(value)) return hasPrivateKeys$1(value);\n  return value.some(hasPrivateKeys$1);\n};\n\n/**\n * @description Format network to always be 'emulator', 'testnet', or 'mainnet'\n * @param {string} network - Network to format\n * @returns {string} - Formatted network name (either 'emulator', 'testnet', or 'mainnet')\n */\nconst cleanNetwork$1 = network => network?.toLowerCase() === \"local\" ? \"emulator\" : network?.toLowerCase();\nconst NAME$1 = \"config\";\nconst PUT$1 = \"PUT_CONFIG\";\nconst GET$1 = \"GET_CONFIG\";\nconst GET_ALL$1 = \"GET_ALL_CONFIG\";\nconst UPDATE$1 = \"UPDATE_CONFIG\";\nconst DELETE$1 = \"DELETE_CONFIG\";\nconst CLEAR$1 = \"CLEAR_CONFIG\";\nconst WHERE$1 = \"WHERE_CONFIG\";\nconst UPDATED$1 = \"CONFIG/UPDATED\";\nconst identity$1 = v => v;\nconst HANDLERS$1 = {\n  [PUT$1]: (ctx, _letter, _ref) => {\n    let {\n      key,\n      value\n    } = _ref;\n    if (key == null) throw new Error(\"Missing 'key' for config/put.\");\n    ctx.put(key, value);\n    ctx.broadcast(UPDATED$1, {\n      ...ctx.all()\n    });\n  },\n  [GET$1]: (ctx, letter, _ref2) => {\n    let {\n      key,\n      fallback\n    } = _ref2;\n    if (key == null) throw new Error(\"Missing 'key' for config/get\");\n    letter.reply(ctx.get(key, fallback));\n  },\n  [GET_ALL$1]: (ctx, letter) => {\n    letter.reply({\n      ...ctx.all()\n    });\n  },\n  [UPDATE$1]: (ctx, letter, _ref3) => {\n    let {\n      key,\n      fn\n    } = _ref3;\n    if (key == null) throw new Error(\"Missing 'key' for config/update\");\n    ctx.update(key, fn || identity$1);\n    ctx.broadcast(UPDATED$1, {\n      ...ctx.all()\n    });\n  },\n  [DELETE$1]: (ctx, letter, _ref4) => {\n    let {\n      key\n    } = _ref4;\n    if (key == null) throw new Error(\"Missing 'key' for config/delete\");\n    ctx.delete(key);\n    ctx.broadcast(UPDATED$1, {\n      ...ctx.all()\n    });\n  },\n  [CLEAR$1]: (ctx, letter) => {\n    let keys = Object.keys(ctx.all());\n    for (let key of keys) ctx.delete(key);\n    ctx.broadcast(UPDATED$1, {\n      ...ctx.all()\n    });\n  },\n  [WHERE$1]: (ctx, letter, _ref5) => {\n    let {\n      pattern\n    } = _ref5;\n    if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\");\n    letter.reply(ctx.where(pattern));\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, UPDATED$1, {\n      ...ctx.all()\n    });\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n  }\n};\nspawn(HANDLERS$1, NAME$1);\n\n/**\n * @description Adds a key-value pair to the config\n * @param {string} key - The key to add\n * @param {*} value - The value to add\n * @returns {Promise<object>} - The current config\n */\nfunction put$1(key, value) {\n  send(NAME$1, PUT$1, {\n    key,\n    value\n  });\n  return config$1();\n}\n\n/**\n * @description Gets a key-value pair with a fallback from the config\n * @param {string} key - The key to add\n * @param {*} [fallback] - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nfunction get$1(key, fallback) {\n  return send(NAME$1, GET$1, {\n    key,\n    fallback\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Returns the first non null config value or the fallback\n * @param {string[]} wants - The keys to search for\n * @param {*} fallback - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nasync function first$1() {\n  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let fallback = arguments.length > 1 ? arguments[1] : undefined;\n  if (!wants.length) return fallback;\n  const [head, ...rest] = wants;\n  const ret = await get$1(head);\n  if (ret == null) return first$1(rest, fallback);\n  return ret;\n}\n\n/**\n * @description Returns the current config\n * @returns {Promise<object>} - The current config\n */\nfunction all$1() {\n  return send(NAME$1, GET_ALL$1, null, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Updates a key-value pair in the config\n * @param {string} key - The key to update\n * @param {Function} fn - The function to update the value with\n * @returns {Promise<object>} - The current config\n */\nfunction update$1(key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity$1;\n  send(NAME$1, UPDATE$1, {\n    key,\n    fn\n  });\n  return config$1();\n}\n\n/**\n * @description Deletes a key-value pair from the config\n * @param {string} key - The key to delete\n * @returns {Promise<object>} - The current config\n */\nfunction _delete$1(key) {\n  send(NAME$1, DELETE$1, {\n    key\n  });\n  return config$1();\n}\n\n/**\n * @description Returns a subset of the config based on a pattern\n * @param {string} pattern - The pattern to match keys against\n * @returns {Promise<object>} - The subset of the config\n */\nfunction where$1(pattern) {\n  return send(NAME$1, WHERE$1, {\n    pattern\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Subscribes to config updates\n * @param {Function} callback - The callback to call when config is updated\n * @returns {Function} - The unsubscribe function\n */\nfunction subscribe$1(callback) {\n  return subscriber(NAME$1, () => spawn(HANDLERS$1, NAME$1), callback);\n}\n\n/**\n * @description Clears the config\n * @returns {void}\n */\nfunction clearConfig$1() {\n  return send(NAME$1, CLEAR$1);\n}\n\n/**\n * @description Resets the config to a previous state\n * @param {object} oldConfig - The previous config state\n * @returns {Promise<object>} - The current config\n */\nfunction resetConfig$1(oldConfig) {\n  return clearConfig$1().then(config$1(oldConfig));\n}\n\n/**\n * @description Takes in flow.json or array of flow.json files and creates contract placeholders\n * @param {object|object[]} data - The flow.json or array of flow.json files\n * @returns {void}\n */\nasync function load$1(data) {\n  const network = await get$1(\"flow.network\");\n  const cleanedNetwork = cleanNetwork$1(network);\n  const {\n    flowJSON\n  } = data;\n  invariant$1(Boolean(flowJSON), \"config.load -- 'flowJSON' must be defined\");\n  invariant$1(cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define \"flow.network\" to \"emulator\", \"local\", \"testnet\", or \"mainnet\" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);\n  if (anyHasPrivateKeys$1(flowJSON)) {\n    const isEmulator = cleanedNetwork === \"emulator\";\n    log$1({\n      title: \"Private Keys Detected\",\n      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,\n      level: isEmulator ? LEVELS$1.warn : LEVELS$1.error\n    });\n    if (!isEmulator) return;\n  }\n  for (const [key, value] of Object.entries(getContracts$1(flowJSON, cleanedNetwork))) {\n    const contractConfigKey = `0x${key}`;\n    const existingContractConfigKey = await get$1(contractConfigKey);\n    if (existingContractConfigKey && existingContractConfigKey !== value) {\n      log$1({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: LEVELS$1.warn\n      });\n    } else {\n      put$1(contractConfigKey, value);\n    }\n    const systemContractConfigKey = `system.contracts.${key}`;\n    const systemExistingContractConfigKeyValue = await get$1(systemContractConfigKey);\n    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value) {\n      log$1({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: LEVELS$1.warn\n      });\n    } else {\n      put$1(systemContractConfigKey, value);\n    }\n  }\n}\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @description Sets the config\n * @param {object} [values] - The values to set\n */\nfunction config$1(values) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(d => put$1(d, values[d]));\n  }\n  return {\n    put: put$1,\n    get: get$1,\n    all: all$1,\n    first: first$1,\n    update: update$1,\n    delete: _delete$1,\n    where: where$1,\n    subscribe: subscribe$1,\n    overload: overload$1,\n    load: load$1\n  };\n}\nconfig$1.put = put$1;\nconfig$1.get = get$1;\nconfig$1.all = all$1;\nconfig$1.first = first$1;\nconfig$1.update = update$1;\nconfig$1.delete = _delete$1;\nconfig$1.where = where$1;\nconfig$1.subscribe = subscribe$1;\nconfig$1.overload = overload$1;\nconfig$1.load = load$1;\nconst noop$1 = v => v;\nfunction overload$1() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$1;\n  return new Promise(async (resolve, reject) => {\n    const oldConfig = await all$1();\n    try {\n      config$1(opts);\n      var result = await callback(await all$1());\n      await resetConfig$1(oldConfig);\n      resolve(result);\n    } catch (error) {\n      await resetConfig$1(oldConfig);\n      reject(error);\n    }\n  });\n}\n\n/**\n * The levels of the logger\n * \n * @typedef {Object} LEVELS\n * @property {number} debug - The debug level\n * @property {number} info - The info level\n * @property {number} log - The log level\n * @property {number} warn - The warn level\n * @property {number} error - The error level\n * \n */\nconst LEVELS$1 = Object.freeze({\n  debug: 5,\n  info: 4,\n  log: 3,\n  warn: 2,\n  error: 1\n});\n\n/**\n * Builds a message formatted for the logger\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @returns {Array<string>} - The message formatted for the logger\n * \n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs$1 = _ref => {\n  let {\n    title,\n    message\n  } = _ref;\n  return [`\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `.replace(/\\n[^\\S\\r\\n]+/g, \"\\n\").trim(),, \"font-weight:bold;font-family:monospace;\"];\n};\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @param {number} options.level - The level of the log\n * @param {boolean} options.always - Whether to always show the log\n * @returns {Promise<void>}\n * \n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n * \n */\nconst log$1 = async _ref2 => {\n  let {\n    title,\n    message,\n    level,\n    always = false\n  } = _ref2;\n  const configLoggerLevel = await config$1.get(\"logger.level\", LEVELS$1.warn);\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return;\n  const loggerMessageArgs = buildLoggerMessageArgs$1({\n    title,\n    message\n  });\n  switch (level) {\n    case LEVELS$1.debug:\n      console.debug(...loggerMessageArgs);\n      break;\n    case LEVELS$1.info:\n      console.info(...loggerMessageArgs);\n      break;\n    case LEVELS$1.warn:\n      console.warn(...loggerMessageArgs);\n      break;\n    case LEVELS$1.error:\n      console.error(...loggerMessageArgs);\n      break;\n    default:\n      console.log(...loggerMessageArgs);\n  }\n};\n\n/**\n * Logs a deprecation notice\n * \n * @param {Object} options - The options for the log\n * @param {string} options.pkg - The package that is being deprecated\n * @param {string} options.subject - The subject of the deprecation\n * @param {string} options.transition - The transition path for the deprecation\n * @param {number} options.level - The level of the log\n * @param {string} options.message - The message of the log\n * @param {Function} options.callback - A callback to run after the log\n * @returns {Promise<void>}\n * \n * @example\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * \n */\nlog$1.deprecate = _ref3 => {\n  let {\n    pkg,\n    subject,\n    transition,\n    level = LEVELS$1.warn,\n    message = \"\",\n    callback = null\n  } = _ref3;\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  const logMessage = () => log$1({\n    title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n    message: `\n      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? \" of \" + pkg : \"\"}.` : \"\"}${message ? \"\\n\" + message : \"\"}${transition ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}` : \"\"}\n    `.trim(),\n    level\n  });\n  if (typeof callback === \"function\") {\n    return async function () {\n      await logMessage();\n      return await callback(...arguments);\n    };\n  }\n  return logMessage();\n};\n\n/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param {boolean} fact\n * @param {string} msg\n * @param {Array} rest\n * @returns {void}\n */\nfunction invariant(fact, msg) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`);\n    error.stack = error.stack.split(\"\\n\").filter(d => !/at invariant/.test(d)).join(\"\\n\");\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\");\n    throw error;\n  }\n}\nconst pipe = function () {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return func(res);\n    }, v);\n  };\n};\n\n/***\n * Merge multiple functions returning objects into one object.\n * @param {...function(*): object} funcs - Functions to merge\n * @return {object} - Merged object\n */\nconst mergePipe = function () {\n  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    funcs[_key2] = arguments[_key2];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return {\n        ...res,\n        ...func(v)\n      };\n    }, {});\n  };\n};\n\n/**\n * @description Object check\n * @param {*} value - Value to check\n * @returns {boolean} - Is object status\n */\nconst isObject = value => value && typeof value === \"object\" && !Array.isArray(value);\n\n/**\n * @description Deep merge multiple objects.\n * @param {object} target - Target object\n * @param {...object[]} sources - Source objects\n * @returns {object} - Merged object\n */\nconst mergeDeep = function (target) {\n  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    sources[_key3 - 1] = arguments[_key3];\n  }\n  if (!sources.length) return target;\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, {\n          [key]: {}\n        });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  return mergeDeep(target, ...sources);\n};\n\n/**\n * @description Deep merge multiple Flow JSON.\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {object} - Merged Flow JSON\n */\nconst mergeFlowJSONs = value => Array.isArray(value) ? mergeDeep({}, ...value) : value;\n\n/**\n * @description Filter out contracts section of flow.json.\n * @param {object|object[]} obj - Flow JSON or array of Flow JSONs\n * @returns {object} - Contracts section of Flow JSON\n */\nconst filterContracts = obj => obj.contracts ? obj.contracts : {};\n\n/**\n * @description Gathers contract addresses by network\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapContractAliasesToNetworkAddress = network => contracts => {\n  return Object.entries(contracts).reduce((c, _ref) => {\n    let [key, value] = _ref;\n    const networkContractAlias = value?.aliases?.[network];\n    if (networkContractAlias) {\n      c[key] = networkContractAlias;\n    }\n    return c;\n  }, {});\n};\nconst mapDeploymentsToNetworkAddress = network => _ref2 => {\n  let {\n    deployments = {},\n    accounts = {}\n  } = _ref2;\n  const networkDeployment = deployments?.[network];\n  if (!networkDeployment) return {};\n  return Object.entries(networkDeployment).reduce((c, _ref3) => {\n    let [key, value] = _ref3;\n    // Resolve account address\n    const accountAddress = accounts[key]?.address;\n    if (!accountAddress) return c;\n\n    // Create an object assigning the address to the contract name.\n    return value.reduce((c, contract) => {\n      return {\n        ...c,\n        [contract]: accountAddress\n      };\n    }, {});\n  }, {});\n};\n\n/**\n * @description Take in flow.json files and return contract to address mapping by network\n * @param {object|object[]} jsons - Flow JSON or array of Flow JSONs\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst getContracts = (jsons, network) => {\n  return pipe(mergeFlowJSONs, mergePipe(mapDeploymentsToNetworkAddress(network), pipe(filterContracts, mapContractAliasesToNetworkAddress(network))))(jsons);\n};\n\n/**\n * @description Checks if string is hexidecimal\n * @param {string} str - String to check\n * @returns {boolean} - Is hexidecimal status\n */\nconst isHexidecimal = str => {\n  // Check that it is a string\n  if (typeof str !== \"string\") return false;\n  return /^[0-9A-Fa-f]+$/.test(str);\n};\n\n/**\n * @description Checks flow.json file for private keys\n * @param {object} flowJSON - Flow JSON\n * @returns {boolean} - Has private keys status\n */\nconst hasPrivateKeys = flowJSON => {\n  return Object.entries(flowJSON?.accounts).reduce((hasPrivateKey, _ref4) => {\n    let [key, value] = _ref4;\n    if (hasPrivateKey) return true;\n    return value?.hasOwnProperty(\"key\") && isHexidecimal(value?.key);\n  }, false);\n};\n\n/**\n * @description Take in flow.json or array of flow.json files and checks for private keys\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {boolean} - Has private keys status\n */\nconst anyHasPrivateKeys = value => {\n  if (isObject(value)) return hasPrivateKeys(value);\n  return value.some(hasPrivateKeys);\n};\n\n/**\n * @description Format network to always be 'emulator', 'testnet', or 'mainnet'\n * @param {string} network - Network to format\n * @returns {string} - Formatted network name (either 'emulator', 'testnet', or 'mainnet')\n */\nconst cleanNetwork = network => network?.toLowerCase() === \"local\" ? \"emulator\" : network?.toLowerCase();\nconst NAME = \"config\";\nconst PUT = \"PUT_CONFIG\";\nconst GET = \"GET_CONFIG\";\nconst GET_ALL = \"GET_ALL_CONFIG\";\nconst UPDATE = \"UPDATE_CONFIG\";\nconst DELETE = \"DELETE_CONFIG\";\nconst CLEAR = \"CLEAR_CONFIG\";\nconst WHERE = \"WHERE_CONFIG\";\nconst UPDATED = \"CONFIG/UPDATED\";\nconst identity = v => v;\nconst HANDLERS = {\n  [PUT]: (ctx, _letter, _ref) => {\n    let {\n      key,\n      value\n    } = _ref;\n    if (key == null) throw new Error(\"Missing 'key' for config/put.\");\n    ctx.put(key, value);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [GET]: (ctx, letter, _ref2) => {\n    let {\n      key,\n      fallback\n    } = _ref2;\n    if (key == null) throw new Error(\"Missing 'key' for config/get\");\n    letter.reply(ctx.get(key, fallback));\n  },\n  [GET_ALL]: (ctx, letter) => {\n    letter.reply({\n      ...ctx.all()\n    });\n  },\n  [UPDATE]: (ctx, letter, _ref3) => {\n    let {\n      key,\n      fn\n    } = _ref3;\n    if (key == null) throw new Error(\"Missing 'key' for config/update\");\n    ctx.update(key, fn || identity);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [DELETE]: (ctx, letter, _ref4) => {\n    let {\n      key\n    } = _ref4;\n    if (key == null) throw new Error(\"Missing 'key' for config/delete\");\n    ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [CLEAR]: (ctx, letter) => {\n    let keys = Object.keys(ctx.all());\n    for (let key of keys) ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [WHERE]: (ctx, letter, _ref5) => {\n    let {\n      pattern\n    } = _ref5;\n    if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\");\n    letter.reply(ctx.where(pattern));\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n  }\n};\nspawn(HANDLERS, NAME);\n\n/**\n * @description Adds a key-value pair to the config\n * @param {string} key - The key to add\n * @param {*} value - The value to add\n * @returns {Promise<object>} - The current config\n */\nfunction put(key, value) {\n  send(NAME, PUT, {\n    key,\n    value\n  });\n  return config();\n}\n\n/**\n * @description Gets a key-value pair with a fallback from the config\n * @param {string} key - The key to add\n * @param {*} [fallback] - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nfunction get(key, fallback) {\n  return send(NAME, GET, {\n    key,\n    fallback\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Returns the first non null config value or the fallback\n * @param {string[]} wants - The keys to search for\n * @param {*} fallback - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nasync function first() {\n  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let fallback = arguments.length > 1 ? arguments[1] : undefined;\n  if (!wants.length) return fallback;\n  const [head, ...rest] = wants;\n  const ret = await get(head);\n  if (ret == null) return first(rest, fallback);\n  return ret;\n}\n\n/**\n * @description Returns the current config\n * @returns {Promise<object>} - The current config\n */\nfunction all() {\n  return send(NAME, GET_ALL, null, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Updates a key-value pair in the config\n * @param {string} key - The key to update\n * @param {Function} fn - The function to update the value with\n * @returns {Promise<object>} - The current config\n */\nfunction update(key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;\n  send(NAME, UPDATE, {\n    key,\n    fn\n  });\n  return config();\n}\n\n/**\n * @description Deletes a key-value pair from the config\n * @param {string} key - The key to delete\n * @returns {Promise<object>} - The current config\n */\nfunction _delete(key) {\n  send(NAME, DELETE, {\n    key\n  });\n  return config();\n}\n\n/**\n * @description Returns a subset of the config based on a pattern\n * @param {string} pattern - The pattern to match keys against\n * @returns {Promise<object>} - The subset of the config\n */\nfunction where(pattern) {\n  return send(NAME, WHERE, {\n    pattern\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Subscribes to config updates\n * @param {Function} callback - The callback to call when config is updated\n * @returns {Function} - The unsubscribe function\n */\nfunction subscribe(callback) {\n  return subscriber(NAME, () => spawn(HANDLERS, NAME), callback);\n}\n\n/**\n * @description Clears the config\n * @returns {void}\n */\nfunction clearConfig() {\n  return send(NAME, CLEAR);\n}\n\n/**\n * @description Resets the config to a previous state\n * @param {object} oldConfig - The previous config state\n * @returns {Promise<object>} - The current config\n */\nfunction resetConfig(oldConfig) {\n  return clearConfig().then(config(oldConfig));\n}\n\n/**\n * @description Takes in flow.json or array of flow.json files and creates contract placeholders\n * @param {object|object[]} data - The flow.json or array of flow.json files\n * @returns {void}\n */\nasync function load(data) {\n  const network = await get(\"flow.network\");\n  const cleanedNetwork = cleanNetwork(network);\n  const {\n    flowJSON\n  } = data;\n  invariant(Boolean(flowJSON), \"config.load -- 'flowJSON' must be defined\");\n  invariant(cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define \"flow.network\" to \"emulator\", \"local\", \"testnet\", or \"mainnet\" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);\n  if (anyHasPrivateKeys(flowJSON)) {\n    const isEmulator = cleanedNetwork === \"emulator\";\n    log$1({\n      title: \"Private Keys Detected\",\n      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,\n      level: isEmulator ? LEVELS$1.warn : LEVELS$1.error\n    });\n    if (!isEmulator) return;\n  }\n  for (const [key, value] of Object.entries(getContracts(flowJSON, cleanedNetwork))) {\n    const contractConfigKey = `0x${key}`;\n    const existingContractConfigKey = await get(contractConfigKey);\n    if (existingContractConfigKey && existingContractConfigKey !== value) {\n      log$1({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: LEVELS$1.warn\n      });\n    } else {\n      put(contractConfigKey, value);\n    }\n    const systemContractConfigKey = `system.contracts.${key}`;\n    const systemExistingContractConfigKeyValue = await get(systemContractConfigKey);\n    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value) {\n      log$1({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: LEVELS$1.warn\n      });\n    } else {\n      put(systemContractConfigKey, value);\n    }\n  }\n}\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @description Sets the config\n * @param {object} [values] - The values to set\n */\nfunction config(values) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(d => put(d, values[d]));\n  }\n  return {\n    put,\n    get,\n    all,\n    first,\n    update,\n    delete: _delete,\n    where,\n    subscribe,\n    overload,\n    load\n  };\n}\nconfig.put = put;\nconfig.get = get;\nconfig.all = all;\nconfig.first = first;\nconfig.update = update;\nconfig.delete = _delete;\nconfig.where = where;\nconfig.subscribe = subscribe;\nconfig.overload = overload;\nconfig.load = load;\nconst noop = v => v;\nfunction overload() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  return new Promise(async (resolve, reject) => {\n    const oldConfig = await all();\n    try {\n      config(opts);\n      var result = await callback(await all());\n      await resetConfig(oldConfig);\n      resolve(result);\n    } catch (error) {\n      await resetConfig(oldConfig);\n      reject(error);\n    }\n  });\n}\n\n/**\n * The levels of the logger\n * \n * @typedef {Object} LEVELS\n * @property {number} debug - The debug level\n * @property {number} info - The info level\n * @property {number} log - The log level\n * @property {number} warn - The warn level\n * @property {number} error - The error level\n * \n */\nconst LEVELS = Object.freeze({\n  debug: 5,\n  info: 4,\n  log: 3,\n  warn: 2,\n  error: 1\n});\n\n/**\n * Builds a message formatted for the logger\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @returns {Array<string>} - The message formatted for the logger\n * \n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = _ref => {\n  let {\n    title,\n    message\n  } = _ref;\n  return [`\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `.replace(/\\n[^\\S\\r\\n]+/g, \"\\n\").trim(),, \"font-weight:bold;font-family:monospace;\"];\n};\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @param {number} options.level - The level of the log\n * @param {boolean} options.always - Whether to always show the log\n * @returns {Promise<void>}\n * \n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n * \n */\nconst log = async _ref2 => {\n  let {\n    title,\n    message,\n    level,\n    always = false\n  } = _ref2;\n  const configLoggerLevel = await config.get(\"logger.level\", LEVELS.warn);\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return;\n  const loggerMessageArgs = buildLoggerMessageArgs({\n    title,\n    message\n  });\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs);\n      break;\n    case LEVELS.info:\n      console.info(...loggerMessageArgs);\n      break;\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs);\n      break;\n    case LEVELS.error:\n      console.error(...loggerMessageArgs);\n      break;\n    default:\n      console.log(...loggerMessageArgs);\n  }\n};\n\n/**\n * Logs a deprecation notice\n * \n * @param {Object} options - The options for the log\n * @param {string} options.pkg - The package that is being deprecated\n * @param {string} options.subject - The subject of the deprecation\n * @param {string} options.transition - The transition path for the deprecation\n * @param {number} options.level - The level of the log\n * @param {string} options.message - The message of the log\n * @param {Function} options.callback - A callback to run after the log\n * @returns {Promise<void>}\n * \n * @example\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * \n */\nlog.deprecate = _ref3 => {\n  let {\n    pkg,\n    subject,\n    transition,\n    level = LEVELS.warn,\n    message = \"\",\n    callback = null\n  } = _ref3;\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  const logMessage = () => log({\n    title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n    message: `\n      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? \" of \" + pkg : \"\"}.` : \"\"}${message ? \"\\n\" + message : \"\"}${transition ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}` : \"\"}\n    `.trim(),\n    level\n  });\n  if (typeof callback === \"function\") {\n    return async function () {\n      await logMessage();\n      return await callback(...arguments);\n    };\n  }\n  return logMessage();\n};\n\nfunction interleave() {\n  let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  if (!a.length && !b.length) return c;\n  if (!a.length) return c;\n  if (!b.length) return [...c, a[0]];\n  const [aHead, ...aRest] = a;\n  const [bHead, ...bRest] = b;\n  if (aHead !== undefined) c.push(aHead);\n  if (bHead !== undefined) c.push(bHead);\n  return interleave(aRest, bRest, c);\n}\nfunction recApply(d) {\n  return function (arg1) {\n    if (typeof arg1 === \"function\") {\n      log.deprecate({\n        pkg: \"FCL/SDK\",\n        subject: \"Interopolation of functions into template literals\",\n        transition: \"https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\"\n      });\n      return recApply(d)(arg1(d));\n    }\n    return String(arg1);\n  };\n}\n\n/**\n * @param {(string|Array.<*>)} head\n * @param {Array.<*>} rest\n * @returns {{function(): string}}\n */\nfunction template(head) {\n  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n  if (typeof head === \"string\") return () => head;\n  if (Array.isArray(head)) {\n    return d => interleave(head, rest.map(recApply(d))).join(\"\").trim();\n  }\n  return head;\n}\n\n\n//# sourceMappingURL=template.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@onflow/util-template/dist/template.module.js\n"));

/***/ }),

/***/ "./node_modules/@onflow/util-uid/dist/util-uid.module.js":
/*!***************************************************************!*\
  !*** ./node_modules/@onflow/util-uid/dist/util-uid.module.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"uid\": function() { return /* binding */ uid; }\n/* harmony export */ });\n/**\n * Generates a unique identifier\n * @returns {string}\n */\nvar HEX = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\nvar T = HEX.length;\nfunction uid() {\n  var str = \"\",\n    num = 32;\n  while (num--) str += HEX[Math.random() * T | 0];\n  return str;\n}\n\n\n//# sourceMappingURL=util-uid.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLXVpZC9kaXN0L3V0aWwtdWlkLm1vZHVsZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9uZmxvdy91dGlsLXVpZC9kaXN0L3V0aWwtdWlkLm1vZHVsZS5qcz8yZWE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2VuZXJhdGVzIGEgdW5pcXVlIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnZhciBIRVggPSBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5XCI7XG52YXIgVCA9IEhFWC5sZW5ndGg7XG5mdW5jdGlvbiB1aWQoKSB7XG4gIHZhciBzdHIgPSBcIlwiLFxuICAgIG51bSA9IDMyO1xuICB3aGlsZSAobnVtLS0pIHN0ciArPSBIRVhbTWF0aC5yYW5kb20oKSAqIFQgfCAwXTtcbiAgcmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IHsgdWlkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLXVpZC5tb2R1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@onflow/util-uid/dist/util-uid.module.js\n"));

/***/ }),

/***/ "./node_modules/abort-controller/browser.js":
/*!**************************************************!*\
  !*** ./node_modules/abort-controller/browser.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*globals self, window */\n\n\n/*eslint-disable @mysticatea/prettier */\nconst { AbortController, AbortSignal } =\n    typeof self !== \"undefined\" ? self :\n    typeof window !== \"undefined\" ? window :\n    /* otherwise */ undefined\n/*eslint-enable @mysticatea/prettier */\n\nmodule.exports = AbortController\nmodule.exports.AbortSignal = AbortSignal\nmodule.exports[\"default\"] = AbortController\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYWJvcnQtY29udHJvbGxlci9icm93c2VyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ1k7O0FBRVo7QUFDQSxRQUFRLCtCQUErQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQix5QkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Fib3J0LWNvbnRyb2xsZXIvYnJvd3Nlci5qcz8xN2ViIl0sInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFscyBzZWxmLCB3aW5kb3cgKi9cblwidXNlIHN0cmljdFwiXG5cbi8qZXNsaW50LWRpc2FibGUgQG15c3RpY2F0ZWEvcHJldHRpZXIgKi9cbmNvbnN0IHsgQWJvcnRDb250cm9sbGVyLCBBYm9ydFNpZ25hbCB9ID1cbiAgICB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOlxuICAgIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOlxuICAgIC8qIG90aGVyd2lzZSAqLyB1bmRlZmluZWRcbi8qZXNsaW50LWVuYWJsZSBAbXlzdGljYXRlYS9wcmV0dGllciAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFib3J0Q29udHJvbGxlclxubW9kdWxlLmV4cG9ydHMuQWJvcnRTaWduYWwgPSBBYm9ydFNpZ25hbFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IEFib3J0Q29udHJvbGxlclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/abort-controller/browser.js\n"));

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsU0FBUztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzPzM3NzAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n"));

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\n"));

/***/ }),

/***/ "./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports[\"default\"] = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cross-fetch/dist/browser-ponyfill.js\n"));

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsV0FBVzs7QUFFcEI7QUFDQTtBQUNBO0FBQ0EsU0FBUyxXQUFXOztBQUVwQjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFdBQVc7O0FBRXBCO0FBQ0E7QUFDQSxTQUFTLFVBQVU7O0FBRW5CO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanM/ZWJjMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[2]!./styles/globals.css":
/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[2]!./styles/globals.css ***!
  \**********************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\n/* harmony import */ var _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root {\\n  --max-width: 1100px;\\n  --border-radius: 12px;\\n  --font-mono: ui-monospace, Menlo, Monaco, 'Cascadia Mono', 'Segoe UI Mono',\\n    'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro',\\n    'Fira Mono', 'Droid Sans Mono', 'Courier New', monospace;\\n\\n  --foreground-rgb: 0, 0, 0;\\n  --background-start-rgb: 214, 219, 220;\\n  --background-end-rgb: 255, 255, 255;\\n\\n  --primary-glow: conic-gradient(\\n    from 180deg at 50% 50%,\\n    #16abff33 0deg,\\n    #0885ff33 55deg,\\n    #54d6ff33 120deg,\\n    #0071ff33 160deg,\\n    transparent 360deg\\n  );\\n  --secondary-glow: radial-gradient(\\n    rgba(255, 255, 255, 1),\\n    rgba(255, 255, 255, 0)\\n  );\\n\\n  --tile-start-rgb: 239, 245, 249;\\n  --tile-end-rgb: 228, 232, 233;\\n  --tile-border: conic-gradient(\\n    #00000080,\\n    #00000040,\\n    #00000030,\\n    #00000020,\\n    #00000010,\\n    #00000010,\\n    #00000080\\n  );\\n\\n  --callout-rgb: 238, 240, 241;\\n  --callout-border-rgb: 172, 175, 176;\\n  --card-rgb: 180, 185, 188;\\n  --card-border-rgb: 131, 134, 135;\\n}\\n\\n@media (prefers-color-scheme: dark) {\\n  :root {\\n    --foreground-rgb: 255, 255, 255;\\n    --background-start-rgb: 0, 0, 0;\\n    --background-end-rgb: 0, 0, 0;\\n\\n    --primary-glow: radial-gradient(rgba(1, 65, 255, 0.4), rgba(1, 65, 255, 0));\\n    --secondary-glow: linear-gradient(\\n      to bottom right,\\n      rgba(1, 65, 255, 0),\\n      rgba(1, 65, 255, 0),\\n      rgba(1, 65, 255, 0.3)\\n    );\\n\\n    --tile-start-rgb: 2, 13, 46;\\n    --tile-end-rgb: 2, 5, 19;\\n    --tile-border: conic-gradient(\\n      #ffffff80,\\n      #ffffff40,\\n      #ffffff30,\\n      #ffffff20,\\n      #ffffff10,\\n      #ffffff10,\\n      #ffffff80\\n    );\\n\\n    --callout-rgb: 20, 20, 20;\\n    --callout-border-rgb: 108, 108, 108;\\n    --card-rgb: 100, 100, 100;\\n    --card-border-rgb: 200, 200, 200;\\n  }\\n}\\n\\n* {\\n  box-sizing: border-box;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\nhtml,\\nbody {\\n  max-width: 100vw;\\n  overflow-x: hidden;\\n}\\n\\nbody {\\n  color: rgb(var(--foreground-rgb));\\n  background: linear-gradient(\\n      to bottom,\\n      transparent,\\n      rgb(var(--background-end-rgb))\\n    )\\n    rgb(var(--background-start-rgb));\\n}\\n\\na {\\n  color: inherit;\\n  text-decoration: none;\\n}\\n\\n@media (prefers-color-scheme: dark) {\\n  html {\\n    color-scheme: dark;\\n  }\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://styles/globals.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,mBAAmB;EACnB,qBAAqB;EACrB;;4DAE0D;;EAE1D,yBAAyB;EACzB,qCAAqC;EACrC,mCAAmC;;EAEnC;;;;;;;GAOC;EACD;;;GAGC;;EAED,+BAA+B;EAC/B,6BAA6B;EAC7B;;;;;;;;GAQC;;EAED,4BAA4B;EAC5B,mCAAmC;EACnC,yBAAyB;EACzB,gCAAgC;AAClC;;AAEA;EACE;IACE,+BAA+B;IAC/B,+BAA+B;IAC/B,6BAA6B;;IAE7B,2EAA2E;IAC3E;;;;;KAKC;;IAED,2BAA2B;IAC3B,wBAAwB;IACxB;;;;;;;;KAQC;;IAED,yBAAyB;IACzB,mCAAmC;IACnC,yBAAyB;IACzB,gCAAgC;EAClC;AACF;;AAEA;EACE,sBAAsB;EACtB,UAAU;EACV,SAAS;AACX;;AAEA;;EAEE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,iCAAiC;EACjC;;;;;oCAKkC;AACpC;;AAEA;EACE,cAAc;EACd,qBAAqB;AACvB;;AAEA;EACE;IACE,kBAAkB;EACpB;AACF\",\"sourcesContent\":[\":root {\\n  --max-width: 1100px;\\n  --border-radius: 12px;\\n  --font-mono: ui-monospace, Menlo, Monaco, 'Cascadia Mono', 'Segoe UI Mono',\\n    'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro',\\n    'Fira Mono', 'Droid Sans Mono', 'Courier New', monospace;\\n\\n  --foreground-rgb: 0, 0, 0;\\n  --background-start-rgb: 214, 219, 220;\\n  --background-end-rgb: 255, 255, 255;\\n\\n  --primary-glow: conic-gradient(\\n    from 180deg at 50% 50%,\\n    #16abff33 0deg,\\n    #0885ff33 55deg,\\n    #54d6ff33 120deg,\\n    #0071ff33 160deg,\\n    transparent 360deg\\n  );\\n  --secondary-glow: radial-gradient(\\n    rgba(255, 255, 255, 1),\\n    rgba(255, 255, 255, 0)\\n  );\\n\\n  --tile-start-rgb: 239, 245, 249;\\n  --tile-end-rgb: 228, 232, 233;\\n  --tile-border: conic-gradient(\\n    #00000080,\\n    #00000040,\\n    #00000030,\\n    #00000020,\\n    #00000010,\\n    #00000010,\\n    #00000080\\n  );\\n\\n  --callout-rgb: 238, 240, 241;\\n  --callout-border-rgb: 172, 175, 176;\\n  --card-rgb: 180, 185, 188;\\n  --card-border-rgb: 131, 134, 135;\\n}\\n\\n@media (prefers-color-scheme: dark) {\\n  :root {\\n    --foreground-rgb: 255, 255, 255;\\n    --background-start-rgb: 0, 0, 0;\\n    --background-end-rgb: 0, 0, 0;\\n\\n    --primary-glow: radial-gradient(rgba(1, 65, 255, 0.4), rgba(1, 65, 255, 0));\\n    --secondary-glow: linear-gradient(\\n      to bottom right,\\n      rgba(1, 65, 255, 0),\\n      rgba(1, 65, 255, 0),\\n      rgba(1, 65, 255, 0.3)\\n    );\\n\\n    --tile-start-rgb: 2, 13, 46;\\n    --tile-end-rgb: 2, 5, 19;\\n    --tile-border: conic-gradient(\\n      #ffffff80,\\n      #ffffff40,\\n      #ffffff30,\\n      #ffffff20,\\n      #ffffff10,\\n      #ffffff10,\\n      #ffffff80\\n    );\\n\\n    --callout-rgb: 20, 20, 20;\\n    --callout-border-rgb: 108, 108, 108;\\n    --card-rgb: 100, 100, 100;\\n    --card-border-rgb: 200, 200, 200;\\n  }\\n}\\n\\n* {\\n  box-sizing: border-box;\\n  padding: 0;\\n  margin: 0;\\n}\\n\\nhtml,\\nbody {\\n  max-width: 100vw;\\n  overflow-x: hidden;\\n}\\n\\nbody {\\n  color: rgb(var(--foreground-rgb));\\n  background: linear-gradient(\\n      to bottom,\\n      transparent,\\n      rgb(var(--background-end-rgb))\\n    )\\n    rgb(var(--background-start-rgb));\\n}\\n\\na {\\n  color: inherit;\\n  text-decoration: none;\\n}\\n\\n@media (prefers-color-scheme: dark) {\\n  html {\\n    color-scheme: dark;\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[2]!./styles/globals.css\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js ***!
  \************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/ // css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function(useSourceMap) {\n    var list = [] // return the list of modules as css string\n    ;\n    list.toString = function toString() {\n        return this.map(function(item) {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            var content = cssWithMappingToString(item, useSourceMap);\n            if (item[2]) {\n                return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n            }\n            return content;\n        }).join(\"\");\n    } // import a list of modules into the list\n    ;\n    // eslint-disable-next-line func-names\n    // @ts-expect-error TODO: fix type\n    list.i = function(modules, mediaQuery, dedupe) {\n        if (typeof modules === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            modules = [\n                [\n                    null,\n                    modules,\n                    \"\"\n                ]\n            ];\n        }\n        var alreadyImportedModules = {};\n        if (dedupe) {\n            for(var i = 0; i < this.length; i++){\n                // eslint-disable-next-line prefer-destructuring\n                var id = this[i][0];\n                if (id != null) {\n                    alreadyImportedModules[id] = true;\n                }\n            }\n        }\n        for(var _i = 0; _i < modules.length; _i++){\n            var item = [].concat(modules[_i]);\n            if (dedupe && alreadyImportedModules[item[0]]) {\n                continue;\n            }\n            if (mediaQuery) {\n                if (!item[2]) {\n                    item[2] = mediaQuery;\n                } else {\n                    item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n                }\n            }\n            list.push(item);\n        }\n    };\n    return list;\n};\nfunction cssWithMappingToString(item, useSourceMap) {\n    var content = item[1] || \"\" // eslint-disable-next-line prefer-destructuring\n    ;\n    var cssMapping = item[3];\n    if (!cssMapping) {\n        return content;\n    }\n    if (useSourceMap && typeof btoa === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        var sourceMapping = toComment(cssMapping);\n        var sourceURLs = cssMapping.sources.map(function(source) {\n            return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n        });\n        return [\n            content\n        ].concat(sourceURLs).concat([\n            sourceMapping\n        ]).join(\"\\n\");\n    }\n    return [\n        content\n    ].join(\"\\n\");\n} // Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n    // eslint-disable-next-line no-undef\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    return \"/*# \".concat(data, \" */\");\n}\n\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9ydW50aW1lL2FwaS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELHFCQUFxQjtBQUN6RTtBQUNBO0FBQ0EsU0FBUztBQUNULE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixpQkFBaUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscUJBQXFCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvcnVudGltZS9hcGkuanM/Y2E0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovIC8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcbiAgICB2YXIgbGlzdCA9IFtdIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgICA7XG4gICAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG4gICAgICAgICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgfSAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAgIDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETzogZml4IHR5cGVcbiAgICBsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIG1vZHVsZXMgPSBbXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtb2R1bGVzLFxuICAgICAgICAgICAgICAgICAgICBcIlwiXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgICAgICBpZiAoZGVkdXBlKSB7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgICAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcbiAgICAgICAgICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvcih2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKXtcbiAgICAgICAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcbiAgICAgICAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGxpc3Q7XG59O1xuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgXCJcIiAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICA7XG4gICAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICAgIGlmICghY3NzTWFwcGluZykge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG4gICAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBjb250ZW50XG4gICAgICAgIF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbXG4gICAgICAgICAgICBzb3VyY2VNYXBwaW5nXG4gICAgICAgIF0pLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgIGNvbnRlbnRcbiAgICBdLmpvaW4oXCJcXG5cIik7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app! ***!
  \*******************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_app\",\n      function () {\n        return __webpack_require__(/*! private-next-pages/_app */ \"./pages/_app.js\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/_app\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1wcml2YXRlLW5leHQtcGFnZXMlMkZfYXBwJnBhZ2U9JTJGX2FwcCEuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxnREFBeUI7QUFDaEQ7QUFDQTtBQUNBLE9BQU8sSUFBVTtBQUNqQixNQUFNLFVBQVU7QUFDaEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzY3ODIiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9fYXBwXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlKFwicHJpdmF0ZS1uZXh0LXBhZ2VzL19hcHBcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL19hcHBcIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!\n"));

/***/ }),

/***/ "./styles/globals.css":
/*!****************************!*\
  !*** ./styles/globals.css ***!
  \****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[2]!./globals.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[2]!./styles/globals.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n    if (!a && b || a && !b) {\n        return false;\n    }\n    let p;\n    for(p in a){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (a[p] !== b[p]) {\n            return false;\n        }\n    }\n    for(p in b){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (!a[p]) {\n            return false;\n        }\n    }\n    return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[2]!./globals.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[2]!./styles/globals.css\",\n      function () {\n        content = __webpack_require__(/*! !!../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[1]!../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[2]!./globals.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[13].use[2]!./styles/globals.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMvZ2xvYmFscy5jc3MuanMiLCJtYXBwaW5ncyI6IkFBQUEsVUFBVSxtQkFBTyxDQUFDLG9OQUF3RztBQUMxSCwwQkFBMEIsbUJBQU8sQ0FBQywyZUFBaVA7O0FBRW5SOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQSxJQUFJLElBQVU7QUFDZCx5QkFBeUIsVUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxpQkFBaUI7QUFDckIsTUFBTSwyZUFBaVA7QUFDdlA7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQywyZUFBaVA7O0FBRTNROztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixVQUFVOztBQUUxQjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUUsVUFBVTtBQUNaO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3N0eWxlcy9nbG9iYWxzLmNzcz85YmFmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtc3R5bGUtbG9hZGVyL3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxM10udXNlWzFdIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZlsxM10udXNlWzJdIS4vZ2xvYmFscy5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIHN0eWxlLWxvYWRlciBpbmplY3RzIENTUyBpbnRvIHRoZSBib3R0b21cbiAgICAgICAgICAgICAgICAgICAgLy8gb2YgPGhlYWQ+LiBUaGlzIGNhdXNlcyBvcmRlcmluZyBwcm9ibGVtcyBiZXR3ZWVuIGRldlxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgcHJvZC4gVG8gZml4IHRoaXMsIHdlIHJlbmRlciBhIDxub3NjcmlwdD4gdGFnIGFzXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGFuY2hvciBmb3IgdGhlIHN0eWxlcyB0byBiZSBwbGFjZWQgYmVmb3JlLiBUaGVzZVxuICAgICAgICAgICAgICAgICAgICAvLyBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIF9iZWZvcmVfIDxzdHlsZSBqc3ggZ2xvYmFsPi5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgZWxlbWVudHMgc2hvdWxkIGFsd2F5cyBleGlzdC4gSWYgdGhleSBkbyBub3QsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgY29kZSBzaG91bGQgZmFpbC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI19fbmV4dF9jc3NfX0RPX05PVF9VU0VfX1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBhbmNob3JFbGVtZW50LnBhcmVudE5vZGUvLyBOb3JtYWxseSA8aGVhZD5cbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAvLyBFYWNoIHN0eWxlIHRhZyBzaG91bGQgYmUgcGxhY2VkIHJpZ2h0IGJlZm9yZSBvdXJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5jaG9yLiBCeSBpbnNlcnRpbmcgYmVmb3JlIGFuZCBub3QgYWZ0ZXIsIHdlIGRvIG5vdFxuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHRyYWNrIHRoZSBsYXN0IGluc2VydGVkIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGFuY2hvckVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH07XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cbmlmIChtb2R1bGUuaG90KSB7XG4gIGlmICghY29udGVudC5sb2NhbHMgfHwgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKSB7XG4gICAgdmFyIGlzRXF1YWxMb2NhbHMgPSBmdW5jdGlvbiBpc0VxdWFsTG9jYWxzKGEsIGIsIGlzTmFtZWRFeHBvcnQpIHtcbiAgICBpZiAoIWEgJiYgYiB8fCBhICYmICFiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHA7XG4gICAgZm9yKHAgaW4gYSl7XG4gICAgICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYVtwXSAhPT0gYltwXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcihwIGluIGIpe1xuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhW3BdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuICAgIHZhciBvbGRMb2NhbHMgPSBjb250ZW50LmxvY2FscztcblxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEzXS51c2VbMV0hLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzEzXS51c2VbMl0hLi9nbG9iYWxzLmNzc1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTNdLnVzZVsxXSEuLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbMTNdLnVzZVsyXSEuL2dsb2JhbHMuY3NzXCIpO1xuXG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIWlzRXF1YWxMb2NhbHMob2xkTG9jYWxzLCBjb250ZW50LmxvY2FscykpIHtcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgICAgICAgICAgIHVwZGF0ZShjb250ZW50KTtcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./styles/globals.css\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js ***!
  \************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst isOldIE = function isOldIE() {\n    let memo;\n    return function memorize() {\n        if (typeof memo === \"undefined\") {\n            // Test for IE <= 9 as proposed by Browserhacks\n            // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n            // Tests for existence of standard globals is to allow style-loader\n            // to operate correctly into non-standard environments\n            // @see https://github.com/webpack-contrib/style-loader/issues/177\n            memo = Boolean(window && document && document.all && !window.atob);\n        }\n        return memo;\n    };\n}();\nconst getTargetElement = function() {\n    const memo = {};\n    return function memorize(target) {\n        if (typeof memo[target] === \"undefined\") {\n            let styleTarget = document.querySelector(target);\n            // Special case to return head of iframe instead of iframe itself\n            if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n                try {\n                    // This will throw an exception if access to iframe is blocked\n                    // due to cross-origin restrictions\n                    styleTarget = styleTarget.contentDocument.head;\n                } catch (e) {\n                    // istanbul ignore next\n                    styleTarget = null;\n                }\n            }\n            memo[target] = styleTarget;\n        }\n        return memo[target];\n    };\n}();\nconst stylesInDom = [];\nfunction getIndexByIdentifier(identifier) {\n    let result = -1;\n    for(let i = 0; i < stylesInDom.length; i++){\n        if (stylesInDom[i].identifier === identifier) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\nfunction modulesToDom(list, options) {\n    const idCountMap = {};\n    const identifiers = [];\n    for(let i = 0; i < list.length; i++){\n        const item = list[i];\n        const id = options.base ? item[0] + options.base : item[0];\n        const count = idCountMap[id] || 0;\n        const identifier = id + \" \" + count.toString();\n        idCountMap[id] = count + 1;\n        const index = getIndexByIdentifier(identifier);\n        const obj = {\n            css: item[1],\n            media: item[2],\n            sourceMap: item[3]\n        };\n        if (index !== -1) {\n            stylesInDom[index].references++;\n            stylesInDom[index].updater(obj);\n        } else {\n            stylesInDom.push({\n                identifier: identifier,\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                updater: addStyle(obj, options),\n                references: 1\n            });\n        }\n        identifiers.push(identifier);\n    }\n    return identifiers;\n}\nfunction insertStyleElement(options) {\n    const style = document.createElement(\"style\");\n    const attributes = options.attributes || {};\n    if (typeof attributes.nonce === \"undefined\") {\n        const nonce = // eslint-disable-next-line no-undef\n         true ? __webpack_require__.nc : 0;\n        if (nonce) {\n            attributes.nonce = nonce;\n        }\n    }\n    Object.keys(attributes).forEach(function(key) {\n        style.setAttribute(key, attributes[key]);\n    });\n    if (typeof options.insert === \"function\") {\n        options.insert(style);\n    } else {\n        const target = getTargetElement(options.insert || \"head\");\n        if (!target) {\n            throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n        }\n        target.appendChild(style);\n    }\n    return style;\n}\nfunction removeStyleElement(style) {\n    // istanbul ignore if\n    if (style.parentNode === null) {\n        return false;\n    }\n    style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */ const replaceText = function replaceText() {\n    const textStore = [];\n    return function replace(index, replacement) {\n        textStore[index] = replacement;\n        return textStore.filter(Boolean).join(\"\\n\");\n    };\n}();\nfunction applyToSingletonTag(style, index, remove, obj) {\n    const css = remove ? \"\" : obj.media ? \"@media \" + obj.media + \" {\" + obj.css + \"}\" : obj.css;\n    // For old IE\n    /* istanbul ignore if  */ if (style.styleSheet) {\n        style.styleSheet.cssText = replaceText(index, css);\n    } else {\n        const cssNode = document.createTextNode(css);\n        const childNodes = style.childNodes;\n        if (childNodes[index]) {\n            style.removeChild(childNodes[index]);\n        }\n        if (childNodes.length) {\n            style.insertBefore(cssNode, childNodes[index]);\n        } else {\n            style.appendChild(cssNode);\n        }\n    }\n}\nfunction applyToTag(style, _options, obj) {\n    let css = obj.css;\n    const media = obj.media;\n    const sourceMap = obj.sourceMap;\n    if (media) {\n        style.setAttribute(\"media\", media);\n    } else {\n        style.removeAttribute(\"media\");\n    }\n    if (sourceMap && typeof btoa !== \"undefined\") {\n        css += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n    }\n    // For old IE\n    /* istanbul ignore if  */ if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n    } else {\n        while(style.firstChild){\n            style.removeChild(style.firstChild);\n        }\n        style.appendChild(document.createTextNode(css));\n    }\n}\nlet singleton = null;\nlet singletonCounter = 0;\nfunction addStyle(obj, options) {\n    let style;\n    let update;\n    let remove;\n    if (options.singleton) {\n        const styleIndex = singletonCounter++;\n        style = singleton || (singleton = insertStyleElement(options));\n        update = applyToSingletonTag.bind(null, style, styleIndex, false);\n        remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n    } else {\n        style = insertStyleElement(options);\n        update = applyToTag.bind(null, style, options);\n        remove = function() {\n            removeStyleElement(style);\n        };\n    }\n    update(obj);\n    return function updateStyle(newObj) {\n        if (newObj) {\n            if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n                return;\n            }\n            update(obj = newObj);\n        } else {\n            remove();\n        }\n    };\n}\nmodule.exports = function(list, options) {\n    options = options || {};\n    // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n    // tags it will allow on a page\n    if (!options.singleton && typeof options.singleton !== \"boolean\") {\n        options.singleton = isOldIE();\n    }\n    list = list || [];\n    let lastIdentifiers = modulesToDom(list, options);\n    return function update(newList) {\n        newList = newList || [];\n        if (Object.prototype.toString.call(newList) !== \"[object Array]\") {\n            return;\n        }\n        for(let i = 0; i < lastIdentifiers.length; i++){\n            const identifier = lastIdentifiers[i];\n            const index = getIndexByIdentifier(identifier);\n            stylesInDom[index].references--;\n        }\n        const newLastIdentifiers = modulesToDom(newList, options);\n        for(let i1 = 0; i1 < lastIdentifiers.length; i1++){\n            const identifier = lastIdentifiers[i1];\n            const index = getIndexByIdentifier(identifier);\n            if (stylesInDom[index].references === 0) {\n                stylesInDom[index].updater();\n                stylesInDom.splice(index, 1);\n            }\n        }\n        lastIdentifiers = newLastIdentifiers;\n    };\n};\n\n//# sourceMappingURL=injectStylesIntoStyleTag.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\n"));

/***/ }),

/***/ "./contexts/AuthContext.js":
/*!*********************************!*\
  !*** ./contexts/AuthContext.js ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AuthContext\": function() { return /* binding */ AuthContext; },\n/* harmony export */   \"default\": function() { return /* binding */ AuthProvider; },\n/* harmony export */   \"useAuth\": function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _onflow_fcl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @onflow/fcl */ \"./node_modules/@onflow/fcl/dist/fcl.module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _flow_scripts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../flow/scripts */ \"./flow/scripts.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_2__.createContext)({});\nconst useAuth = ()=>{\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction AuthProvider(param) {\n    let { children  } = param;\n    _s1();\n    // Create a state variable to keep track of the currentUser\n    const [currentUser, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)({\n        loggedIn: false,\n        addr: undefined\n    });\n    // Create a state variable to represent if a user's account\n    // has been initialized or not\n    const [isInitialized, setIsInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    // Use FCL to subscribe to changes in the user (login, logout, etc)\n    // Tell FCL to call `setUser` and update our state variables\n    // if anything changes\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>_onflow_fcl__WEBPACK_IMPORTED_MODULE_1__.currentUser.subscribe(setUser), []);\n    // If currentUser is set, i.e. user is logged in\n    // check whether their account is initialized or not\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (currentUser.addr) {\n            checkInit();\n        }\n    }, [\n        currentUser\n    ]);\n    // Helper function to log the user out of the dApp\n    const logOut = async ()=>{\n        _onflow_fcl__WEBPACK_IMPORTED_MODULE_1__.unauthenticate();\n        setUser({\n            loggedIn: false,\n            addr: undefined\n        });\n    };\n    // Helper function to log the user in to the dApp\n    // p.s. this feels even easier than RainbowKit, eh?\n    const logIn = ()=>{\n        _onflow_fcl__WEBPACK_IMPORTED_MODULE_1__.logIn();\n    };\n    // Use the `checkIsInitialized` script we wrote earlier\n    // and update the state variable as necessary\n    const checkInit = async ()=>{\n        const isInit = await (0,_flow_scripts__WEBPACK_IMPORTED_MODULE_3__.checkIsInitialized)(currentUser.addr);\n        setIsInitialized(isInit);\n    };\n    // Build the object of everything we want to expose through \n    // the context\n    const value = {\n        currentUser,\n        isInitialized,\n        checkInit,\n        logOut,\n        logIn\n    };\n    // Return the Context Provider with the value set\n    // Render all children of the component inside of it\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"D:\\\\Projects-Of-Blockchain\\\\flow-name-service-tatpar\\\\web\\\\contexts\\\\AuthContext.js\",\n        lineNumber: 64,\n        columnNumber: 12\n    }, this);\n}\n_s1(AuthProvider, \"5WDLn4KSHjq9P55+LMCp0suvGhk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb250ZXh0cy9BdXRoQ29udGV4dC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFtQztBQUNvQztBQUNGO0FBRTlELE1BQU1PLDRCQUFjTixvREFBYUEsQ0FBQyxDQUFDLEdBQUc7QUFFdEMsTUFBTU8sVUFBVSxJQUFNTjs7SUFBQUEsT0FBQUEsaURBQVVBLENBQUNLO0FBQVcsRUFBRTtHQUF4Q0M7QUFFRSxTQUFTQyxhQUFhLEtBQVksRUFBRTtRQUFkLEVBQUVDLFNBQVEsRUFBRSxHQUFaOztJQUVqQywyREFBMkQ7SUFDM0QsTUFBTSxDQUFDQyxhQUFhQyxRQUFRLEdBQUdSLCtDQUFRQSxDQUFDO1FBQ3RDUyxVQUFVLEtBQUs7UUFDZkMsTUFBTUM7SUFDUjtJQUNBLDJEQUEyRDtJQUMzRCw4QkFBOEI7SUFDOUIsTUFBTSxDQUFDQyxlQUFlQyxpQkFBaUIsR0FBR2IsK0NBQVFBLENBQUMsS0FBSztJQUV4RCxtRUFBbUU7SUFDbkUsNERBQTREO0lBQzVELHNCQUFzQjtJQUN0QkQsZ0RBQVNBLENBQUMsSUFBTUgsOERBQXlCLENBQUNZLFVBQVUsRUFBRTtJQUV0RCxnREFBZ0Q7SUFDaEQsb0RBQW9EO0lBQ3BEVCxnREFBU0EsQ0FBQyxJQUFNO1FBQ2QsSUFBSVEsWUFBWUcsSUFBSSxFQUFFO1lBQ3BCSztRQUNGLENBQUM7SUFDSCxHQUFHO1FBQUNSO0tBQVk7SUFFaEIsa0RBQWtEO0lBQ2xELE1BQU1TLFNBQVMsVUFBWTtRQUN6QnBCLHVEQUFrQjtRQUNsQlksUUFBUTtZQUFFQyxVQUFVLEtBQUs7WUFBRUMsTUFBTUM7UUFBVTtJQUM3QztJQUVBLGlEQUFpRDtJQUNqRCxtREFBbUQ7SUFDbkQsTUFBTU8sUUFBUSxJQUFNO1FBQ2xCdEIsOENBQVM7SUFDWDtJQUVBLHVEQUF1RDtJQUN2RCw2Q0FBNkM7SUFDN0MsTUFBTW1CLFlBQVksVUFBWTtRQUM1QixNQUFNSSxTQUFTLE1BQU1sQixpRUFBa0JBLENBQUNNLFlBQVlHLElBQUk7UUFDeERHLGlCQUFpQk07SUFDbkI7SUFFQSw0REFBNEQ7SUFDNUQsY0FBYztJQUNkLE1BQU1DLFFBQVE7UUFDWmI7UUFDQUs7UUFDQUc7UUFDQUM7UUFDQUU7SUFDRjtJQUVBLGlEQUFpRDtJQUNqRCxvREFBb0Q7SUFDcEQscUJBQU8sOERBQUNmLFlBQVlrQixRQUFRO1FBQUNELE9BQU9BO2tCQUFRZDs7Ozs7O0FBQzlDLENBQUM7SUF4RHFCRDtLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb250ZXh0cy9BdXRoQ29udGV4dC5qcz81OWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZjbCBmcm9tIFwiQG9uZmxvdy9mY2xcIjtcclxuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjaGVja0lzSW5pdGlhbGl6ZWQsIElTX0lOSVRJQUxJWkVEIH0gZnJvbSBcIi4uL2Zsb3cvc2NyaXB0c1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEF1dGhDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlQXV0aCA9ICgpID0+IHVzZUNvbnRleHQoQXV0aENvbnRleHQpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXV0aFByb3ZpZGVyKHsgY2hpbGRyZW4gfSkge1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIHN0YXRlIHZhcmlhYmxlIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnRVc2VyXHJcbiAgICBjb25zdCBbY3VycmVudFVzZXIsIHNldFVzZXJdID0gdXNlU3RhdGUoe1xyXG4gICAgICBsb2dnZWRJbjogZmFsc2UsXHJcbiAgICAgIGFkZHI6IHVuZGVmaW5lZCxcclxuICAgIH0pO1xyXG4gICAgLy8gQ3JlYXRlIGEgc3RhdGUgdmFyaWFibGUgdG8gcmVwcmVzZW50IGlmIGEgdXNlcidzIGFjY291bnRcclxuICAgIC8vIGhhcyBiZWVuIGluaXRpYWxpemVkIG9yIG5vdFxyXG4gICAgY29uc3QgW2lzSW5pdGlhbGl6ZWQsIHNldElzSW5pdGlhbGl6ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIFxyXG4gICAgLy8gVXNlIEZDTCB0byBzdWJzY3JpYmUgdG8gY2hhbmdlcyBpbiB0aGUgdXNlciAobG9naW4sIGxvZ291dCwgZXRjKVxyXG4gICAgLy8gVGVsbCBGQ0wgdG8gY2FsbCBgc2V0VXNlcmAgYW5kIHVwZGF0ZSBvdXIgc3RhdGUgdmFyaWFibGVzXHJcbiAgICAvLyBpZiBhbnl0aGluZyBjaGFuZ2VzXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4gZmNsLmN1cnJlbnRVc2VyLnN1YnNjcmliZShzZXRVc2VyKSwgW10pO1xyXG4gIFxyXG4gICAgLy8gSWYgY3VycmVudFVzZXIgaXMgc2V0LCBpLmUuIHVzZXIgaXMgbG9nZ2VkIGluXHJcbiAgICAvLyBjaGVjayB3aGV0aGVyIHRoZWlyIGFjY291bnQgaXMgaW5pdGlhbGl6ZWQgb3Igbm90XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICBpZiAoY3VycmVudFVzZXIuYWRkcikge1xyXG4gICAgICAgIGNoZWNrSW5pdCgpO1xyXG4gICAgICB9XHJcbiAgICB9LCBbY3VycmVudFVzZXJdKTtcclxuICBcclxuICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBsb2cgdGhlIHVzZXIgb3V0IG9mIHRoZSBkQXBwXHJcbiAgICBjb25zdCBsb2dPdXQgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGZjbC51bmF1dGhlbnRpY2F0ZSgpO1xyXG4gICAgICBzZXRVc2VyKHsgbG9nZ2VkSW46IGZhbHNlLCBhZGRyOiB1bmRlZmluZWQgfSk7XHJcbiAgICB9O1xyXG4gIFxyXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGxvZyB0aGUgdXNlciBpbiB0byB0aGUgZEFwcFxyXG4gICAgLy8gcC5zLiB0aGlzIGZlZWxzIGV2ZW4gZWFzaWVyIHRoYW4gUmFpbmJvd0tpdCwgZWg/XHJcbiAgICBjb25zdCBsb2dJbiA9ICgpID0+IHtcclxuICAgICAgZmNsLmxvZ0luKCk7XHJcbiAgICB9O1xyXG4gIFxyXG4gICAgLy8gVXNlIHRoZSBgY2hlY2tJc0luaXRpYWxpemVkYCBzY3JpcHQgd2Ugd3JvdGUgZWFybGllclxyXG4gICAgLy8gYW5kIHVwZGF0ZSB0aGUgc3RhdGUgdmFyaWFibGUgYXMgbmVjZXNzYXJ5XHJcbiAgICBjb25zdCBjaGVja0luaXQgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGlzSW5pdCA9IGF3YWl0IGNoZWNrSXNJbml0aWFsaXplZChjdXJyZW50VXNlci5hZGRyKTtcclxuICAgICAgc2V0SXNJbml0aWFsaXplZChpc0luaXQpO1xyXG4gICAgfTtcclxuICBcclxuICAgIC8vIEJ1aWxkIHRoZSBvYmplY3Qgb2YgZXZlcnl0aGluZyB3ZSB3YW50IHRvIGV4cG9zZSB0aHJvdWdoIFxyXG4gICAgLy8gdGhlIGNvbnRleHRcclxuICAgIGNvbnN0IHZhbHVlID0ge1xyXG4gICAgICBjdXJyZW50VXNlcixcclxuICAgICAgaXNJbml0aWFsaXplZCxcclxuICAgICAgY2hlY2tJbml0LFxyXG4gICAgICBsb2dPdXQsXHJcbiAgICAgIGxvZ0luLFxyXG4gICAgfTtcclxuICBcclxuICAgIC8vIFJldHVybiB0aGUgQ29udGV4dCBQcm92aWRlciB3aXRoIHRoZSB2YWx1ZSBzZXRcclxuICAgIC8vIFJlbmRlciBhbGwgY2hpbGRyZW4gb2YgdGhlIGNvbXBvbmVudCBpbnNpZGUgb2YgaXRcclxuICAgIHJldHVybiA8QXV0aENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3ZhbHVlfT57Y2hpbGRyZW59PC9BdXRoQ29udGV4dC5Qcm92aWRlcj47XHJcbiAgfSJdLCJuYW1lcyI6WyJmY2wiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiY2hlY2tJc0luaXRpYWxpemVkIiwiSVNfSU5JVElBTElaRUQiLCJBdXRoQ29udGV4dCIsInVzZUF1dGgiLCJBdXRoUHJvdmlkZXIiLCJjaGlsZHJlbiIsImN1cnJlbnRVc2VyIiwic2V0VXNlciIsImxvZ2dlZEluIiwiYWRkciIsInVuZGVmaW5lZCIsImlzSW5pdGlhbGl6ZWQiLCJzZXRJc0luaXRpYWxpemVkIiwic3Vic2NyaWJlIiwiY2hlY2tJbml0IiwibG9nT3V0IiwidW5hdXRoZW50aWNhdGUiLCJsb2dJbiIsImlzSW5pdCIsInZhbHVlIiwiUHJvdmlkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./contexts/AuthContext.js\n"));

/***/ }),

/***/ "./flow/scripts.js":
/*!*************************!*\
  !*** ./flow/scripts.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"checkIsAvailable\": function() { return /* binding */ checkIsAvailable; },\n/* harmony export */   \"checkIsInitialized\": function() { return /* binding */ checkIsInitialized; },\n/* harmony export */   \"getAllDomainInfos\": function() { return /* binding */ getAllDomainInfos; },\n/* harmony export */   \"getDomainInfoByNameHash\": function() { return /* binding */ getDomainInfoByNameHash; },\n/* harmony export */   \"getMyDomainInfos\": function() { return /* binding */ getMyDomainInfos; },\n/* harmony export */   \"getRentCost\": function() { return /* binding */ getRentCost; }\n/* harmony export */ });\n/* harmony import */ var _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @onflow/fcl */ \"./node_modules/@onflow/fcl/dist/fcl.module.js\");\n\nasync function checkIsInitialized(addr) {\n    return _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.query({\n        cadence: IS_INITIALIZED,\n        args: (arg, t)=>[\n                arg(addr, t.Address)\n            ]\n    });\n}\nconst IS_INITIALIZED = \"\\nimport Domains from 0xDomains\\nimport NonFungibleToken from 0xNonFungibleToken\\n\\npub fun main(account: Address): Bool {\\n    let capability = getAccount(account).getCapability<&Domains.Collection{NonFungibleToken.CollectionPublic, Domains.CollectionPublic}>(Domains.DomainsPublicPath)\\n    return capability.check()\\n}\\n\";\nasync function getAllDomainInfos() {\n    return _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.query({\n        cadence: GET_ALL_DOMAIN_INFOS\n    });\n}\nconst GET_ALL_DOMAIN_INFOS = \"\\nimport Domains from 0xDomains\\n\\npub fun main(): [Domains.DomainInfo] {\\n    let allOwners = Domains.getAllOwners()\\n    let infos: [Domains.DomainInfo] = []\\n\\n    for nameHash in allOwners.keys {\\n        let publicCap = getAccount(allOwners[nameHash]!).getCapability<&Domains.Collection{Domains.CollectionPublic}>(Domains.DomainsPublicPath)\\n        let collection = publicCap.borrow()!\\n        let id = Domains.nameHashToIDs[nameHash]\\n        if id != nil {\\n            let domain = collection.borrowDomain(id: id!)\\n            let domainInfo = domain.getInfo()\\n            infos.append(domainInfo)\\n        }\\n    }\\n\\n    return infos\\n}\\n\";\nasync function checkIsAvailable(name) {\n    return _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.query({\n        cadence: CHECK_IS_AVAILABLE,\n        args: (arg, t)=>[\n                arg(name, t.String)\n            ]\n    });\n}\nconst CHECK_IS_AVAILABLE = \"\\nimport Domains from 0xDomains\\n\\npub fun main(name: String): Bool {\\n  return Domains.isAvailable(nameHash: name)\\n}\\n\";\nasync function getRentCost(name, duration) {\n    return _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.query({\n        cadence: GET_RENT_COST,\n        args: (arg, t)=>[\n                arg(name, t.String),\n                arg(duration, t.UFix64)\n            ]\n    });\n}\nconst GET_RENT_COST = \"\\nimport Domains from 0xDomains\\n\\npub fun main(name: String, duration: UFix64): UFix64 {\\n  return Domains.getRentCost(name: name, duration: duration)\\n}\\n\";\nasync function getMyDomainInfos(addr) {\n    return _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.query({\n        cadence: GET_MY_DOMAIN_INFOS,\n        args: (arg, t)=>[\n                arg(addr, t.Address)\n            ]\n    });\n}\nconst GET_MY_DOMAIN_INFOS = '\\nimport Domains from 0xDomains\\nimport NonFungibleToken from 0xNonFungibleToken\\n\\npub fun main(account: Address): [Domains.DomainInfo] {\\n    let capability = getAccount(account).getCapability<&Domains.Collection{NonFungibleToken.CollectionPublic, Domains.CollectionPublic}>(Domains.DomainsPublicPath)\\n    let collection = capability.borrow() ?? panic(\"Collection capability could not be borrowed\")\\n\\n    let ids = collection.getIDs()\\n    let infos: [Domains.DomainInfo] = []\\n\\n    for id in ids {\\n        let domain = collection.borrowDomain(id: id!)\\n        let domainInfo = domain.getInfo()\\n        infos.append(domainInfo)\\n    }\\n\\n    return infos\\n}\\n';\nasync function getDomainInfoByNameHash(addr, nameHash) {\n    return _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.query({\n        cadence: GET_DOMAIN_BY_NAMEHASH,\n        args: (arg, t)=>[\n                arg(addr, t.Address),\n                arg(nameHash, t.String)\n            ]\n    });\n}\nconst GET_DOMAIN_BY_NAMEHASH = '\\nimport Domains from 0xDomains\\nimport NonFungibleToken from 0xNonFungibleToken\\n\\npub fun main(account: Address, nameHash: String): Domains.DomainInfo {\\n  let capability = getAccount(account).getCapability<&Domains.Collection{NonFungibleToken.CollectionPublic, Domains.CollectionPublic}>(Domains.DomainsPublicPath)\\n  let collection = capability.borrow() ?? panic(\"Collection capability could not be borrowed\")\\n\\n  let id = Domains.nameHashToIDs[nameHash]\\n  if id == nil {\\n    panic(\"Domain not found\")\\n  }\\n\\n  let domain = collection.borrowDomain(id: id!)\\n  let domainInfo = domain.getInfo()\\n  return domainInfo\\n}\\n';\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9mbG93L3NjcmlwdHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFtQztBQUU1QixlQUFlQyxtQkFBbUJDLElBQUksRUFBRTtJQUM3QyxPQUFPRiw4Q0FBUyxDQUFDO1FBQ2ZJLFNBQVNDO1FBQ1RDLE1BQU0sQ0FBQ0MsS0FBS0MsSUFBTTtnQkFBQ0QsSUFBSUwsTUFBTU0sRUFBRUMsT0FBTzthQUFFO0lBQzFDO0FBQ0YsQ0FBQztBQUVELE1BQU1KLGlCQUFrQjtBQVVqQixlQUFlSyxvQkFBb0I7SUFDeEMsT0FBT1YsOENBQVMsQ0FBQztRQUNmSSxTQUFTTztJQUNYO0FBQ0YsQ0FBQztBQUVELE1BQU1BLHVCQUF3QjtBQXNCdkIsZUFBZUMsaUJBQWlCQyxJQUFJLEVBQUU7SUFDM0MsT0FBT2IsOENBQVMsQ0FBQztRQUNmSSxTQUFTVTtRQUNUUixNQUFNLENBQUNDLEtBQUtDLElBQU07Z0JBQUNELElBQUlNLE1BQU1MLEVBQUVPLE1BQU07YUFBRTtJQUN6QztBQUNGLENBQUM7QUFFRCxNQUFNRCxxQkFBc0I7QUFRckIsZUFBZUUsWUFBWUgsSUFBSSxFQUFFSSxRQUFRLEVBQUU7SUFDaEQsT0FBT2pCLDhDQUFTLENBQUM7UUFDZkksU0FBU2M7UUFDVFosTUFBTSxDQUFDQyxLQUFLQyxJQUFNO2dCQUFDRCxJQUFJTSxNQUFNTCxFQUFFTyxNQUFNO2dCQUFHUixJQUFJVSxVQUFVVCxFQUFFVyxNQUFNO2FBQUU7SUFDbEU7QUFDRixDQUFDO0FBRUQsTUFBTUQsZ0JBQWlCO0FBUWhCLGVBQWVFLGlCQUFpQmxCLElBQUksRUFBRTtJQUMzQyxPQUFPRiw4Q0FBUyxDQUFDO1FBQ2ZJLFNBQVNpQjtRQUNUZixNQUFNLENBQUNDLEtBQUtDLElBQU07Z0JBQUNELElBQUlMLE1BQU1NLEVBQUVDLE9BQU87YUFBRTtJQUMxQztBQUNGLENBQUM7QUFFRCxNQUFNWSxzQkFBdUI7QUFxQnRCLGVBQWVDLHdCQUF3QnBCLElBQUksRUFBRXFCLFFBQVEsRUFBRTtJQUM1RCxPQUFPdkIsOENBQVMsQ0FBQztRQUNmSSxTQUFTb0I7UUFDVGxCLE1BQU0sQ0FBQ0MsS0FBS0MsSUFBTTtnQkFBQ0QsSUFBSUwsTUFBTU0sRUFBRUMsT0FBTztnQkFBR0YsSUFBSWdCLFVBQVVmLEVBQUVPLE1BQU07YUFBRTtJQUNuRTtBQUNGLENBQUM7QUFFRCxNQUFNUyx5QkFBMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vZmxvdy9zY3JpcHRzLmpzPzcyZDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZmNsIGZyb20gXCJAb25mbG93L2ZjbFwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrSXNJbml0aWFsaXplZChhZGRyKSB7XHJcbiAgcmV0dXJuIGZjbC5xdWVyeSh7XHJcbiAgICBjYWRlbmNlOiBJU19JTklUSUFMSVpFRCxcclxuICAgIGFyZ3M6IChhcmcsIHQpID0+IFthcmcoYWRkciwgdC5BZGRyZXNzKV0sXHJcbiAgfSk7XHJcbn1cclxuXHJcbmNvbnN0IElTX0lOSVRJQUxJWkVEID0gYFxyXG5pbXBvcnQgRG9tYWlucyBmcm9tIDB4RG9tYWluc1xyXG5pbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlblxyXG5cclxucHViIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiBCb29sIHtcclxuICAgIGxldCBjYXBhYmlsaXR5ID0gZ2V0QWNjb3VudChhY2NvdW50KS5nZXRDYXBhYmlsaXR5PCZEb21haW5zLkNvbGxlY3Rpb257Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljLCBEb21haW5zLkNvbGxlY3Rpb25QdWJsaWN9PihEb21haW5zLkRvbWFpbnNQdWJsaWNQYXRoKVxyXG4gICAgcmV0dXJuIGNhcGFiaWxpdHkuY2hlY2soKVxyXG59XHJcbmA7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWxsRG9tYWluSW5mb3MoKSB7XHJcbiAgcmV0dXJuIGZjbC5xdWVyeSh7XHJcbiAgICBjYWRlbmNlOiBHRVRfQUxMX0RPTUFJTl9JTkZPUyxcclxuICB9KTtcclxufVxyXG5cclxuY29uc3QgR0VUX0FMTF9ET01BSU5fSU5GT1MgPSBgXHJcbmltcG9ydCBEb21haW5zIGZyb20gMHhEb21haW5zXHJcblxyXG5wdWIgZnVuIG1haW4oKTogW0RvbWFpbnMuRG9tYWluSW5mb10ge1xyXG4gICAgbGV0IGFsbE93bmVycyA9IERvbWFpbnMuZ2V0QWxsT3duZXJzKClcclxuICAgIGxldCBpbmZvczogW0RvbWFpbnMuRG9tYWluSW5mb10gPSBbXVxyXG5cclxuICAgIGZvciBuYW1lSGFzaCBpbiBhbGxPd25lcnMua2V5cyB7XHJcbiAgICAgICAgbGV0IHB1YmxpY0NhcCA9IGdldEFjY291bnQoYWxsT3duZXJzW25hbWVIYXNoXSEpLmdldENhcGFiaWxpdHk8JkRvbWFpbnMuQ29sbGVjdGlvbntEb21haW5zLkNvbGxlY3Rpb25QdWJsaWN9PihEb21haW5zLkRvbWFpbnNQdWJsaWNQYXRoKVxyXG4gICAgICAgIGxldCBjb2xsZWN0aW9uID0gcHVibGljQ2FwLmJvcnJvdygpIVxyXG4gICAgICAgIGxldCBpZCA9IERvbWFpbnMubmFtZUhhc2hUb0lEc1tuYW1lSGFzaF1cclxuICAgICAgICBpZiBpZCAhPSBuaWwge1xyXG4gICAgICAgICAgICBsZXQgZG9tYWluID0gY29sbGVjdGlvbi5ib3Jyb3dEb21haW4oaWQ6IGlkISlcclxuICAgICAgICAgICAgbGV0IGRvbWFpbkluZm8gPSBkb21haW4uZ2V0SW5mbygpXHJcbiAgICAgICAgICAgIGluZm9zLmFwcGVuZChkb21haW5JbmZvKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5mb3NcclxufVxyXG5gO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrSXNBdmFpbGFibGUobmFtZSkge1xyXG4gIHJldHVybiBmY2wucXVlcnkoe1xyXG4gICAgY2FkZW5jZTogQ0hFQ0tfSVNfQVZBSUxBQkxFLFxyXG4gICAgYXJnczogKGFyZywgdCkgPT4gW2FyZyhuYW1lLCB0LlN0cmluZyldLFxyXG4gIH0pO1xyXG59XHJcblxyXG5jb25zdCBDSEVDS19JU19BVkFJTEFCTEUgPSBgXHJcbmltcG9ydCBEb21haW5zIGZyb20gMHhEb21haW5zXHJcblxyXG5wdWIgZnVuIG1haW4obmFtZTogU3RyaW5nKTogQm9vbCB7XHJcbiAgcmV0dXJuIERvbWFpbnMuaXNBdmFpbGFibGUobmFtZUhhc2g6IG5hbWUpXHJcbn1cclxuYDtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSZW50Q29zdChuYW1lLCBkdXJhdGlvbikge1xyXG4gIHJldHVybiBmY2wucXVlcnkoe1xyXG4gICAgY2FkZW5jZTogR0VUX1JFTlRfQ09TVCxcclxuICAgIGFyZ3M6IChhcmcsIHQpID0+IFthcmcobmFtZSwgdC5TdHJpbmcpLCBhcmcoZHVyYXRpb24sIHQuVUZpeDY0KV0sXHJcbiAgfSk7XHJcbn1cclxuXHJcbmNvbnN0IEdFVF9SRU5UX0NPU1QgPSBgXHJcbmltcG9ydCBEb21haW5zIGZyb20gMHhEb21haW5zXHJcblxyXG5wdWIgZnVuIG1haW4obmFtZTogU3RyaW5nLCBkdXJhdGlvbjogVUZpeDY0KTogVUZpeDY0IHtcclxuICByZXR1cm4gRG9tYWlucy5nZXRSZW50Q29zdChuYW1lOiBuYW1lLCBkdXJhdGlvbjogZHVyYXRpb24pXHJcbn1cclxuYDtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNeURvbWFpbkluZm9zKGFkZHIpIHtcclxuICByZXR1cm4gZmNsLnF1ZXJ5KHtcclxuICAgIGNhZGVuY2U6IEdFVF9NWV9ET01BSU5fSU5GT1MsXHJcbiAgICBhcmdzOiAoYXJnLCB0KSA9PiBbYXJnKGFkZHIsIHQuQWRkcmVzcyldLFxyXG4gIH0pO1xyXG59XHJcblxyXG5jb25zdCBHRVRfTVlfRE9NQUlOX0lORk9TID0gYFxyXG5pbXBvcnQgRG9tYWlucyBmcm9tIDB4RG9tYWluc1xyXG5pbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlblxyXG5cclxucHViIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiBbRG9tYWlucy5Eb21haW5JbmZvXSB7XHJcbiAgICBsZXQgY2FwYWJpbGl0eSA9IGdldEFjY291bnQoYWNjb3VudCkuZ2V0Q2FwYWJpbGl0eTwmRG9tYWlucy5Db2xsZWN0aW9ue05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpYywgRG9tYWlucy5Db2xsZWN0aW9uUHVibGljfT4oRG9tYWlucy5Eb21haW5zUHVibGljUGF0aClcclxuICAgIGxldCBjb2xsZWN0aW9uID0gY2FwYWJpbGl0eS5ib3Jyb3coKSA/PyBwYW5pYyhcIkNvbGxlY3Rpb24gY2FwYWJpbGl0eSBjb3VsZCBub3QgYmUgYm9ycm93ZWRcIilcclxuXHJcbiAgICBsZXQgaWRzID0gY29sbGVjdGlvbi5nZXRJRHMoKVxyXG4gICAgbGV0IGluZm9zOiBbRG9tYWlucy5Eb21haW5JbmZvXSA9IFtdXHJcblxyXG4gICAgZm9yIGlkIGluIGlkcyB7XHJcbiAgICAgICAgbGV0IGRvbWFpbiA9IGNvbGxlY3Rpb24uYm9ycm93RG9tYWluKGlkOiBpZCEpXHJcbiAgICAgICAgbGV0IGRvbWFpbkluZm8gPSBkb21haW4uZ2V0SW5mbygpXHJcbiAgICAgICAgaW5mb3MuYXBwZW5kKGRvbWFpbkluZm8pXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGluZm9zXHJcbn1cclxuYDtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREb21haW5JbmZvQnlOYW1lSGFzaChhZGRyLCBuYW1lSGFzaCkge1xyXG4gIHJldHVybiBmY2wucXVlcnkoe1xyXG4gICAgY2FkZW5jZTogR0VUX0RPTUFJTl9CWV9OQU1FSEFTSCxcclxuICAgIGFyZ3M6IChhcmcsIHQpID0+IFthcmcoYWRkciwgdC5BZGRyZXNzKSwgYXJnKG5hbWVIYXNoLCB0LlN0cmluZyldLFxyXG4gIH0pO1xyXG59XHJcblxyXG5jb25zdCBHRVRfRE9NQUlOX0JZX05BTUVIQVNIID0gYFxyXG5pbXBvcnQgRG9tYWlucyBmcm9tIDB4RG9tYWluc1xyXG5pbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlblxyXG5cclxucHViIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MsIG5hbWVIYXNoOiBTdHJpbmcpOiBEb21haW5zLkRvbWFpbkluZm8ge1xyXG4gIGxldCBjYXBhYmlsaXR5ID0gZ2V0QWNjb3VudChhY2NvdW50KS5nZXRDYXBhYmlsaXR5PCZEb21haW5zLkNvbGxlY3Rpb257Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljLCBEb21haW5zLkNvbGxlY3Rpb25QdWJsaWN9PihEb21haW5zLkRvbWFpbnNQdWJsaWNQYXRoKVxyXG4gIGxldCBjb2xsZWN0aW9uID0gY2FwYWJpbGl0eS5ib3Jyb3coKSA/PyBwYW5pYyhcIkNvbGxlY3Rpb24gY2FwYWJpbGl0eSBjb3VsZCBub3QgYmUgYm9ycm93ZWRcIilcclxuXHJcbiAgbGV0IGlkID0gRG9tYWlucy5uYW1lSGFzaFRvSURzW25hbWVIYXNoXVxyXG4gIGlmIGlkID09IG5pbCB7XHJcbiAgICBwYW5pYyhcIkRvbWFpbiBub3QgZm91bmRcIilcclxuICB9XHJcblxyXG4gIGxldCBkb21haW4gPSBjb2xsZWN0aW9uLmJvcnJvd0RvbWFpbihpZDogaWQhKVxyXG4gIGxldCBkb21haW5JbmZvID0gZG9tYWluLmdldEluZm8oKVxyXG4gIHJldHVybiBkb21haW5JbmZvXHJcbn1cclxuYDsiXSwibmFtZXMiOlsiZmNsIiwiY2hlY2tJc0luaXRpYWxpemVkIiwiYWRkciIsInF1ZXJ5IiwiY2FkZW5jZSIsIklTX0lOSVRJQUxJWkVEIiwiYXJncyIsImFyZyIsInQiLCJBZGRyZXNzIiwiZ2V0QWxsRG9tYWluSW5mb3MiLCJHRVRfQUxMX0RPTUFJTl9JTkZPUyIsImNoZWNrSXNBdmFpbGFibGUiLCJuYW1lIiwiQ0hFQ0tfSVNfQVZBSUxBQkxFIiwiU3RyaW5nIiwiZ2V0UmVudENvc3QiLCJkdXJhdGlvbiIsIkdFVF9SRU5UX0NPU1QiLCJVRml4NjQiLCJnZXRNeURvbWFpbkluZm9zIiwiR0VUX01ZX0RPTUFJTl9JTkZPUyIsImdldERvbWFpbkluZm9CeU5hbWVIYXNoIiwibmFtZUhhc2giLCJHRVRfRE9NQUlOX0JZX05BTUVIQVNIIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./flow/scripts.js\n"));

/***/ }),

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contexts/AuthContext */ \"./contexts/AuthContext.js\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../styles/globals.css */ \"./styles/globals.css\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_css__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nfunction MyApp(param) {\n    let { Component , pageProps  } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n            ...pageProps\n        }, void 0, false, {\n            fileName: \"D:\\\\Projects-Of-Blockchain\\\\flow-name-service-tatpar\\\\web\\\\pages\\\\_app.js\",\n            lineNumber: 7,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"D:\\\\Projects-Of-Blockchain\\\\flow-name-service-tatpar\\\\web\\\\pages\\\\_app.js\",\n        lineNumber: 6,\n        columnNumber: 5\n    }, this);\n}\n_c = MyApp;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MyApp);\nvar _c;\n$RefreshReg$(_c, \"MyApp\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUQ7QUFDcEI7QUFFL0IsU0FBU0MsTUFBTSxLQUF3QixFQUFFO1FBQTFCLEVBQUVDLFVBQVMsRUFBRUMsVUFBUyxFQUFFLEdBQXhCO0lBQ2IscUJBQ0UsOERBQUNILDZEQUFZQTtrQkFDWCw0RUFBQ0U7WUFBVyxHQUFHQyxTQUFTOzs7Ozs7Ozs7OztBQUc5QjtLQU5TRjtBQVFULCtEQUFlQSxLQUFLQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3BhZ2VzL19hcHAuanM/ZTBhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXV0aFByb3ZpZGVyIGZyb20gXCIuLi9jb250ZXh0cy9BdXRoQ29udGV4dFwiO1xuaW1wb3J0IFwiLi4vc3R5bGVzL2dsb2JhbHMuY3NzXCI7XG5cbmZ1bmN0aW9uIE15QXBwKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfSkge1xuICByZXR1cm4gKFxuICAgIDxBdXRoUHJvdmlkZXI+XG4gICAgICA8Q29tcG9uZW50IHsuLi5wYWdlUHJvcHN9IC8+XG4gICAgPC9BdXRoUHJvdmlkZXI+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE15QXBwOyJdLCJuYW1lcyI6WyJBdXRoUHJvdmlkZXIiLCJNeUFwcCIsIkNvbXBvbmVudCIsInBhZ2VQcm9wcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/_app.js\n"));

/***/ }),

/***/ "./node_modules/queue-microtask/index.js":
/*!***********************************************!*\
  !*** ./node_modules/queue-microtask/index.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : __webpack_require__.g)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVldWUtbWljcm90YXNrL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQSxpRUFBaUUscUJBQU07QUFDdkU7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3F1ZXVlLW1pY3JvdGFzay9pbmRleC5qcz85YzM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBxdWV1ZS1taWNyb3Rhc2suIE1JVCBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmxldCBwcm9taXNlXG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHF1ZXVlTWljcm90YXNrID09PSAnZnVuY3Rpb24nXG4gID8gcXVldWVNaWNyb3Rhc2suYmluZCh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbiAgLy8gcmV1c2UgcmVzb2x2ZWQgcHJvbWlzZSwgYW5kIGFsbG9jYXRlIGl0IGxhemlseVxuICA6IGNiID0+IChwcm9taXNlIHx8IChwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkpKVxuICAgIC50aGVuKGNiKVxuICAgIC5jYXRjaChlcnIgPT4gc2V0VGltZW91dCgoKSA9PiB7IHRocm93IGVyciB9LCAwKSlcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/queue-microtask/index.js\n"));

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV$1 =  jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV$1;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx1SkFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz81Nzc3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "./node_modules/sha3/index.js":
/*!************************************!*\
  !*** ./node_modules/sha3/index.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:true}));exports[\"default\"]=exports.SHAKE=exports.SHA3Hash=exports.SHA3=exports.Keccak=void 0;var _buffer=__webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");var _sponge=_interopRequireDefault(__webpack_require__(/*! ./sponge */ \"./node_modules/sha3/sponge/index.js\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var createHash=function createHash(_ref){var allowedSizes=_ref.allowedSizes,defaultSize=_ref.defaultSize,padding=_ref.padding;return function Hash(){var _this=this;var size=arguments.length>0&&arguments[0]!==undefined?arguments[0]:defaultSize;if(!this||this.constructor!==Hash){return new Hash(size)}if(allowedSizes&&!allowedSizes.includes(size)){throw new Error(\"Unsupported hash length\")}var sponge=new _sponge[\"default\"]({capacity:size});this.update=function(input){var encoding=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"utf8\";if(_buffer.Buffer.isBuffer(input)){sponge.absorb(input);return _this}if(typeof input===\"string\"){return _this.update(_buffer.Buffer.from(input,encoding))}throw new TypeError(\"Not a string or buffer\")};this.digest=function(){var formatOrOptions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"binary\";var options=typeof formatOrOptions===\"string\"?{format:formatOrOptions}:formatOrOptions;var buffer=sponge.squeeze({buffer:options.buffer,padding:options.padding||padding});if(options.format&&options.format!==\"binary\"){return buffer.toString(options.format)}return buffer};this.reset=function(){sponge.reset();return _this};return this}};var Keccak=createHash({allowedSizes:[224,256,384,512],defaultSize:512,padding:1});exports.Keccak=Keccak;var SHA3=createHash({allowedSizes:[224,256,384,512],defaultSize:512,padding:6});exports.SHA3=SHA3;var SHAKE=createHash({allowedSizes:[128,256],defaultSize:256,padding:31});exports.SHAKE=SHAKE;var SHA3Hash=Keccak;exports.SHA3Hash=SHA3Hash;SHA3.SHA3Hash=SHA3Hash;var _default=SHA3;exports[\"default\"]=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhMy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYSw4Q0FBMkMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLGNBQWMsUUFBUSxZQUFZLG1CQUFPLENBQUMsOENBQVEsRUFBRSxtQ0FBbUMsbUJBQU8sQ0FBQyxxREFBVSxHQUFHLHFDQUFxQyxnQ0FBZ0MsZUFBZSx5Q0FBeUMscUZBQXFGLHVCQUF1QixlQUFlLCtFQUErRSxtQ0FBbUMsc0JBQXNCLCtDQUErQywyQ0FBMkMsbUNBQW1DLGNBQWMsRUFBRSw0QkFBNEIsOEVBQThFLG1DQUFtQyxxQkFBcUIsYUFBYSw0QkFBNEIseURBQXlELCtDQUErQyx1QkFBdUIsdUZBQXVGLCtDQUErQyx1QkFBdUIsaUJBQWlCLDJCQUEyQix1REFBdUQsRUFBRSw4Q0FBOEMsdUNBQXVDLGVBQWUsc0JBQXNCLGVBQWUsY0FBYyxjQUFjLHVCQUF1Qix5REFBeUQsRUFBRSxjQUFjLFFBQVEscUJBQXFCLHlEQUF5RCxFQUFFLFlBQVksTUFBTSxzQkFBc0Isa0RBQWtELEVBQUUsYUFBYSxPQUFPLG9CQUFvQixnQkFBZ0IsVUFBVSx1QkFBdUIsa0JBQWtCLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc2hhMy9pbmRleC5qcz8wYzg1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09ZXhwb3J0cy5TSEFLRT1leHBvcnRzLlNIQTNIYXNoPWV4cG9ydHMuU0hBMz1leHBvcnRzLktlY2Nhaz12b2lkIDA7dmFyIF9idWZmZXI9cmVxdWlyZShcImJ1ZmZlclwiKTt2YXIgX3Nwb25nZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Nwb25nZVwiKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7XCJkZWZhdWx0XCI6b2JqfX12YXIgY3JlYXRlSGFzaD1mdW5jdGlvbiBjcmVhdGVIYXNoKF9yZWYpe3ZhciBhbGxvd2VkU2l6ZXM9X3JlZi5hbGxvd2VkU2l6ZXMsZGVmYXVsdFNpemU9X3JlZi5kZWZhdWx0U2l6ZSxwYWRkaW5nPV9yZWYucGFkZGluZztyZXR1cm4gZnVuY3Rpb24gSGFzaCgpe3ZhciBfdGhpcz10aGlzO3ZhciBzaXplPWFyZ3VtZW50cy5sZW5ndGg+MCYmYXJndW1lbnRzWzBdIT09dW5kZWZpbmVkP2FyZ3VtZW50c1swXTpkZWZhdWx0U2l6ZTtpZighdGhpc3x8dGhpcy5jb25zdHJ1Y3RvciE9PUhhc2gpe3JldHVybiBuZXcgSGFzaChzaXplKX1pZihhbGxvd2VkU2l6ZXMmJiFhbGxvd2VkU2l6ZXMuaW5jbHVkZXMoc2l6ZSkpe3Rocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGhhc2ggbGVuZ3RoXCIpfXZhciBzcG9uZ2U9bmV3IF9zcG9uZ2VbXCJkZWZhdWx0XCJdKHtjYXBhY2l0eTpzaXplfSk7dGhpcy51cGRhdGU9ZnVuY3Rpb24oaW5wdXQpe3ZhciBlbmNvZGluZz1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMV06XCJ1dGY4XCI7aWYoX2J1ZmZlci5CdWZmZXIuaXNCdWZmZXIoaW5wdXQpKXtzcG9uZ2UuYWJzb3JiKGlucHV0KTtyZXR1cm4gX3RoaXN9aWYodHlwZW9mIGlucHV0PT09XCJzdHJpbmdcIil7cmV0dXJuIF90aGlzLnVwZGF0ZShfYnVmZmVyLkJ1ZmZlci5mcm9tKGlucHV0LGVuY29kaW5nKSl9dGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vdCBhIHN0cmluZyBvciBidWZmZXJcIil9O3RoaXMuZGlnZXN0PWZ1bmN0aW9uKCl7dmFyIGZvcm1hdE9yT3B0aW9ucz1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMF06XCJiaW5hcnlcIjt2YXIgb3B0aW9ucz10eXBlb2YgZm9ybWF0T3JPcHRpb25zPT09XCJzdHJpbmdcIj97Zm9ybWF0OmZvcm1hdE9yT3B0aW9uc306Zm9ybWF0T3JPcHRpb25zO3ZhciBidWZmZXI9c3BvbmdlLnNxdWVlemUoe2J1ZmZlcjpvcHRpb25zLmJ1ZmZlcixwYWRkaW5nOm9wdGlvbnMucGFkZGluZ3x8cGFkZGluZ30pO2lmKG9wdGlvbnMuZm9ybWF0JiZvcHRpb25zLmZvcm1hdCE9PVwiYmluYXJ5XCIpe3JldHVybiBidWZmZXIudG9TdHJpbmcob3B0aW9ucy5mb3JtYXQpfXJldHVybiBidWZmZXJ9O3RoaXMucmVzZXQ9ZnVuY3Rpb24oKXtzcG9uZ2UucmVzZXQoKTtyZXR1cm4gX3RoaXN9O3JldHVybiB0aGlzfX07dmFyIEtlY2Nhaz1jcmVhdGVIYXNoKHthbGxvd2VkU2l6ZXM6WzIyNCwyNTYsMzg0LDUxMl0sZGVmYXVsdFNpemU6NTEyLHBhZGRpbmc6MX0pO2V4cG9ydHMuS2VjY2FrPUtlY2Nhazt2YXIgU0hBMz1jcmVhdGVIYXNoKHthbGxvd2VkU2l6ZXM6WzIyNCwyNTYsMzg0LDUxMl0sZGVmYXVsdFNpemU6NTEyLHBhZGRpbmc6Nn0pO2V4cG9ydHMuU0hBMz1TSEEzO3ZhciBTSEFLRT1jcmVhdGVIYXNoKHthbGxvd2VkU2l6ZXM6WzEyOCwyNTZdLGRlZmF1bHRTaXplOjI1NixwYWRkaW5nOjMxfSk7ZXhwb3J0cy5TSEFLRT1TSEFLRTt2YXIgU0hBM0hhc2g9S2VjY2FrO2V4cG9ydHMuU0hBM0hhc2g9U0hBM0hhc2g7U0hBMy5TSEEzSGFzaD1TSEEzSGFzaDt2YXIgX2RlZmF1bHQ9U0hBMztleHBvcnRzW1wiZGVmYXVsdFwiXT1fZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sha3/index.js\n"));

/***/ }),

/***/ "./node_modules/sha3/sponge/index.js":
/*!*******************************************!*\
  !*** ./node_modules/sha3/sponge/index.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:true}));exports[\"default\"]=void 0;var _buffer=__webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");var _permute=_interopRequireDefault(__webpack_require__(/*! ./permute */ \"./node_modules/sha3/sponge/permute/index.js\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var xorWords=function xorWords(I,O){for(var i=0;i<I.length;i+=8){var o=i/4;O[o]^=I[i+7]<<24|I[i+6]<<16|I[i+5]<<8|I[i+4];O[o+1]^=I[i+3]<<24|I[i+2]<<16|I[i+1]<<8|I[i]}return O};var readWords=function readWords(I,O){for(var o=0;o<O.length;o+=8){var i=o/4;O[o]=I[i+1];O[o+1]=I[i+1]>>>8;O[o+2]=I[i+1]>>>16;O[o+3]=I[i+1]>>>24;O[o+4]=I[i];O[o+5]=I[i]>>>8;O[o+6]=I[i]>>>16;O[o+7]=I[i]>>>24}return O};var Sponge=function Sponge(_ref){var _this=this;var capacity=_ref.capacity,padding=_ref.padding;var keccak=(0,_permute[\"default\"])();var stateSize=200;var blockSize=capacity/8;var queueSize=stateSize-capacity/4;var queueOffset=0;var state=new Uint32Array(stateSize/4);var queue=_buffer.Buffer.allocUnsafe(queueSize);this.absorb=function(buffer){for(var i=0;i<buffer.length;i++){queue[queueOffset]=buffer[i];queueOffset+=1;if(queueOffset>=queueSize){xorWords(queue,state);keccak(state);queueOffset=0}}return _this};this.squeeze=function(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var output={buffer:options.buffer||_buffer.Buffer.allocUnsafe(blockSize),padding:options.padding||padding,queue:_buffer.Buffer.allocUnsafe(queue.length),state:new Uint32Array(state.length)};queue.copy(output.queue);for(var i=0;i<state.length;i++){output.state[i]=state[i]}output.queue.fill(0,queueOffset);output.queue[queueOffset]|=output.padding;output.queue[queueSize-1]|=128;xorWords(output.queue,output.state);for(var offset=0;offset<output.buffer.length;offset+=queueSize){keccak(output.state);readWords(output.state,output.buffer.slice(offset,offset+queueSize))}return output.buffer};this.reset=function(){queue.fill(0);state.fill(0);queueOffset=0;return _this};return this};var _default=Sponge;exports[\"default\"]=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWEsOENBQTJDLENBQUMsV0FBVyxFQUFDLENBQUMsa0JBQWtCLFFBQVEsWUFBWSxtQkFBTyxDQUFDLDhDQUFRLEVBQUUsb0NBQW9DLG1CQUFPLENBQUMsOERBQVcsR0FBRyxxQ0FBcUMsZ0NBQWdDLGVBQWUsb0NBQW9DLFlBQVksV0FBVyxNQUFNLFVBQVUsNkNBQTZDLDZDQUE2QyxVQUFVLHNDQUFzQyxZQUFZLFdBQVcsTUFBTSxVQUFVLFlBQVksa0JBQWtCLG1CQUFtQixtQkFBbUIsWUFBWSxnQkFBZ0IsaUJBQWlCLGlCQUFpQixVQUFVLGlDQUFpQyxlQUFlLGdEQUFnRCxxQ0FBcUMsa0JBQWtCLHlCQUF5QixtQ0FBbUMsa0JBQWtCLHVDQUF1QyxnREFBZ0QsNkJBQTZCLFlBQVksZ0JBQWdCLEtBQUssNkJBQTZCLGVBQWUsMkJBQTJCLHNCQUFzQixjQUFjLGVBQWUsY0FBYyx3QkFBd0IseUVBQXlFLFlBQVksa0xBQWtMLHlCQUF5QixZQUFZLGVBQWUsS0FBSyx5QkFBeUIsaUNBQWlDLDBDQUEwQywrQkFBK0Isb0NBQW9DLGlCQUFpQiw0QkFBNEIsbUJBQW1CLHFCQUFxQixxRUFBcUUsc0JBQXNCLHNCQUFzQixjQUFjLGNBQWMsY0FBYyxjQUFjLGFBQWEsb0JBQW9CLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvaW5kZXguanM/ODU4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDt2YXIgX2J1ZmZlcj1yZXF1aXJlKFwiYnVmZmVyXCIpO3ZhciBfcGVybXV0ZT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Blcm11dGVcIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e1wiZGVmYXVsdFwiOm9ian19dmFyIHhvcldvcmRzPWZ1bmN0aW9uIHhvcldvcmRzKEksTyl7Zm9yKHZhciBpPTA7aTxJLmxlbmd0aDtpKz04KXt2YXIgbz1pLzQ7T1tvXV49SVtpKzddPDwyNHxJW2krNl08PDE2fElbaSs1XTw8OHxJW2krNF07T1tvKzFdXj1JW2krM108PDI0fElbaSsyXTw8MTZ8SVtpKzFdPDw4fElbaV19cmV0dXJuIE99O3ZhciByZWFkV29yZHM9ZnVuY3Rpb24gcmVhZFdvcmRzKEksTyl7Zm9yKHZhciBvPTA7bzxPLmxlbmd0aDtvKz04KXt2YXIgaT1vLzQ7T1tvXT1JW2krMV07T1tvKzFdPUlbaSsxXT4+Pjg7T1tvKzJdPUlbaSsxXT4+PjE2O09bbyszXT1JW2krMV0+Pj4yNDtPW28rNF09SVtpXTtPW28rNV09SVtpXT4+Pjg7T1tvKzZdPUlbaV0+Pj4xNjtPW28rN109SVtpXT4+PjI0fXJldHVybiBPfTt2YXIgU3BvbmdlPWZ1bmN0aW9uIFNwb25nZShfcmVmKXt2YXIgX3RoaXM9dGhpczt2YXIgY2FwYWNpdHk9X3JlZi5jYXBhY2l0eSxwYWRkaW5nPV9yZWYucGFkZGluZzt2YXIga2VjY2FrPSgwLF9wZXJtdXRlW1wiZGVmYXVsdFwiXSkoKTt2YXIgc3RhdGVTaXplPTIwMDt2YXIgYmxvY2tTaXplPWNhcGFjaXR5Lzg7dmFyIHF1ZXVlU2l6ZT1zdGF0ZVNpemUtY2FwYWNpdHkvNDt2YXIgcXVldWVPZmZzZXQ9MDt2YXIgc3RhdGU9bmV3IFVpbnQzMkFycmF5KHN0YXRlU2l6ZS80KTt2YXIgcXVldWU9X2J1ZmZlci5CdWZmZXIuYWxsb2NVbnNhZmUocXVldWVTaXplKTt0aGlzLmFic29yYj1mdW5jdGlvbihidWZmZXIpe2Zvcih2YXIgaT0wO2k8YnVmZmVyLmxlbmd0aDtpKyspe3F1ZXVlW3F1ZXVlT2Zmc2V0XT1idWZmZXJbaV07cXVldWVPZmZzZXQrPTE7aWYocXVldWVPZmZzZXQ+PXF1ZXVlU2l6ZSl7eG9yV29yZHMocXVldWUsc3RhdGUpO2tlY2NhayhzdGF0ZSk7cXVldWVPZmZzZXQ9MH19cmV0dXJuIF90aGlzfTt0aGlzLnNxdWVlemU9ZnVuY3Rpb24oKXt2YXIgb3B0aW9ucz1hcmd1bWVudHMubGVuZ3RoPjAmJmFyZ3VtZW50c1swXSE9PXVuZGVmaW5lZD9hcmd1bWVudHNbMF06e307dmFyIG91dHB1dD17YnVmZmVyOm9wdGlvbnMuYnVmZmVyfHxfYnVmZmVyLkJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja1NpemUpLHBhZGRpbmc6b3B0aW9ucy5wYWRkaW5nfHxwYWRkaW5nLHF1ZXVlOl9idWZmZXIuQnVmZmVyLmFsbG9jVW5zYWZlKHF1ZXVlLmxlbmd0aCksc3RhdGU6bmV3IFVpbnQzMkFycmF5KHN0YXRlLmxlbmd0aCl9O3F1ZXVlLmNvcHkob3V0cHV0LnF1ZXVlKTtmb3IodmFyIGk9MDtpPHN0YXRlLmxlbmd0aDtpKyspe291dHB1dC5zdGF0ZVtpXT1zdGF0ZVtpXX1vdXRwdXQucXVldWUuZmlsbCgwLHF1ZXVlT2Zmc2V0KTtvdXRwdXQucXVldWVbcXVldWVPZmZzZXRdfD1vdXRwdXQucGFkZGluZztvdXRwdXQucXVldWVbcXVldWVTaXplLTFdfD0xMjg7eG9yV29yZHMob3V0cHV0LnF1ZXVlLG91dHB1dC5zdGF0ZSk7Zm9yKHZhciBvZmZzZXQ9MDtvZmZzZXQ8b3V0cHV0LmJ1ZmZlci5sZW5ndGg7b2Zmc2V0Kz1xdWV1ZVNpemUpe2tlY2NhayhvdXRwdXQuc3RhdGUpO3JlYWRXb3JkcyhvdXRwdXQuc3RhdGUsb3V0cHV0LmJ1ZmZlci5zbGljZShvZmZzZXQsb2Zmc2V0K3F1ZXVlU2l6ZSkpfXJldHVybiBvdXRwdXQuYnVmZmVyfTt0aGlzLnJlc2V0PWZ1bmN0aW9uKCl7cXVldWUuZmlsbCgwKTtzdGF0ZS5maWxsKDApO3F1ZXVlT2Zmc2V0PTA7cmV0dXJuIF90aGlzfTtyZXR1cm4gdGhpc307dmFyIF9kZWZhdWx0PVNwb25nZTtleHBvcnRzW1wiZGVmYXVsdFwiXT1fZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sha3/sponge/index.js\n"));

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/chi/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/chi/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:true}));exports[\"default\"]=void 0;var _copy=_interopRequireDefault(__webpack_require__(/*! ../copy */ \"./node_modules/sha3/sponge/permute/copy/index.js\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var chi=function chi(_ref){var A=_ref.A,C=_ref.C;for(var y=0;y<25;y+=5){for(var x=0;x<5;x++){(0,_copy[\"default\"])(A,y+x)(C,x)}for(var _x=0;_x<5;_x++){var xy=(y+_x)*2;var x1=(_x+1)%5*2;var x2=(_x+2)%5*2;A[xy]^=~C[x1]&C[x2];A[xy+1]^=~C[x1+1]&C[x2+1]}}};var _default=chi;exports[\"default\"]=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS9jaGkvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWEsOENBQTJDLENBQUMsV0FBVyxFQUFDLENBQUMsa0JBQWtCLFFBQVEsaUNBQWlDLG1CQUFPLENBQUMsaUVBQVMsR0FBRyxxQ0FBcUMsZ0NBQWdDLGVBQWUsMkJBQTJCLHNCQUFzQixZQUFZLEtBQUssTUFBTSxZQUFZLElBQUksS0FBSyxpQ0FBaUMsYUFBYSxLQUFLLE1BQU0sZ0JBQWdCLGtCQUFrQixrQkFBa0Isb0JBQW9CLDZCQUE2QixpQkFBaUIsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zaGEzL3Nwb25nZS9wZXJtdXRlL2NoaS9pbmRleC5qcz9jNjQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09dm9pZCAwO3ZhciBfY29weT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb3B5XCIpKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntcImRlZmF1bHRcIjpvYmp9fXZhciBjaGk9ZnVuY3Rpb24gY2hpKF9yZWYpe3ZhciBBPV9yZWYuQSxDPV9yZWYuQztmb3IodmFyIHk9MDt5PDI1O3krPTUpe2Zvcih2YXIgeD0wO3g8NTt4KyspeygwLF9jb3B5W1wiZGVmYXVsdFwiXSkoQSx5K3gpKEMseCl9Zm9yKHZhciBfeD0wO194PDU7X3grKyl7dmFyIHh5PSh5K194KSoyO3ZhciB4MT0oX3grMSklNSoyO3ZhciB4Mj0oX3grMiklNSoyO0FbeHldXj1+Q1t4MV0mQ1t4Ml07QVt4eSsxXV49fkNbeDErMV0mQ1t4MisxXX19fTt2YXIgX2RlZmF1bHQ9Y2hpO2V4cG9ydHNbXCJkZWZhdWx0XCJdPV9kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/sha3/sponge/permute/chi/index.js\n"));

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/copy/index.js":
/*!********************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/copy/index.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("var copy=function copy(I,i){return function(O,o){var oi=o*2;var ii=i*2;O[oi]=I[ii];O[oi+1]=I[ii+1]}};module.exports=copy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS9jb3B5L2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhLDRCQUE0QixxQkFBcUIsV0FBVyxXQUFXLFlBQVksa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9zaGEzL3Nwb25nZS9wZXJtdXRlL2NvcHkvaW5kZXguanM/ZjZlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjt2YXIgY29weT1mdW5jdGlvbiBjb3B5KEksaSl7cmV0dXJuIGZ1bmN0aW9uKE8sbyl7dmFyIG9pPW8qMjt2YXIgaWk9aSoyO09bb2ldPUlbaWldO09bb2krMV09SVtpaSsxXX19O21vZHVsZS5leHBvcnRzPWNvcHk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/sha3/sponge/permute/copy/index.js\n"));

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/index.js":
/*!***************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:true}));exports[\"default\"]=void 0;var _chi=_interopRequireDefault(__webpack_require__(/*! ./chi */ \"./node_modules/sha3/sponge/permute/chi/index.js\"));var _iota=_interopRequireDefault(__webpack_require__(/*! ./iota */ \"./node_modules/sha3/sponge/permute/iota/index.js\"));var _rhoPi=_interopRequireDefault(__webpack_require__(/*! ./rho-pi */ \"./node_modules/sha3/sponge/permute/rho-pi/index.js\"));var _theta=_interopRequireDefault(__webpack_require__(/*! ./theta */ \"./node_modules/sha3/sponge/permute/theta/index.js\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var permute=function permute(){var C=new Uint32Array(10);var D=new Uint32Array(10);var W=new Uint32Array(2);return function(A){for(var roundIndex=0;roundIndex<24;roundIndex++){(0,_theta[\"default\"])({A:A,C:C,D:D,W:W});(0,_rhoPi[\"default\"])({A:A,C:C,W:W});(0,_chi[\"default\"])({A:A,C:C});(0,_iota[\"default\"])({A:A,roundIndex:roundIndex})}C.fill(0);D.fill(0);W.fill(0)}};var _default=permute;exports[\"default\"]=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYSw4Q0FBMkMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxrQkFBa0IsUUFBUSxnQ0FBZ0MsbUJBQU8sQ0FBQyw4REFBTyxHQUFHLGlDQUFpQyxtQkFBTyxDQUFDLGdFQUFRLEdBQUcsa0NBQWtDLG1CQUFPLENBQUMsb0VBQVUsR0FBRyxrQ0FBa0MsbUJBQU8sQ0FBQyxrRUFBUyxHQUFHLHFDQUFxQyxnQ0FBZ0MsZUFBZSwrQkFBK0IsMEJBQTBCLDBCQUEwQix5QkFBeUIsbUJBQW1CLHFCQUFxQixjQUFjLGNBQWMsdUJBQXVCLGdCQUFnQixFQUFFLHVCQUF1QixZQUFZLEVBQUUscUJBQXFCLFFBQVEsRUFBRSxzQkFBc0IsMEJBQTBCLEVBQUUsVUFBVSxVQUFVLFlBQVkscUJBQXFCLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS9pbmRleC5qcz8zY2UxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09dm9pZCAwO3ZhciBfY2hpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY2hpXCIpKTt2YXIgX2lvdGE9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pb3RhXCIpKTt2YXIgX3Job1BpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmhvLXBpXCIpKTt2YXIgX3RoZXRhPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdGhldGFcIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e1wiZGVmYXVsdFwiOm9ian19dmFyIHBlcm11dGU9ZnVuY3Rpb24gcGVybXV0ZSgpe3ZhciBDPW5ldyBVaW50MzJBcnJheSgxMCk7dmFyIEQ9bmV3IFVpbnQzMkFycmF5KDEwKTt2YXIgVz1uZXcgVWludDMyQXJyYXkoMik7cmV0dXJuIGZ1bmN0aW9uKEEpe2Zvcih2YXIgcm91bmRJbmRleD0wO3JvdW5kSW5kZXg8MjQ7cm91bmRJbmRleCsrKXsoMCxfdGhldGFbXCJkZWZhdWx0XCJdKSh7QTpBLEM6QyxEOkQsVzpXfSk7KDAsX3Job1BpW1wiZGVmYXVsdFwiXSkoe0E6QSxDOkMsVzpXfSk7KDAsX2NoaVtcImRlZmF1bHRcIl0pKHtBOkEsQzpDfSk7KDAsX2lvdGFbXCJkZWZhdWx0XCJdKSh7QTpBLHJvdW5kSW5kZXg6cm91bmRJbmRleH0pfUMuZmlsbCgwKTtELmZpbGwoMCk7Vy5maWxsKDApfX07dmFyIF9kZWZhdWx0PXBlcm11dGU7ZXhwb3J0c1tcImRlZmF1bHRcIl09X2RlZmF1bHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/sha3/sponge/permute/index.js\n"));

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/iota/index.js":
/*!********************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/iota/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:true}));exports[\"default\"]=void 0;var _roundConstants=_interopRequireDefault(__webpack_require__(/*! ./round-constants */ \"./node_modules/sha3/sponge/permute/iota/round-constants/index.js\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var iota=function iota(_ref){var A=_ref.A,roundIndex=_ref.roundIndex;var i=roundIndex*2;A[0]^=_roundConstants[\"default\"][i];A[1]^=_roundConstants[\"default\"][i+1]};var _default=iota;exports[\"default\"]=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS9pb3RhL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhLDhDQUEyQyxDQUFDLFdBQVcsRUFBQyxDQUFDLGtCQUFrQixRQUFRLDJDQUEyQyxtQkFBTyxDQUFDLDJGQUFtQixHQUFHLHFDQUFxQyxnQ0FBZ0MsZUFBZSw2QkFBNkIsd0NBQXdDLG1CQUFtQixvQ0FBb0MsdUNBQXVDLGtCQUFrQixrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3NoYTMvc3BvbmdlL3Blcm11dGUvaW90YS9pbmRleC5qcz82NjNkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09dm9pZCAwO3ZhciBfcm91bmRDb25zdGFudHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yb3VuZC1jb25zdGFudHNcIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e1wiZGVmYXVsdFwiOm9ian19dmFyIGlvdGE9ZnVuY3Rpb24gaW90YShfcmVmKXt2YXIgQT1fcmVmLkEscm91bmRJbmRleD1fcmVmLnJvdW5kSW5kZXg7dmFyIGk9cm91bmRJbmRleCoyO0FbMF1ePV9yb3VuZENvbnN0YW50c1tcImRlZmF1bHRcIl1baV07QVsxXV49X3JvdW5kQ29uc3RhbnRzW1wiZGVmYXVsdFwiXVtpKzFdfTt2YXIgX2RlZmF1bHQ9aW90YTtleHBvcnRzW1wiZGVmYXVsdFwiXT1fZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sha3/sponge/permute/iota/index.js\n"));

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/iota/round-constants/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/iota/round-constants/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:true}));exports[\"default\"]=void 0;var ROUND_CONSTANTS=new Uint32Array([0,1,0,32898,2147483648,32906,2147483648,2147516416,0,32907,0,2147483649,2147483648,2147516545,2147483648,32777,0,138,0,136,0,2147516425,0,2147483658,0,2147516555,2147483648,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,0,32778,2147483648,2147483658,2147483648,2147516545,2147483648,32896,0,2147483649,2147483648,2147516424]);var _default=ROUND_CONSTANTS;exports[\"default\"]=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS9pb3RhL3JvdW5kLWNvbnN0YW50cy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYSw4Q0FBMkMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxrQkFBa0IsUUFBUSxrWUFBa1ksNkJBQTZCLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS9pb3RhL3JvdW5kLWNvbnN0YW50cy9pbmRleC5qcz9lNTVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09dm9pZCAwO3ZhciBST1VORF9DT05TVEFOVFM9bmV3IFVpbnQzMkFycmF5KFswLDEsMCwzMjg5OCwyMTQ3NDgzNjQ4LDMyOTA2LDIxNDc0ODM2NDgsMjE0NzUxNjQxNiwwLDMyOTA3LDAsMjE0NzQ4MzY0OSwyMTQ3NDgzNjQ4LDIxNDc1MTY1NDUsMjE0NzQ4MzY0OCwzMjc3NywwLDEzOCwwLDEzNiwwLDIxNDc1MTY0MjUsMCwyMTQ3NDgzNjU4LDAsMjE0NzUxNjU1NSwyMTQ3NDgzNjQ4LDEzOSwyMTQ3NDgzNjQ4LDMyOTA1LDIxNDc0ODM2NDgsMzI3NzEsMjE0NzQ4MzY0OCwzMjc3MCwyMTQ3NDgzNjQ4LDEyOCwwLDMyNzc4LDIxNDc0ODM2NDgsMjE0NzQ4MzY1OCwyMTQ3NDgzNjQ4LDIxNDc1MTY1NDUsMjE0NzQ4MzY0OCwzMjg5NiwwLDIxNDc0ODM2NDksMjE0NzQ4MzY0OCwyMTQ3NTE2NDI0XSk7dmFyIF9kZWZhdWx0PVJPVU5EX0NPTlNUQU5UUztleHBvcnRzW1wiZGVmYXVsdFwiXT1fZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sha3/sponge/permute/iota/round-constants/index.js\n"));

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/rho-pi/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/rho-pi/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:true}));exports[\"default\"]=void 0;var _piShuffles=_interopRequireDefault(__webpack_require__(/*! ./pi-shuffles */ \"./node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js\"));var _rhoOffsets=_interopRequireDefault(__webpack_require__(/*! ./rho-offsets */ \"./node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js\"));var _copy=_interopRequireDefault(__webpack_require__(/*! ../copy */ \"./node_modules/sha3/sponge/permute/copy/index.js\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var rhoPi=function rhoPi(_ref){var A=_ref.A,C=_ref.C,W=_ref.W;(0,_copy[\"default\"])(A,1)(W,0);var H=0;var L=0;var Wi=0;var ri=32;for(var i=0;i<24;i++){var j=_piShuffles[\"default\"][i];var r=_rhoOffsets[\"default\"][i];(0,_copy[\"default\"])(A,j)(C,0);H=W[0];L=W[1];ri=32-r;Wi=r<32?0:1;W[Wi]=H<<r|L>>>ri;W[(Wi+1)%2]=L<<r|H>>>ri;(0,_copy[\"default\"])(W,0)(A,j);(0,_copy[\"default\"])(C,0)(W,0)}};var _default=rhoPi;exports[\"default\"]=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS9yaG8tcGkvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWEsOENBQTJDLENBQUMsV0FBVyxFQUFDLENBQUMsa0JBQWtCLFFBQVEsdUNBQXVDLG1CQUFPLENBQUMscUZBQWUsR0FBRyx1Q0FBdUMsbUJBQU8sQ0FBQyxxRkFBZSxHQUFHLGlDQUFpQyxtQkFBTyxDQUFDLGlFQUFTLEdBQUcscUNBQXFDLGdDQUFnQyxlQUFlLCtCQUErQiwrQkFBK0IsK0JBQStCLFFBQVEsUUFBUSxTQUFTLFVBQVUsWUFBWSxLQUFLLEtBQUssZ0NBQWdDLGdDQUFnQywrQkFBK0IsT0FBTyxPQUFPLFFBQVEsWUFBWSxrQkFBa0Isd0JBQXdCLCtCQUErQixpQ0FBaUMsbUJBQW1CLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS9yaG8tcGkvaW5kZXguanM/ZDQzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdPXZvaWQgMDt2YXIgX3BpU2h1ZmZsZXM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9waS1zaHVmZmxlc1wiKSk7dmFyIF9yaG9PZmZzZXRzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmhvLW9mZnNldHNcIikpO3ZhciBfY29weT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb3B5XCIpKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntcImRlZmF1bHRcIjpvYmp9fXZhciByaG9QaT1mdW5jdGlvbiByaG9QaShfcmVmKXt2YXIgQT1fcmVmLkEsQz1fcmVmLkMsVz1fcmVmLlc7KDAsX2NvcHlbXCJkZWZhdWx0XCJdKShBLDEpKFcsMCk7dmFyIEg9MDt2YXIgTD0wO3ZhciBXaT0wO3ZhciByaT0zMjtmb3IodmFyIGk9MDtpPDI0O2krKyl7dmFyIGo9X3BpU2h1ZmZsZXNbXCJkZWZhdWx0XCJdW2ldO3ZhciByPV9yaG9PZmZzZXRzW1wiZGVmYXVsdFwiXVtpXTsoMCxfY29weVtcImRlZmF1bHRcIl0pKEEsaikoQywwKTtIPVdbMF07TD1XWzFdO3JpPTMyLXI7V2k9cjwzMj8wOjE7V1tXaV09SDw8cnxMPj4+cmk7V1soV2krMSklMl09TDw8cnxIPj4+cmk7KDAsX2NvcHlbXCJkZWZhdWx0XCJdKShXLDApKEEsaik7KDAsX2NvcHlbXCJkZWZhdWx0XCJdKShDLDApKFcsMCl9fTt2YXIgX2RlZmF1bHQ9cmhvUGk7ZXhwb3J0c1tcImRlZmF1bHRcIl09X2RlZmF1bHQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/sha3/sponge/permute/rho-pi/index.js\n"));

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:true}));exports[\"default\"]=void 0;var PI_SHUFFLES=[10,7,11,17,18,3,5,16,8,21,24,4,15,23,19,13,12,2,20,14,22,9,6,1];var _default=PI_SHUFFLES;exports[\"default\"]=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS9yaG8tcGkvcGktc2h1ZmZsZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWEsOENBQTJDLENBQUMsV0FBVyxFQUFDLENBQUMsa0JBQWtCLFFBQVEsaUZBQWlGLHlCQUF5QixrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3NoYTMvc3BvbmdlL3Blcm11dGUvcmhvLXBpL3BpLXNodWZmbGVzL2luZGV4LmpzP2E1NzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzW1wiZGVmYXVsdFwiXT12b2lkIDA7dmFyIFBJX1NIVUZGTEVTPVsxMCw3LDExLDE3LDE4LDMsNSwxNiw4LDIxLDI0LDQsMTUsMjMsMTksMTMsMTIsMiwyMCwxNCwyMiw5LDYsMV07dmFyIF9kZWZhdWx0PVBJX1NIVUZGTEVTO2V4cG9ydHNbXCJkZWZhdWx0XCJdPV9kZWZhdWx0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js\n"));

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:true}));exports[\"default\"]=void 0;var RHO_OFFSETS=[1,3,6,10,15,21,28,36,45,55,2,14,27,41,56,8,25,43,62,18,39,61,20,44];var _default=RHO_OFFSETS;exports[\"default\"]=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS9yaG8tcGkvcmhvLW9mZnNldHMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWEsOENBQTJDLENBQUMsV0FBVyxFQUFDLENBQUMsa0JBQWtCLFFBQVEscUZBQXFGLHlCQUF5QixrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3NoYTMvc3BvbmdlL3Blcm11dGUvcmhvLXBpL3Joby1vZmZzZXRzL2luZGV4LmpzPzNkOGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzW1wiZGVmYXVsdFwiXT12b2lkIDA7dmFyIFJIT19PRkZTRVRTPVsxLDMsNiwxMCwxNSwyMSwyOCwzNiw0NSw1NSwyLDE0LDI3LDQxLDU2LDgsMjUsNDMsNjIsMTgsMzksNjEsMjAsNDRdO3ZhciBfZGVmYXVsdD1SSE9fT0ZGU0VUUztleHBvcnRzW1wiZGVmYXVsdFwiXT1fZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js\n"));

/***/ }),

/***/ "./node_modules/sha3/sponge/permute/theta/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/sha3/sponge/permute/theta/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:true}));exports[\"default\"]=void 0;var _copy=_interopRequireDefault(__webpack_require__(/*! ../copy */ \"./node_modules/sha3/sponge/permute/copy/index.js\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var theta=function theta(_ref){var A=_ref.A,C=_ref.C,D=_ref.D,W=_ref.W;var H=0;var L=0;for(var x=0;x<5;x++){var x20=x*2;var x21=(x+5)*2;var x22=(x+10)*2;var x23=(x+15)*2;var x24=(x+20)*2;C[x20]=A[x20]^A[x21]^A[x22]^A[x23]^A[x24];C[x20+1]=A[x20+1]^A[x21+1]^A[x22+1]^A[x23+1]^A[x24+1]}for(var _x=0;_x<5;_x++){(0,_copy[\"default\"])(C,(_x+1)%5)(W,0);H=W[0];L=W[1];W[0]=H<<1|L>>>31;W[1]=L<<1|H>>>31;D[_x*2]=C[(_x+4)%5*2]^W[0];D[_x*2+1]=C[(_x+4)%5*2+1]^W[1];for(var y=0;y<25;y+=5){A[(y+_x)*2]^=D[_x*2];A[(y+_x)*2+1]^=D[_x*2+1]}}};var _default=theta;exports[\"default\"]=_default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS90aGV0YS9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYSw4Q0FBMkMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxrQkFBa0IsUUFBUSxpQ0FBaUMsbUJBQU8sQ0FBQyxpRUFBUyxHQUFHLHFDQUFxQyxnQ0FBZ0MsZUFBZSwrQkFBK0Isd0NBQXdDLFFBQVEsUUFBUSxZQUFZLElBQUksS0FBSyxZQUFZLGdCQUFnQixpQkFBaUIsaUJBQWlCLGlCQUFpQiwwQ0FBMEMsc0RBQXNELGFBQWEsS0FBSyxNQUFNLHNDQUFzQyxPQUFPLE9BQU8saUJBQWlCLGlCQUFpQiwyQkFBMkIsK0JBQStCLFlBQVksS0FBSyxNQUFNLHFCQUFxQiw0QkFBNEIsbUJBQW1CLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvc2hhMy9zcG9uZ2UvcGVybXV0ZS90aGV0YS9pbmRleC5qcz8yNGE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl09dm9pZCAwO3ZhciBfY29weT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb3B5XCIpKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntcImRlZmF1bHRcIjpvYmp9fXZhciB0aGV0YT1mdW5jdGlvbiB0aGV0YShfcmVmKXt2YXIgQT1fcmVmLkEsQz1fcmVmLkMsRD1fcmVmLkQsVz1fcmVmLlc7dmFyIEg9MDt2YXIgTD0wO2Zvcih2YXIgeD0wO3g8NTt4Kyspe3ZhciB4MjA9eCoyO3ZhciB4MjE9KHgrNSkqMjt2YXIgeDIyPSh4KzEwKSoyO3ZhciB4MjM9KHgrMTUpKjI7dmFyIHgyND0oeCsyMCkqMjtDW3gyMF09QVt4MjBdXkFbeDIxXV5BW3gyMl1eQVt4MjNdXkFbeDI0XTtDW3gyMCsxXT1BW3gyMCsxXV5BW3gyMSsxXV5BW3gyMisxXV5BW3gyMysxXV5BW3gyNCsxXX1mb3IodmFyIF94PTA7X3g8NTtfeCsrKXsoMCxfY29weVtcImRlZmF1bHRcIl0pKEMsKF94KzEpJTUpKFcsMCk7SD1XWzBdO0w9V1sxXTtXWzBdPUg8PDF8TD4+PjMxO1dbMV09TDw8MXxIPj4+MzE7RFtfeCoyXT1DWyhfeCs0KSU1KjJdXldbMF07RFtfeCoyKzFdPUNbKF94KzQpJTUqMisxXV5XWzFdO2Zvcih2YXIgeT0wO3k8MjU7eSs9NSl7QVsoeStfeCkqMl1ePURbX3gqMl07QVsoeStfeCkqMisxXV49RFtfeCoyKzFdfX19O3ZhciBfZGVmYXVsdD10aGV0YTtleHBvcnRzW1wiZGVmYXVsdFwiXT1fZGVmYXVsdDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/sha3/sponge/permute/theta/index.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!"), __webpack_exec__("./node_modules/next/dist/client/router.js"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);